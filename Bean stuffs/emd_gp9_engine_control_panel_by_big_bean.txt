@name EMD GP9 Engine control panel by Big Bean - Public Edition
@inputs [RLCPT]:entity Shutdown GroundReset IsolationCycle HDLTCycle GenFieldSw AuxGenFieldSw GaugeBacklights  HDLTf_In HDLTr_In HDLTf_In_PT2 HDLTr_In_PT2
@inputs FrontHDLTSw RearHDLTSw CabLightSw EngRoomLightSw FrontMarkerLightSw RearMarkerLightSw
@outputs Prime1 Start1 Shutdown1 Isolation1 GenField GroundTripped  HDLTf_Out HDLTr_Out HDLTf_Out_PT2 HDLTr_Out_PT2  IsoRelay GroundRelay
#----
#Config vars
@persist UseBackpanel BackpanelColor:vector BackpanelMaterial:string  UseGroundSystem GroundTripCurrent GroundTripTimeout
#----
#All the other vars
@persist [SmoothTable BREAKER_DATA]:table [E]:entity RLCPTW:wirelink Run  PrimePos StartPos StopPos GroundPos IsolationAngle IsoPos HDLTAngle HDLTPos  TMLoad EngineSpeed On ISQ GRQ  Prime Start
@trigger none
#----
#[ 
'Sup. This is a cool epic thing for your beloved GP9 that will enhance your locomotive operation experience... yeah who am I kidding this is just a GP9 engine panel lol.
Regardless, it has a couple neat features such as: a Ground relay for when you're not taking care of your traction motor current (you can disable this btw), and working MU headlights.

Here's how to set it up:
------------------------
<INPUTS>
1. Your standard stuff like RLCPT, Shutdown, GroundReset go to the respective stuff
2. IsolationCycle and HDLTCycle need to be non-toggled buttons that are placed over the two rotary switches
3. GenFieldSw, AuxGenFieldSw and GaugeBacklights are the 3 large switches below the engine stop button
4. HDLTf_In and HDLTr_In go to your headlight control switches
5. HDLTf_In_PT2 and HDLTr_In_PT2 go to PT2's Lights_Forward and Lights_Backward outputs
6. All of the inputs with Sw at the var name end go to toggled buttons placed over the small breaker group on the left of the panel

<OUTPUTS>
1. Prime1, Start1, ... GenField go to PT2
2. GroundTripped can be used for an indicator somewhere in your loco
3. HDLTf_Out and HDLTr_Out go to your front and rear headlights, respectively of course
4. HDLTf_Out_PT2 and HDLTr_Out_PT2 go to PT2's Lights_Front and Lights_Rear inputs
5. IsoRelay and GroundRelay are just extra outputs for debug or something

And that's it... so yeah, enjoy (check out the sexy config too btw)
]#
E = entity()
E:setAlpha(0)
if(first()|duped()){
    Run = 0
}
if(first()|dupefinished()){
    
    #-------
    #Config:
    #-------
    UseBackpanel = 0 #If 1, a plate behind all the buttons and whatnot will be created (primarily made to be used without this option on)
    BackpanelColor = vec(255) #Color of the plate
    BackpanelMaterial = "" #Material of the plate
    #---
    UseGroundSystem = 1 #If 1, a system that cuts out current for traction motors will be used to protect them from being blown up
    GroundTripCurrent = 1200 #Traction motor current at which the timeout timer will start running
    GroundTripTimeout = 20 #The amount of time the protection system takes before grounding traction motors
    
    #-------------#
    #End of config#
    #-------------#
    
    #---------------
    #Scripts & Init:
    #---------------
    function void entity:pushButtonGeneric(StartIndex, Pos:vector, RimCol:vector, RimMat:string, ButtonCol:vector, ButtonMat:string, Scale){
        local E = This
        local PosX = Pos:x()
        local PosY = Pos:y()
        local PosZ = Pos:z()
        
        local A = StartIndex #1 - Base
        holoCreate(A, E:toWorld(vec(0, 0, 0.2 * Scale) + vec(PosX, PosY, PosZ * Scale)), vec(0.2, 0.2, 0.05) * Scale, E:toWorld(ang(0, 0, 0)), RimCol, "models/holograms/hq_rcylinder_thin.mdl")
        holoParent(A, E)
        holoMaterial(A, RimMat)
        
        A++ #2 - Rim
        holoCreate(A, E:toWorld(vec(0, 0, 0.8 * Scale) + vec(PosX, PosY, PosZ * Scale)), vec(0.17, 0.17, 0.1) * Scale, E:toWorld(ang(0, 0, 0)), RimCol, "models/holograms/hq_tube_thin.mdl")
        holoParent(A, E)
        holoMaterial(A, RimMat)
        
        A++ #3 - Rounded rim top
        holoCreate(A, E:toWorld(vec(0, 0, 1.4 * Scale) + vec(PosX, PosY, PosZ * Scale)), vec(0.17, 0.17, 0.17) * Scale, E:toWorld(ang(0, 0, 0)), RimCol, "models/holograms/hq_torus.mdl")
        holoParent(A, E)
        holoMaterial(A, RimMat)
        
        A++ #4 - Button
        holoCreate(A, E:toWorld(vec(0, 0, 0.85 * Scale) + vec(PosX, PosY, PosZ * Scale)), vec(0.13, 0.13, 0.1) * Scale, E:toWorld(ang(0, 0, 0)), ButtonCol, "models/holograms/hq_rcylinder_thin.mdl")
        holoParent(A, E)
        holoMaterial(A, ButtonMat)
    }
    
    function number smooth(Var, SmoothAmount, TID:string, DefaultVal){
        if(!SmoothTable:exists(TID)){
            SmoothTable[TID,number] = DefaultVal
        }
        local Smooth = SmoothTable[TID,number]
        Smooth += (Var - Smooth) / SmoothAmount
        SmoothTable[TID,number] = Smooth
        return Smooth
    }
    
    function void variableBGChanger(BG_INFO:table, INPUT:table, SoundIndexShift){
        local BGCount = BG_INFO:count()
        for(I = 1, BGCount){
            local CurData = BG_INFO[I, table]
            local Index = CurData[1, number]
            local BGIndex = CurData[2, number]
            
            if(holoEntity(Index):getBodygroup(BGIndex) != INPUT[I, number]){
                holoBodygroup(Index, BGIndex, INPUT[I, number])
                holoEntity(Index):soundPlay(SoundIndexShift + (I - 1), 0.4, (INPUT[I, number] ? CurData[3, string] : CurData[4, string]))
                soundVolume(SoundIndexShift + (I - 1), 0.5)
            }else{
                continue
            }
        }
    }
    
    
    BREAKER_DATA = table(
    table(18, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(16, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(14, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(33, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(34, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(35, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(36, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(37, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"),
    table(38, 1, "monkssounds/buttons/button34_push.wav", "monkssounds/buttons/button34_release.wav"))
    
    GroundRelay = 1
    GRQ = 1
    
    #--------------
    #Holos and P2M:
    #--------------
    #Bolts
    P2MB = p2mCreate(1, E:toWorld(vec()), E:toWorld(ang()))
    P2MB:p2mSetParent(E)
    
    P2MB:p2mPushModel(1, "models/anytrains/props/bean/screw_m5.mdl", vec(5.2, 13.8, -0.37), ang(0, -4, 0), vec(2), 0, 0, 2)
    P2MB:p2mPushModel(1, "models/anytrains/props/bean/screw_m5.mdl", vec(5.2, 5, -0.37), ang(0, 13, 0), vec(2), 0, 0, 2)
    P2MB:p2mPushModel(1, "models/anytrains/props/bean/screw_m5.mdl", vec(5.2, -4.3, -0.37), ang(0, -7, 0), vec(2), 0, 0, 2)
    P2MB:p2mPushModel(1, "models/anytrains/props/bean/screw_m5.mdl", vec(5.2, -13.1, -0.37), ang(0, 5, 0), vec(2), 0, 0, 2)
    
    P2MB:p2mBuild()
    P2MB:p2mSetMaterial(1, "models/proppertextures/cabmetal_gray")
    
    #More bolts
    P2MBI = p2mCreate(2, E:toWorld(vec()), E:toWorld(ang()))
    P2MBI:p2mSetParent(E)
    
    #Isolation switch
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(2.5, -9.5, -0.26), ang(0, 40, 0), vec(2), 0, 0, 4)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(2.5, -11.9, -0.26), ang(0, 20, 0), vec(2), 0, 0, 4)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(0.3, -9.5, -0.26), ang(0, 32, 0), vec(2), 0, 0, 4)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(0.3, -11.9, -0.26), ang(0, 27, 0), vec(2), 0, 0, 4)
    
    #Breakers
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, -7, -0.12), ang(0, -20, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, -7, -0.12), ang(0, -15, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, -5.5, -0.12), ang(0, -17, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, -5.5, -0.12), ang(0, -10, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, -4, -0.12), ang(0, -24, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, -4, -0.12), ang(0, -12, 0), vec(1), 0, 0, 1)
    
    #Breakers vol. 2
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 9.15, -0.12), ang(0, -20, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 9.15, -0.12), ang(0, -10, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 8.45, -0.12), ang(0, -12, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 8.45, -0.12), ang(0, -11, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 7.8, -0.12), ang(0, -17, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 7.8, -0.12), ang(0, -19, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 7.1, -0.12), ang(0, -7, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 7.1, -0.12), ang(0, -8, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 6.38, -0.12), ang(0, -14, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 6.38, -0.12), ang(0, -13, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 5.7, -0.12), ang(0, -6, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 5.7, -0.12), ang(0, -24, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 5, -0.12), ang(0, -23, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 5, -0.12), ang(0, -15, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-2.1, 4.3, -0.12), ang(0, -17, 0), vec(1), 0, 0, 1)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(-4.3, 4.3, -0.12), ang(0, -13, 0), vec(1), 0, 0, 1)
    
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(3, 9.2, -0.26), ang(0, 20, 0), vec(2), 0, 0, 4)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(3, 12.2, -0.26), ang(0, 1, 0), vec(2), 0, 0, 4)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(0.6, 9.2, -0.26), ang(0, -4, 0), vec(2), 0, 0, 4)
    P2MBI:p2mPushModel(2, "models/anytrains/props/bean/screw_m5.mdl", vec(0.6, 12.2, -0.26), ang(0, 15, 0), vec(2), 0, 0, 4)
    
    
    P2MBI:p2mBuild()
    P2MBI:p2mSetMaterial(2, "models/proppertextures/enamel_darkgray")
    #----
    
    
    
    if(UseBackpanel){
        A = 0
        holoCreate(A)
        holoParent(A, E)
        holoPos(A, E:toWorld(vec(0, 0, -0.45)))
        holoAng(A, E:toWorld(ang(0, 90, 0)))
        holoModel(A, "models/sprops/rectangles_thin/size_2/rect_12x24x1_5.mdl")
        holoColor(A, BackpanelColor)
        holoMaterial(A, BackpanelMaterial)
        holoScale(A, vec(1.14, 0.95, 0.75))
    }
    
    
    #Ground reset and shutdown buttons
    E:pushButtonGeneric(1, vec(1.98, -1.5, 0), vec(150), "models/proppertextures/acrylic", vec(255), "models/proppertextures/plastic_black", 0.7)
    
    E:pushButtonGeneric(5, vec(1.98, -5.7, 0), vec(150), "models/proppertextures/acrylic", vec(255), "models/proppertextures/plastic_red", 0.7)
    
    #Button label decals
    A = 9
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(2.2, -5.7, 0.2)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/emrgfuelcutoffandenginestop")
    holoColor(A, vec(255))
    holoScale(A, vec(0.75, 0.7, 1))
    
    A = 10
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(3.4, -1.5, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/groundreset")
    holoColor(A, vec(230))
    holoScale(A, vec(0.9, 0.9, 1))
    #----
    
    
    #Isolation switch
    #Backplate
    A = 11
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(1.4, -10.7, -1)))
    holoAng(A, E:toWorld(ang(0, 0, 0)))
    holoModel(A, "models/holograms/hq_rcube_thin.mdl")
    holoColor(A, vec(255))
    holoMaterial(A, "models/proppertextures/metal_shiny")
    holoScale(A, vec(0.4, 0.4, 0.2))
    
    #Switch
    A = 12
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(1.4, -10.7, 0)))
    holoAng(A, E:toWorld(ang(0, 90, 0)))
    holoModel(A, "models/magtrainslocos/rotaryswitches/headlight_emd.mdl")
    holoBodygroup(A, 2, 1)
    holoScale(A, vec(0.8))
    
    #Isolation decal
    A = 13
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(1.3, -11.48, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "basic_lables/isolation_decal")
    holoColor(A, vec(40))
    holoScale(A, vec(0.26))
    #----
    
    
    #Main flip switches
    #Gauge backlight switch
    A = 14
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, -7, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_single.mdl")
    holoScale(A, vec(0.8))
    
    A = 15
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, -7, -0.3)))
    holoAng(A, E:toWorld(ang(0, 0, 0)))
    holoModel(A, "models/holograms/hq_stube.mdl")
    holoMaterial(A, "models/proppertextures/plastic_black")
    holoScale(A, vec(0.15, 0.07, 0.1))
    
    #Auxiliary generator field switch
    A = 16
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, -5.5, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_single.mdl")
    holoScale(A, vec(0.8))
    
    A = 17
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, -5.5, -0.3)))
    holoAng(A, E:toWorld(ang(0, 0, 0)))
    holoModel(A, "models/holograms/hq_stube.mdl")
    holoMaterial(A, "models/proppertextures/plastic_black")
    holoScale(A, vec(0.15, 0.07, 0.1))
    
    #Generator field switch
    A = 18
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, -4, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_single.mdl")
    holoScale(A, vec(0.8))
    
    A = 19
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, -4, -0.3)))
    holoAng(A, E:toWorld(ang(0, 0, 0)))
    holoModel(A, "models/holograms/hq_stube.mdl")
    holoMaterial(A, "models/proppertextures/plastic_black")
    holoScale(A, vec(0.15, 0.07, 0.1))
    
    
    #Label decals
    #GaugeBacklights
    A = 20
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.5, -7, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/gaugelight")
    holoColor(A, vec(230))
    holoScale(A, vec(0.7))
    
    #Auxiliary generator field
    A = 21
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.5, -5.5, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/auxgenfield")
    holoColor(A, vec(230))
    holoScale(A, vec(0.7))
    
    #Generator field
    A = 22
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.5, -4, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/genfield")
    holoColor(A, vec(230))
    holoScale(A, vec(0.7))
    #----
    
    
    #More breakers
    A = 33 #Front HDLT
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, 8.8, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_dual.mdl")
    holoScale(A, vec(0.8))
    
    A = 34 #Rear HDLT
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, 7.45, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_dual.mdl")
    holoScale(A, vec(0.8))
    
    A = 35 #Cab light
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, 6.38, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_single.mdl")
    holoScale(A, vec(0.8))
    
    A = 36 #Engine room light
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, 5.7, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_single.mdl")
    holoScale(A, vec(0.8))
    
    A = 37 #Front marker lights
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, 5, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_single.mdl")
    holoScale(A, vec(0.8))
    
    A = 38 #Rear marker lights
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, 4.3, 0.1)))
    holoAng(A, E:toWorld(ang(0, 90, 90)))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/circuitbreakers/breaker_single.mdl")
    holoScale(A, vec(0.8))
    
    #Rim
    A = 39
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-3.2, 6.7, -0.3)))
    holoAng(A, E:toWorld(ang(0, 0, 0)))
    holoModel(A, "models/holograms/hq_stube_thin.mdl")
    holoMaterial(A, "models/proppertextures/plastic_black")
    holoScale(A, vec(0.145, 0.48, 0.1))
    
    #Labels
    A = 40
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.4, 7.45 + 0.675, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/hdlts")
    holoColor(A, vec(230))
    holoScale(A, vec(0.6))
    
    A = 41
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.7, 8.8, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/front")
    holoColor(A, vec(230))
    holoScale(A, vec(0.6))
    
    A = 42
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.7, 7.45, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/rear")
    holoColor(A, vec(230))
    holoScale(A, vec(0.6))
    
    A = 43
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.7, 6.38, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/cab")
    holoColor(A, vec(230))
    holoScale(A, vec(0.5))
    
    A = 44
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(-1.6, 5.7, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/engroom")
    holoColor(A, vec(230))
    holoScale(A, vec(0.5))
    #----
    
    #Headlight control switch
    #Backplate
    A = 45
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(1.6, 10.7, -1)))
    holoAng(A, E:toWorld(ang(0, 0, 0)))
    holoModel(A, "models/holograms/hq_rcube_thin.mdl")
    holoColor(A, vec(255))
    holoMaterial(A, "models/proppertextures/metal_shiny")
    holoScale(A, vec(0.44, 0.47, 0.2))
    
    #Switch
    A = 46
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(1.8, 10.7, 0)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "models/magtrainslocos/rotaryswitches/headlight_emd.mdl")
    holoBodygroup(A, 2, 1)
    holoScale(A, vec(0.7))
    
    #Isolation decal
    A = 47
    holoCreate(A)
    holoParent(A, E)
    holoPos(A, E:toWorld(vec(1.5, 10.7, 0.3)))
    holoAng(A, E:toWorld(ang(0, 180, 0)))
    holoModel(A, "plane")
    holoMaterial(A, "titus/headlightcontrol")
    holoColor(A, vec(40))
    holoScale(A, vec(0.5))
    
    
    
    
    #Run delay
    timer("run", 500)
}

#-------------
#Running code:
#-------------
if(clk("run")){
    Run = 1
}
if(Run){
    timer("clk", 100)
}

#Isolation switch cycling
if(changed(IsolationCycle) & IsolationCycle){
    IsoPos = !IsoPos
}

if(changed(IsoPos)){
    timer("relayToggle", (IsoPos == 1 ? randint(450, 600) : randint(50, 150)))
}
if(clk("relayToggle")){
    if(IsoPos == 1){
        IsoRelay = 1
    }else{
        IsoRelay = 0
    }
    stoptimer("relayToggle")
}
Isolation1 = IsoRelay

#Functional stuff
#Priming, startup and shutdown
Prime1 = Prime

if(!Isolation1){
    Start1 = Start
    
    if(EngineSpeed == 0 & On){
        Shutdown1 = Shutdown
    }
}else{
    Start1 = 0
    Shutdown1 = 0
}
#----

#Ground system
if(UseGroundSystem){
    if(TMLoad > GroundTripCurrent & !GroundTripped){
        timer("groundTrip", max(GroundTripTimeout * 1000, 500))
    }else{
        stoptimer("groundTrip")
    }
    
    if(clk("groundTrip")){
        GroundTripped = 1
        stoptimer("groundTrip")
    }
    
    if(GroundReset){
        GroundTripped = 0
    }
}

GenField = (!GroundTripped & GenFieldSw)
GroundRelay = (!GroundTripped)
#----

#Headlights
if(changed(HDLTCycle) & HDLTCycle){
    if(HDLTPos < 3){
        HDLTPos++
    }else{
        HDLTPos = 0
    }
}

HDLTAngle = (-HDLTPos * 90) + 180
holoAng(46, E:toWorld(ang(0, HDLTAngle, 0)))

#Headlight control
switch(HDLTPos){
    case 0, #Single or intermediate unit
        HDLTf_Out = HDLTf_In * FrontHDLTSw
        HDLTr_Out = HDLTr_In * RearHDLTSw
        
        break
    case 1, #Controlling with unit coupled at long hood end
        HDLTf_Out = HDLTf_In * FrontHDLTSw
        HDLTr_Out = HDLTr_In * RearHDLTSw
        HDLTr_Out_PT2 = HDLTr_In
        HDLTf_Out_PT2 = 0
        
        break
    case 2, #Controlling with unit coupled at short hood end
        HDLTf_Out = HDLTf_In * FrontHDLTSw
        HDLTr_Out = HDLTr_In * RearHDLTSw
        HDLTr_Out_PT2 = 0
        HDLTf_Out_PT2 = HDLTf_In
        
        break
    case 3, #Controlled via unit coupled at either end
        HDLTf_Out = HDLTr_In_PT2 * FrontHDLTSw
        HDLTr_Out = HDLTf_In_PT2 * RearHDLTSw
        
        break
}
#----

if(clk("clk")){
    #RLCPT data gathering
    RLCPTW = RLCPT:wirelink()
    TMLoad = RLCPTW["Load1", number]
    EngineSpeed = RLCPTW["EngineSpeed1", number]
    On = RLCPTW["On1", number]
    #----
    
    #Switch moving and flipping and whatnot
    StopPos = smooth(Shutdown * 0.4, 1.2, "stop-pos-smooth", 0)
    holoPos(8, E:toWorld(vec(1.98, -5.7, 0.59 - StopPos)))
    
    GroundPos = smooth(GroundReset * 0.4, 1.2, "ground-pos-smooth", 0)
    holoPos(4, E:toWorld(vec(1.98, -1.5, 0.59 - GroundPos)))
    
    IsolationAngle = smooth(IsoPos * 90, 1.5, "iso-angle-smooth", 0)
    holoAng(12, E:toWorld(ang(0, 90 + IsolationAngle, 0)))
    
    variableBGChanger(BREAKER_DATA, table(GenFieldSw, AuxGenFieldSw, GaugeBacklights, FrontHDLTSw, RearHDLTSw, CabLightSw, EngRoomLightSw, FrontMarkerLightSw, RearMarkerLightSw), 6)
    #----
}


#Sounds
#Pushbuttons

if(changed(Shutdown) & Shutdown){
    holoEntity(8):soundPlay(3, 0.25, "monkssounds/buttons/button31_push.wav")
}elseif(changed(Shutdown) & !Shutdown){
    holoEntity(8):soundPlay(3, 0.25, "monkssounds/buttons/button31_release.wav")
}
soundVolume(3, 0.4)

if(changed(GroundReset) & GroundReset){
    holoEntity(4):soundPlay(4, 0.25, "monkssounds/buttons/button31_push.wav")
}elseif(changed(GroundReset) & !GroundReset){
    holoEntity(4):soundPlay(4, 0.25, "monkssounds/buttons/button31_release.wav")
}
soundVolume(4, 0.4)

#Isolation switch
if(changed(IsolationCycle) & IsolationCycle){
    if(IsoPos > 0){
        holoEntity(12):soundPlay(5, 0.5, "trans_train_sounds/buttons/emd_slideswitches/slideswitch_mom_on.wav")
    }elseif(IsoPos == 0){
        holoEntity(12):soundPlay(5, 0.5, "trans_train_sounds/buttons/emd_slideswitches/slideswitch_mom_off.wav")
    }
    soundVolume(5, 1)
}

#Headlight control switch
if(changed(HDLTCycle) & HDLTCycle){
    if(HDLTPos > 0){
        holoEntity(46):soundPlay(15, 0.5, "trans_train_sounds/buttons/emd_slideswitches/slideswitch_mom_on.wav")
    }elseif(HDLTPos == 0){
        holoEntity(46):soundPlay(15, 0.5, "trans_train_sounds/buttons/emd_slideswitches/slideswitch_mom_off.wav")
    }
    soundVolume(15, 1)
}
#----

#Isolation relay
if(IsoRelay & !ISQ){ #Iso relay sounds
    holoEntity(11):soundPlay(16, 0.8, "_jazzlok/switches/relay_01.wav")
    ISQ = 1
}elseif(!IsoRelay & ISQ){
    holoEntity(11):soundPlay(16, 0.8, "_jazzlok/switches/relay_02.wav")
    ISQ = 0
}
soundVolume(16, 0.5)

#Ground relay
if(GroundRelay & !GRQ){ #Iso relay sounds
    holoEntity(11):soundPlay(17, 0.8, "_jazzlok/switches/relay_01.wav")
    GRQ = 1
}elseif(!GroundRelay & GRQ){
    holoEntity(11):soundPlay(17, 0.8, "_jazzlok/switches/relay_02.wav")
    GRQ = 0
}
soundVolume(17, 0.5)

