@name Immersive camera movement by Big Bean
@inputs [DRIVER_SEAT CONDUCTOR_SEAT]:entity LOCOMOTIVE:entity
@outputs [DRIVER_CAM_PARENT CONDUCTOR_CAM_PARENT]:entity [DriverCamPosition ConductorCamPosition]:vector DriverCamActive ConductorCamActive
@persist [E L]:entity InvertVelocity [XAxisLimits YAxisLimits ZAxisLimits]:vector2 AxisSensitivityMultipliers:vector MinimumAccelDeviation  [LocoVelocity RawAcceleration DSeatPosToLoco CSeatPosToLoco CamDeflectionSmooth]:vector SMOOTH_TABLE:table UpdateCount  IsHighspeedServer
@trigger none
#----
E = entity()
L = LOCOMOTIVE
if(first()|duped()){
    #[Setup tutorial:
        -Spawn this E2 somewhere on your loco
        -Spawn two camera controllers on your loco as well. Make sure that your settings have Coordinates local to parent unticked and localized movement and client side movement ticked
        -Connect the cam controllers to the relevant seats and then connect their Position and Parent inputs to the respective outputs of this E2
        -Finally, connect their active inputs to the E2
        
        Cool epic disclaimer: The cam controller prevents you from going into third person, what a fun thing to cry about, right?
        I guess it's also laggy or something idk, anyway cya
    ]#
    #Config:
    #-------
    InvertVelocity = 1 #Set this to 1 if the cam is moving in the wrong direction
    XAxisLimits = vec2(-0.3, 10) #Limits the maximum camera deflection on the X axis (Xval = min, Yval = max)
    YAxisLimits = vec2(-0.6, 0.3) #Similar to the one above but for the other two axes
    ZAxisLimits = vec2(-0.2, 1)
    AxisSensitivityMultipliers = vec(1.8, 3, 1) #Defines the sensitivity of the individual axes to acceleration (higher numbers make the camera move farther at the same acceleration)
    MinimumAccelDeviation = 0.001 #Sets a deadzone for the acceleration vector. This is useful if the camera is shaking when the locomotive is stationary
    
    #End of config#
    #-------------#
    
    #Init:
    SMOOTH_TABLE = table()
    function vector smoothVec(Value:vector, TID:string, SmoothLevel, Init:vector){
        if(!SMOOTH_TABLE:exists(TID)){
            SMOOTH_TABLE[TID, vector] = Init
        }
        
        local Smooth = SMOOTH_TABLE[TID, vector]
        Smooth += (Value - Smooth) / SmoothLevel
        SMOOTH_TABLE[TID, vector] = Smooth
        return Smooth
    }
    
    function number smooth(Var, SmoothAmount, TID:string, DefaultVal){
        if(!SMOOTH_TABLE:exists(TID)){
            SMOOTH_TABLE[TID,number] = DefaultVal
        }
        local Smooth = SMOOTH_TABLE[TID,number]
        Smooth += (Var - Smooth) / SmoothAmount
        SMOOTH_TABLE[TID,number] = Smooth
        return Smooth
    }
    
    function number calculateCamDeflectionRate(RawAccel, Multiplier, MinVal, MaxVal, MinimumDeviation){
        local AccelDeadzoned = max(RawAccel - MinimumDeviation, 0) + min(RawAccel + MinimumDeviation, 0)
        return clamp(AccelDeadzoned * Multiplier, MinVal, MaxVal)
        
    }
    
    function void entity:setCameraProperties(HoloIndex, SeatPosRelative:vector, CamDeflection:vector, SmoothTID:string, CamSmoothing){
        local E = This
        local HoloPos = smoothVec(SeatPosRelative + vec(0, 0, 48) + CamDeflection, SmoothTID, CamSmoothing, SeatPosRelative + vec(0, 0, 48))
        holoPos(HoloIndex, E:toWorld(HoloPos))
    }
}
if(first()|dupefinished()){
    #Holo generation
    local A = 1 #Driver seat cam
    DSeatPosToLoco = L:toLocal(DRIVER_SEAT:pos())
    holoCreate(A, L:toWorld(DSeatPosToLoco + vec(0, 0, 48)), vec(0.02), L:toWorld(ang(0, L:toLocal(DRIVER_SEAT:angles()):yaw(), 0)), vec4(0), "cube")
    holoMaterial(A, "models/proppertextures/invisible")
    holoParent(A, L)
    DRIVER_CAM_PARENT = holoEntity(A)
    DriverCamPosition = DRIVER_CAM_PARENT:pos()
    
    A = 2 #Conductor seat cam
    CSeatPosToLoco = L:toLocal(CONDUCTOR_SEAT:pos())
    holoCreate(A, L:toWorld(CSeatPosToLoco + vec(0, 0, 48)), vec(0.02), L:toWorld(ang(0, L:toLocal(CONDUCTOR_SEAT:angles()):yaw(), 0)), vec4(0), "cube")
    holoMaterial(A, "models/proppertextures/invisible")
    holoParent(A, L)
    CONDUCTOR_CAM_PARENT = holoEntity(A)
    ConductorCamPosition = CONDUCTOR_CAM_PARENT:pos()
    #----
    
    runOnTick(1) #Seethe
    IsHighspeedServer = (1 / tickInterval()) > 34
}

if(tickClk() & UpdateCount < (IsHighspeedServer ? 2 : 1)){ #How to make this work on 66tps servers in a nutshell (funny thing is, this makes it lag more on faster servers, but it's either that or 1600 ops at runtime)
    UpdateCount++
}

if(UpdateCount == (IsHighspeedServer ? 2 : 1)){
    RawVel = L:velL() * (InvertVelocity ? -1 : 1)
    LocoVelocity = vec(toUnit("km/h", L:velL():x()), toUnit("km/h", L:velL():y()), toUnit("km/h", L:velL():z())) / 3.6
    RawAcceleration = $LocoVelocity
    local CamAccelDeflection = vec(smooth(calculateCamDeflectionRate(RawAcceleration:x(), -AxisSensitivityMultipliers:x(), XAxisLimits:x(), XAxisLimits:y(), MinimumAccelDeviation), 2, "x_axis_smooth", 0), 
        smooth(calculateCamDeflectionRate(RawAcceleration:y(), -AxisSensitivityMultipliers:y(), YAxisLimits:x(), YAxisLimits:y(), MinimumAccelDeviation), 10, "y_axis_smooth", 0), 
        smooth(calculateCamDeflectionRate(RawAcceleration:z(), AxisSensitivityMultipliers:z(), ZAxisLimits:x(), ZAxisLimits:y(), MinimumAccelDeviation), 15, "z_axis_smooth", 0)) * 33
    
    CamDeflectionSmooth += (CamAccelDeflection - CamDeflectionSmooth) / 20
    
    L:setCameraProperties(1, DSeatPosToLoco, CamDeflectionSmooth, "driver_cam_pos", 1.7)
    L:setCameraProperties(2, CSeatPosToLoco, CamDeflectionSmooth, "conductor_cam_pos", 1.7)
    
    DriverCamPosition = DRIVER_CAM_PARENT:pos()
    ConductorCamPosition = CONDUCTOR_CAM_PARENT:pos()
    
    DriverCamActive = (DRIVER_SEAT:driver():isPlayer() ? 1 : 0)
    ConductorCamActive = (CONDUCTOR_SEAT:driver():isPlayer() ? 1 : 0)
    
    UpdateCount = 0
}

