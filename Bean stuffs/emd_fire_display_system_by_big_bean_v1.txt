@name locomotive_displays/mfds/EMD FIRE Display System by Big Bean V1
@inputs RLCPT:entity Pod:entity [CtlTable DISTRIBUTED_POWER_DATA_BUS]:table [EGPMain EGPSec]:wirelink Battery
@inputs RX_EOTPSI RX_EOTID  FuelLevel Horn Bell LoadShed UnitOverride
@outputs [DISPLAY_CONTROL_BUS DP_DATA]:table RX_EOTBrakePipe RX_EOTMPH EOTDSetID Running DrivenDistMI AlertEmergency BCI IsolatedBrakes EQResSetPressure DefoggerOn ConsistLength RailConditioner MMDrivenDistance MMSpeedChecks:table MMTimeElapsed
#----
#Generic variables
@persist Run BatteryLocal  Units SkipBoot UseAlerter AlerterMaxVolume AlerterResetKey:string MaxSpeedoVelocity SpeedoRedAreaVelocity SpeedoYellowAreaVelocity SetToAmps MaxTE MaxContTE MaxTMCurrent MaxContTMCurrent MaxDynCurrent MaxContDynCurrent FuelTankCap
@persist BrakePanelYeet TimeFormat Timezone TimezoneName:string LOCOMOTIVE_IDENT:table SetupScreenLogo [SetupLogoScale SetupLogoCol]:vector [SetupLogoMat Font_SansSerif Font_Monospace]:string ColorGrading LCDType
@persist [Driver User]:entity [RLCPTW]:wirelink [SYS_COLORS UNIT_DATA SMOOTH_DATA DELTA_DATA]:table MainPage SecPage CanRun OSLoaded OSLoadProgress OSLoading OSLoadSteps OS_TerminalLine OS_TerminalLineCount OS_WindowsXPLoadBarIndex
@persist DrivenDistMI Accel FirmwareVersion:string
@persist Brightness  [CONSIST_MONITOR_DATA DP_RECEIVED_UNITS]:table
@persist SystemDate:table  ConsistEffort ConsistUnitsCapable ConsistUnitsTotal ConsistPowerStat:string Default_MainPage Default_SecondaryPage
#Add-on E2 vars
@persist LowFuel
#RLC vars
@persist EqualRes BrakePipe AirFlow MainRes BrakeCyl  KPH MPH  Reverser Throttle Dynamics TractiveEffort Load WheelSlip Sanding
@persist PCSOpen
#Page speciffic vars
@persist AlerterTime AlerterRunning AlerterBlink AlerterBlinkAngle AlertEmergency DynBrakeWarn UnitAlarm EOTMove  EID1 EID2 EID3 EID4 EID5 EIDStr:string  IL1 IL2 IL3 IL4 IL5 ILStr:string LengthValid
@persist MoreChoicesMain OPControlsPage LengthCounterPage LengthChangePage MeasureLengthFinished MeasuredLength MeasuringLength MeasuredLTooShort CountdownLength CountdownRun
@persist MeasuredMileRun MMTimeElapsed MMSpeedChecks:table MMCheckFailed MMAverageSpeed MMFinished MMDrivenDistance MMSpeedSum
@persist DistributedPowerPage DPOperation_RemoteMode DPOperation_BackIndex DPOperation_RemoteModeIndex DistPower_LocalEnable DistPower_LeadUnitNumber DistPower_FencePower [DistPower_LinkedUnits DistPower_UnitModes DistPower_Control DistPower_PageData DP_REMOTE_MODE_LOOKUP]:table
@persist DP_SetupSelectedDigit [DP_SetupUnitID]:array DP_SetupUnlinkMode DP_RemoteTravelDir
@persist FC_DATA:array MainPagePort MoreChoicesSec
@persist AirBrakePage ABLockout BrakePipeCutin_New MU2AValveCutIn_New EQResSetPressure_New BrakePipeCutin MU2AValveCutIn EQResSetPressure  EOTIDSetup EOTDArmState CommTestResult CommTestRun CommTestFinished EOTDArmed ConsistLength
@persist EOTDSetID RearPres
#Commands & buttons
@persist [KeyCMD]:string IsShifting KeyTimeout  MB1 MB2 MB3 MB4 MB5 MB6 MB7 MB8 SB1 SB2 SB3 SB4 SB5 SB6 SB7 SB8  ForceUpdate_Main ButtonUpdate_Main ForceUpdate_Sec ButtonUpdate_Sec UpdateUnits
@trigger none
FirmwareVersion = "102.11"
#----
#[ Hello there.
This is a recreation of the EMD FIRE locomotive displays by, you guessed it, Big Bean.
It's the ultimate (and definitely not dumbed-down) version of FIRE for your viewing pleasures.

----VERY IMPORTANT STUFF----
This E2 (and some of my other projects) are hosted on this repo: https://github.com/CatComputer/Chessies-Public-E2-Pack/tree/main
Check it out once in a while for updates, ye?

If you have any suggestions or if you need help with something (that's NOT the setup... seriously, if you can't set this up on your own, you have bigger problems my guy), you can find me on
all the common discord servers (OR, NAT and FC&N) under the name 'das_bean'.

------------
Version log:
------------
V:102.11 - Fixed DP not showing any data, because yours truly forgot to copy 5 lines of code over.
--------
V:102.10 - The "holy shit"(tm) update. Rewrote the main framework of the display system and changed the coloring so that it now supports color-grading.
Biggest Change that you care about is that it now has distributed power control pages that work with Chessie's DP system... no need to thank me.
--------
V:102.05 - Fixed all of it (the price you pay for consistency).
--------
V:102.04 - Revamped the loading screen (again), it should be pretty realistic now.
--------
V:102.03 - Fixed the fonts being whack because EGP updated their default font.
--------
V:102.02 - So you know how the config says that you can change the units in-game? That's a feature now. Additionally changed the metric pressure units to kPa from bar (thanks West)
Whoops, finger slipped, added length counter as well. Merry Christmas!
--------
V:102.01 - Overhaul of basically every page, fixed some config stuff, cleaned up the old mess, added new loading screen for your pleasures ("wow you updated V1 no way")
--------
V:101.xx - So old I forgot
--------

Setup:
------
Basic wiring:
1. Slap this E2 somewhere (but DO make sure you've configured the system before you do)
2. Wire EGPMain and EGPSec to the primary and secondary displays, respectively
3. Wire RLCPT to the RLC (wow)
4. Wire Pod to the Pod controller (and make sure it's the POD entity, not "Create New")
5. Wire CtlTable to the control stand controller
6. Wire Battery to your output of choice (this will turn the displays on)

Additional wiring:
* FuelLevel is for displaying the amount of fuel in your unit (US gallons)
* Horn and Bell go to your horn and bell
* LoadShed is just for the indicator, basically pointless
* UnitOverride overrides the currently selected unit type, so that you can control their type from a remote button or whatever
* If you're using distributed power:
    - Wire DISTRIBUTED_POWER_DATA_BUS to the output of the controller
    - Wire DISPLAY_CONTROL_BUS to the controllers respective input


[THIS IS DEPRECATED AND MAY BE REMOVED IN THE FUTURE]
EOTD setup & wiring:
First off, you'll want to use the older titus' EOTD E2 (the one that doesn't work with the wireless HOTD thing).

It's quite straight forward afterwards:
1. Add an output called EOTDID
2. Add this block of code to the bottom of the E2:
    local IDS = toString(Skin1) + toString(Skin2) + toString(Skin3) + toString(Skin4) + toString(Skin5)
    EOTDID = IDS:toNumber()
3. Put a normal wire radio onto the EOTD with at least two values (can be more but they won't be used). Channel can be left at 1 because it'll get overwritten anyway.
4. Next, put a second wire radio into your locomotive with, again, two values

>>EOTD side radio wiring setup:
1. EOTDPsi goes to input 1 on the radio
2. EOTDID goes to input 2 on the radio
3. EOTD's BrakePipe input goes to output 1 on the radio
4. EOTD's MPH input goes to output 2 on the radio

>>Locomotive side radio wiring setup:
1. RX_EOTPSI goes to output 1 on the radio
2. RX_EOTID goes to output 2 on the radio
3. RX_EOTBrakePipe goes to input 1 on the radio
4. RX_EOTMPH goes to input 2 on the radio
]#

if(first()|duped()){
    Run = 0
    
    #-------
    #Config:
    #-------
    Units = 0 #Changes the default units of the system (you can change them any time "in-game" later [0 = Imperial, 1 = Metric]).
    SkipBoot = 1 #Skips the boot sequence (if you're old-school, you'll want to know that this works now).
    UseAlerter = 1 #For those who want to sleep during driving.
    AlerterMaxVolume = 0.25 #Maximum volume of the alerter sound (set to 1 if you're deaf).
    AlerterResetKey = "T" #The key that you have to press to acknowledge that you're not dead.
    MaxSpeedoVelocity = 80 #Sets the maximum velocity in MPH shown on the analog speedometer.
    SpeedoRedAreaVelocity = 73 #Sets where the red area of the speedometer gauge ends.
    SpeedoYellowAreaVelocity = 70 #Sets where the yellow area of the speedo gauge ends.
    SetToAmps = 0 #When this is used, the Tractive Effort indicator will change to traction motor/dynamic brake current instead.
    MaxTE = 240 #Maximum Tractive effort of the locomotive (kLb).
    MaxContTE = 205 #Max continuous tractive effort (If it's the same as MaxTE, set it one below so that MaxTE on the TE bar isn't completely white, same applies for the currents).
    MaxTMCurrent = 2265 #Maximum traction motor current (Important note: Dynamic brake max TE relies on the max TM and DB currents, so make sure those are set up right).
    MaxContTMCurrent = 2264 #Maximum continuous traction motor current.
    MaxDynCurrent = 755 #Maximum dynamic brake current.
    MaxContDynCurrent = 754 #Maximum continuous dynamic brake current.
    FuelTankCap = 5000 #Capacity of the locomotive's fuel tank (US-gal).
    BrakePanelYeet = 0 #YEETs the shit out of the brake panel on the main display (so that you can use it in an SD75I or something).
    TimeFormat = 0 #When 1, the time format will be set to the superior 24 hour format, otherwise it'll use the AM/PM type.
    Timezone = -5 #Sets the time offset from UTC (in hours).
    TimezoneName = "EST" #The name of the timezone you are in.
    SetupScreenLogo = 0 #Creates a hologram for a logo that is sometimes present in the middle of the setup monitor main page.
    SetupLogoScale = vec(0.3, 0.5, 1) #Scales the logo hologram, if your logo doesn't match the size it should be.
    SetupLogoCol = vec(255, 255, 255)
    SetupLogoMat = "" #The material path for the logo texture.
    ColorGrading = 0.6 #Sets how intense the display's color grading is. This can be anything from 0 to 1, where 0 is without effect and 1 is completely fucked.
    LCDType = 1 #Sets the type of LCD. This only alters the color tint of the display. Options: 0 = modern, 1 = retro
    LOCOMOTIVE_IDENT = table(
        "railroad" = "ICG", #Specifies the railroad name that the unit belongs to. This should be abbreviated (so ICG instead of Illinois Central Gulf, for example)
        "number" = 1610 #The locomotive number.
    )
    #-------------#
    #End of config#
    #-------------#
    #I strongly advise you don't look any further below, as you very well might get stage 4 brain cancer in the process
    
    
    #Init:
    #-----
    #Unit data for value unit changing
    UNIT_DATA = table()
    UNIT_DATA["KPH", string] = "km/h"
    UNIT_DATA["km", string] = "km"
    UNIT_DATA["kW", string] = "kW"
    UNIT_DATA["kN", string] = "kN"
    UNIT_DATA["m", string] = "m"
    UNIT_DATA["L", string] = "L"
    UNIT_DATA["C", string] = "C"
    UNIT_DATA["kPa", string] = "kPa"
    UNIT_DATA["Nm", string] = "Nm"
    UNIT_DATA["hPa", string] = "hPa"
    UNIT_DATA["kg/m3", string] = "kg/m3"
    UNIT_DATA["hL/min", string] = "hL/min"
    #--
    UNIT_DATA["MPH", string] = "MPH"
    UNIT_DATA["mi", string] = "mi"
    UNIT_DATA["hp", string] = "hp"
    UNIT_DATA["kLb", string] = "kLb"
    UNIT_DATA["ft", string] = "ft"
    UNIT_DATA["Gal", string] = "Gal"
    UNIT_DATA["F", string] = "F"
    UNIT_DATA["PSI", string] = "PSI"
    UNIT_DATA["ft-lbf", string] = "ft-lbf"
    UNIT_DATA["inHg", string] = "inHg"
    UNIT_DATA["lbs/ft3", string] = "lbs/ft3"
    UNIT_DATA["CFM", string] = "CFM"
    
    #Multipliers
    UNIT_DATA["M_km", number] = 1.609344
    UNIT_DATA["M_kW", number] = 0.746
    UNIT_DATA["M_N", number] = 4.4482216
    UNIT_DATA["M_m", number] = 0.3048
    UNIT_DATA["M_L", number] = 3.785412
    UNIT_DATA["M_C", number] = 1.8
    UNIT_DATA["M_kPa", number] = 6.89475729
    UNIT_DATA["M_Nm", number] = 1.3558179483
    UNIT_DATA["M_hPa", number] = 3.863886
    UNIT_DATA["M_kg/m3", number] = 16.018463
    UNIT_DATA["M_bar", number] = 14.5037738
    UNIT_DATA["M_psi", number] = 0.0689475728034
    UNIT_DATA["M_L/min", number] = 28.3168466
    UNIT_DATA["M_hL/min", number] = 0.283168466
    UNIT_DATA["M_L/sec", number] = 0.471947443
    UNIT_DATA["M_ft-lbf", number] = 0.7376
    
    #Var init
    MainPage = 0
    Default_MainPage = 0
    SecPage = 0
    Default_SecondaryPage = 0
    MainPagePort = 0
    MoreChoicesMain = 0
    MoreChoicesSec = 0
    AirBrakePage = 0
    OPControlsPage = 0
    LengthCounterPage = 0
    LengthChangePage = 0
    DistributedPowerPage = 0
    DPOperation_RemoteMode = DPOperation_BackIndex = 0
    DPOperation_RemoteModeIndex = 1
    MeasureLengthFinished = 0
    LocoMonitorPage = 0
    
    OSLoaded = OSLoading = OSLoadProgress = 0
    MB1 = MB2 = MB3 = MB4 = MB5 = MB6 = MB7 = MB8 = 0
    SB1 = SB2 = SB3 = SB4 = SB5 = SB6 = SB7 = SB8 = 0
    KeyTimeout = 0
    ForceUpdate_Main = ButtonUpdate_Main = 0
    ForceUpdate_Sec = ButtonUpdate_Sec = 0
    UpdateUnits = 0
    User = noentity()
    SystemDate = table()
    TractiveEffort = 0
    
    #Display color constants
    Running = 0
    SYS_COLORS = table(
        "background" = vec(8,12,22),
        "white" = vec(240),
        "offWhite" = vec(40,40,40),
        "onWhite" = vec(243,242,234),
        "lightBlue" = vec(110,210,235),
        "offBlue" = vec(15,50,55),
        "darkBlue" = vec(15, 30, 100),
        "offDarkBlue" = vec(13,18,55),
        "onDarkBlue" = vec(30,38,160),
        "lightPurple" = vec(220, 100, 245),
        "offPurple" = vec(44, 19, 50),
        "lightGreen" = vec(90,220,75),
        "offGreen" = vec(21,58,12),
        "lightRed" = vec(250,100,60),
        "onRed" = vec(220,30,30),
        "offRed" = vec(52,15,15),
        "onYellow" = vec(230,225,110),
        "offYellow" = vec(48,45,15),
        "lightGray" = vec(180),
        "vLightGreen" = vec(185, 240, 165),
        "vLightYellow" = vec(240, 235, 190),
        "darkerGreen" = vec(70, 210, 40),
        "darkerYellow" = vec(240, 210, 40),
        
        "terminal_gray" = vec(200),
        "windows_orange" = vec(225, 115, 56),
        "windows_gray" = vec(130),
        "windows_blue" = vec(71,90,200),
        "energy_star_yellow" = vec(250, 250, 0),
        "award_blue" = vec(89,93,253)
    )
    
    Brightness = 1
    EQResSetPressure = EQResSetPressure_New = 90
    BrakePipeCutin = BrakePipeCutin_New = 0
    MU2AValveCutIn = MU2AValveCutIn_New = 0
    ABLockout = 0
    MeasuringLength = 0
    MeasuredLTooShort = 0
    MeasuredLength = CountdownLength = 0
    MMFinished = MMTimeElapsed = 0
    MMCheckFailed = 0
    MMAverageSpeed = 0
    MMSpeedChecks = table()
    MMDrivenDistance = 0
    CountdownRun = 0
    AlerterTime = 0
    AlerterRunning = 0
    AlerterBlink = 0
    AlerterBlinkAngle = 0
    AlertEmergency = 0
    SpeedoRedAreaVelocity = min(SpeedoRedAreaVelocity, MaxSpeedoVelocity - 2)
    SpeedoYellowAreaVelocity = min(SpeedoYellowAreaVelocity, SpeedoRedAreaVelocity - 2)
    
    EOTDSetID = 0
    EOTDArmState = EOTDArmed = 0
    CommTestFinished = CommTestResult = CommTestRun = 0
    CS_CCSMode = 0
    CS_PenaltyLength = 0
    CS_Movement = 0
    CS_Operative = 0
    CS_PenaltyElapsed = 0
    CS_CCSState = 0
    
    EIDStr = ""
    EID1 = EID2 = EID3 = EID4 = EID5 = 0
    ConsistLength = 0
    
    #Misc vars that just have to be initialized, because E2 (yes I know it's proper workflow, but come on, I don't need 2000 lines of code just for initialization... right?)
    Dynamics = Notch = 0
    IL1 = IL2 = IL3 = IL4 = IL5 = 0
    EOTIDSetup = 0
    MeasuredMileRun = 0
    EqualRes = MainRes = BrakeCyl = BrakePipe = AirFlow = RearPres = 0
    Accel = 0
    IsLead = 0
    TMCurrent = DynaBrakeNotch = 0
    Reverser = Throttle = 0
    KPH = MPH = 0
    WheelSlip = PCSOpen = DynBrakeWarn = LoadShed = UnitAlarm = EOTMove = 0
    Sanding = LowFuel = 0
    RailConditioner = 0
    DefoggerOn = 0
    Bell = Horn = 0
    DrivenDistMI = 0
    FuelLevel = 0
    
    ConsistUnitsCapable = ConsistUnitsTotal = 0
    ConsistEffort = 0
    Font_SansSerif = "Arial"
    Font_Monospace = "Courier New"
    
    DistPower_Control = table()
    DistPower_LinkedUnits = table()
    DistPower_UnitModes = table(1, 1, 1)
    DistPower_PageData = table()
    DP_SetupSelectedDigit = 1
    DP_SetupUnlinkMode = 0
    DP_SetupUnitID = array(0, 0, 0, 0)
    DistPower_LocalEnable = 0
    DP_RemoteTravelDir = 0
    DistPower_LeadUnitNumber = 0
    DistPower_FencePower = 0
    DP_REMOTE_MODE_LOOKUP = table(
        0 = "NORM",
        1 = "IDLE",
        2 = "S/O",
        3 = "ISOL"
    )
    
    
    DISPLAY_CONTROL_BUS = table()
    
    SMOOTH_DATA = table()
    DELTA_DATA = table()
    DP_RECEIVED_UNITS = table()
    CONSIST_MONITOR_DATA = table()
    
    #EGP config set
    EGPMain:egpClear()
    EGPSec:egpClear()
    
    #You best believe this shit is immersive...
    setName("Immersive FIRE by Big Bean\nFirmware Version: " + FirmwareVersion + "\nWelcome to hell")
}



#Functions:
#----------
#Smoothie maker (smooths out values)
function number smooth(Var:number, SmoothAmount:number, TID:string, DefaultVal:number){
    if(!SMOOTH_DATA:exists(TID)){
        SMOOTH_DATA[TID,number] = DefaultVal
    }
    local Smooth = SMOOTH_DATA[TID,number]
    Smooth += (Var - Smooth) / SmoothAmount
    SMOOTH_DATA[TID,number] = Smooth
    return Smooth
}

#Returns the difference between the specified variable since the last time this function has been called.
function number tickDiff(ID:string, Var:number){
    if(!DELTA_DATA:exists(ID)){
        DELTA_DATA[ID, number] = Var
    }
    
    local Delta = (Var - DELTA_DATA[ID, number])
    DELTA_DATA[ID, number] = Var
    return Delta
}


#Takes in a color vector and tints it by applying a factor to every channel (using the TintFactor vector).
function vector colorTint(Color:vector, TintFactor:vector, MixFactor:number){
    local TintedColor = vec(Color:x() * TintFactor:x(), Color:y() * TintFactor:y(), Color:z() * TintFactor:z())
    return clamp((1 - MixFactor) * Color + MixFactor * TintedColor, vec(), vec(255))
}

#Takes in a color and desaturates it according to the factor.
function vector desaturate(Color:vector, Factor:number){
    Factor = clamp(Factor, 0, 1)
    local GrayPoint = vec((Color:x() + Color:y() + Color:z()) / 3)
    return clamp((1 - Factor) * Color + Factor * GrayPoint, vec(), vec(255))
}


#Forces a display update when the specific variable changes its state.
function void updateScreenOnVarChange(ID:string, SecondaryDisplay:number, Var:number){
    if(!tickDiff("changed_" + ID, Var)){
        return
    }
    
    if(SecondaryDisplay){
        ForceUpdate_Sec = 1
        return
    }
    ForceUpdate_Main = 1
}

function void entity:soundPlaySuper(ID:string, Duration:number, Path:string, Volume:number, Pitch:number){
    This:soundPlay(ID, Duration, Path)
    soundVolume(ID, Volume)
    soundPitch(ID, Pitch)
}

function number throt2notch(Throt:number, MinThrot:number, MaxThrot:number, MaxNotch:number){
    local Out = 0
    if(inrange(Throt, MinThrot, MaxThrot)){
        local In = round(Throt)
        Out = ((In - MinThrot) / (MaxThrot - MinThrot)) * MaxNotch
    }elseif(Throt > MaxThrot){
        Out = MaxNotch
    }
    return Out
}

#Formats a floating point variable with a configurable number of decimal digits based on its value.
function string decForm(Var:number, MinThreshold:number, DecCountBel:number, DecCountAbove:number){
    local StrOut = ""
    local DCHighClamp = max(DecCountAbove, 0)
    local DCLowClamp = max(DecCountBel, 0)
    
    if(Var >= MinThreshold){
        StrOut = format("%." + DCHighClamp + "f", Var)
    }elseif(Var < MinThreshold){
        StrOut = format("%." + DCLowClamp + "f", Var)
    }
    
    return StrOut
}


#Returns a table containing information about the current date. Allows you to change the timezone by offsetting the UTC time by a specific amount of hours.
function table getTimezoneEpochDate(UTC_OffsetHours:number){
    return dateUTC(time() + (UTC_OffsetHours + date()["isdst",number])*3600) #provided by Chessie Computer
}

function string monthNum2String(Month:number){
    local MonthOut = select(Month, "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC")
    return MonthOut
}

#Returns a formatted representation of the current date, commonly used across FIRE.
function string getDateString(Date:table){
    return format("%s %01d, %04d", monthNum2String(Date["month", number]), Date["day", number], Date["year", number])
}
function string getDateString(Day:number, Month:number, Year:number){
    return format("%s %01d, %04d", monthNum2String(Month), Day, Year)
}

#Returns a time string formatted to fit FIRE's common time display format.
function string getTimeString(Date:table, Use24hour:number){
    if(Use24hour){
        return format("%02d:%02d:%02d %s", Date["hour", number], Date["min", number], Date["sec", number], TimezoneName)
    }
    
    local TimeSuffix = (inrange(Date["hour", number], 0, 11) ? "AM" : "PM")
    local HoursFuckedUp = Date["hour", number]
    if(HoursFuckedUp > 12){ #This system is fucking retarded and this code block proves it.
        HoursFuckedUp -= 12
    }elseif(HoursFuckedUp == 0){
        HoursFuckedUp = 12
    }
    
    return format("%02d:%02d %s %s", HoursFuckedUp, Date["min", number], TimeSuffix, TimezoneName)
}

function string boolToText(State:number, Type:number){
    return (State ? (Type ? "TRUE" : "ON") : (Type ? "FALSE" : "OFF"))
}

function number shouldLoadLowerMainContent(){
    local AllContent = (MainPage == 0 | #Default page
        MainPage == 1 | #Consist monitor
        MainPage == 3 | #Operator controls
        MainPage == 4 | #Length counter
        (MainPage == 6 & LocoMonitorPage == 0)) #Locomotive monitor
    
    local RemoteSessionContent = (MainPage == 5)
    return (RemoteSessionContent ? 2 : AllContent)
}

#Returns the system color with the specified ID
function vector color(ID:string){
    if(!SYS_COLORS:exists(ID)){
        return vec(255, 0, 200)
    }
    return SYS_COLORS[ID, vector]
}

function number incrementNumber(Var:number, IncrementUp:number, IncrementDown:number, MinVal:number, MaxVal:number){
    local Out = Var
    Out += IncrementUp - IncrementDown
    
    if(Out > MaxVal){
        return Out - (MaxVal - MinVal + 1)
    }
    if(Out < MinVal){
        return Out + (MaxVal - MinVal + 1)
    }
    
    return Out
}



#--EGP helpers:

#A box with a top portion of it cut out for a label
function void wirelink:egpBoxLabeled(Index:number, Pos:vector2, Size:vector2, Label:string){
    local E = This
    local LabLenPix = (Label:length() * (10 + max(6 - Label:length(),0) / 0.5) + Label:length()) / 2
    
    E:egpBoxOutline(Index, vec2((Pos:x() + Size:x() / 2), (Pos:y() + Size:y() / 2)), Size)
    E:egpBox(Index + 1, vec2(Pos:x() + (Size:x() / 2), Pos:y()), vec2(LabLenPix, 8))
    E:egpColor(Index + 1, color("background"))
    
    E:egpTextLayout(Index + 2, Label, vec2(Pos:x() + (Size:x() / 2), Pos:y()), vec2(Size:x(), 12))
    E:egpFont(Index + 2, "Arial", 12)
    E:egpAlign(Index + 2, 1, 1)
    E:egpColor(Index + 2, color("white"))
}

#Creates a button... what do you think is it for?
function void wirelink:egpButton(Index:number, Pos:vector2, Size:vector2, Label:string, Color:vector){
    local E = This
    
    E:egpBox(Index, Pos, Size)
    E:egpColor(Index, Color)
    
    switch(Label){
        default, #Default button implementation - places text with the value from Label in the center of it
            E:egpTextLayout(Index + 1, Label, Pos, Size)
            E:egpColor(Index + 1, color("background"))
            E:egpFont(Index + 1, Font_SansSerif + " Bold", 12)
            E:egpAlign(Index + 1, 1, 1)
            
            break
        case "arrow_up", #An arrow pointing upward (used on pages with navigation)
            E:egpPolyOutline(Index + 1, array(Pos + vec2(-1, 6), Pos + vec2(1, 6), Pos + vec2(1, -4), Pos + vec2(4, -4),  Pos + vec2(0, -8),  Pos + vec2(-4, -4), Pos + vec2(-1, -4)))
            E:egpColor(Index + 1, color("background"))
            
            break
        case "arrow_down", #An arrow pointing downward
            E:egpPolyOutline(Index + 1, array(Pos + vec2(-1, -6), Pos + vec2(1, -6), Pos + vec2(1, 4), Pos + vec2(4, 4),  Pos + vec2(0, 8),  Pos + vec2(-4, 4), Pos + vec2(-1, 4)))
            E:egpColor(Index + 1, color("background"))
            
            break
        case "arrow_left", #An arrow pointing left
            E:egpPolyOutline(Index + 1, array(Pos + vec2(3, -1), Pos + vec2(3, 1), Pos + vec2(-4, 1), Pos + vec2(-4, 4),  Pos + vec2(-8, 0),  Pos + vec2(-4, -4), Pos + vec2(-4, -1)))
            E:egpColor(Index + 1, color("background"))
            
            break
        case "arrow_right", #An arrow pointing right
            E:egpPolyOutline(Index + 1, array(Pos + vec2(-3, -1), Pos + vec2(-3, 1), Pos + vec2(4, 1), Pos + vec2(4, 4),  Pos + vec2(8, 0),  Pos + vec2(4, -4), Pos + vec2(4, -1)))
            E:egpColor(Index + 1, color("background"))
            
            break
    }
    
    E:egpBoxOutline(Index + 2, Pos, Size)
}

#Creates all the consist monitor information fields.
function void wirelink:egpCreateConsistMonitorField(Index:number, Position:vector2){
    local E = This
    #RR name and number
    E:egpText(Index, "", Position)
    E:egpFont(Index, Font_SansSerif, 16)
    E:egpAlign(Index, 0, 1)
    E:egpColor(Index, color("lightGreen"))
    
    #Unit mode
    E:egpText(Index + 1, "", vec2(Position:x() + 93, Position:y()))
    E:egpFont(Index + 1, Font_SansSerif, 16)
    E:egpAlign(Index + 1, 1, 1)
    E:egpColor(Index + 1, color("lightGreen"))
    
    #Unit tractive effort
    E:egpText(Index + 2, "", vec2(Position:x() + 133, Position:y()))
    E:egpFont(Index + 2, Font_SansSerif, 16)
    E:egpAlign(Index + 2, 0, 1)
    E:egpColor(Index + 2, color("lightGreen"))
    
    #Tractive effort unit
    E:egpText(Index + 3, "", vec2(Position:x() + 197, Position:y()))
    E:egpFont(Index + 3, Font_SansSerif, 16)
    E:egpAlign(Index + 3, 1, 1)
    E:egpColor(Index + 3, color("lightGreen"))
    
    #Unit status
    E:egpText(Index + 4, "", vec2(Position:x() + 245, Position:y()))
    E:egpFont(Index + 4, Font_SansSerif, 16)
    E:egpAlign(Index + 4, 1, 1)
    E:egpColor(Index + 4, color("lightGreen"))
}

#Updates the consist monitor fields.
function void wirelink:egpUpdateConsistMonitorField(Index:number, ReadIndex:number, DATA:table, TEUnitMult:number, TEUnits:string){
    local E = This
    if(DATA[ReadIndex, table][1, string]:length() >= 2){
        E:egpSetText(Index, DATA[ReadIndex, table][1, string])
        E:egpSetText(Index + 1, DATA[ReadIndex, table][2, string])
        E:egpSetText(Index + 2, format("%.0f", DATA[ReadIndex, table][3, number] * TEUnitMult * 0.001))
        E:egpSetText(Index + 3, TEUnits)
        E:egpSetText(Index + 4, "--")
    }else{ #Wiping the text
        for(I = 0, 4){
            E:egpSetText(Index + I, "")
        }
    }
}


#Creates a box to display a single crew message. Commonly seen on the bottom of some pages.
function void wirelink:egpCreateSingleMessageBox(Index:number, Pos:vector2, BorderColor:vector, MESSAGE_CONTENT:table){
    local O = Index
    if(!MESSAGE_CONTENT:count()){
        This:egpBoxOutline(O, Pos, vec2(512, 40))
        This:egpSize(O, 2)
        This:egpColor(O, BorderColor)
        
        O++
        This:egpTextLayout(O, "", Pos - vec2(0, 8), vec2(512, 16))
        This:egpFont(O, Font_SansSerif, 16)
        This:egpAlign(O, 1, 0)
        
        O++
        This:egpTextLayout(O, "", Pos + vec2(0, 8), vec2(512, 16))
        This:egpFont(O, Font_SansSerif, 16)
        This:egpAlign(O, 1, 0)
    }else{
        local MessageRows = MESSAGE_CONTENT[2, string]:explode("//")

        O++
        This:egpSetText(O, MessageRows[1, string])
        O++
        This:egpSetText(O, MessageRows[2, string])
    }
}


#Creates a special window for rendering remote session content.
function void wirelink:egpCreateRemoteSessionWindow(Index:number, Position:vector2, Size:vector2, Label:string, SubLabel:string){
    local O = Index
    local SizeHalf = Size / 2
    
    This:egpBoxOutline(O, Position + SizeHalf, Size)
    This:egpSize(O, 2)
    This:egpColor(O, color("white"))
    
    O++
    This:egpBox(O, Position + vec2(SizeHalf:x(), 10), vec2(Size:x() - 4, 16))
    This:egpColor(O, color("lightBlue"))
    
    O++
    This:egpText(O, Label, Position + vec2(SizeHalf:x(), 1))
    This:egpFont(O, Font_Monospace, 18)
    This:egpAlign(O, 1, 0)
    This:egpColor(O, vec(0))
    
    O++
    This:egpText(O, SubLabel, Position + vec2(Size:x() - 4, 1))
    This:egpFont(O, Font_Monospace, 18)
    This:egpAlign(O, 2, 0)
    This:egpColor(O, vec(0))
}

#Creates a unit ID selector with 4 digits. This is used on some of the distributed power pages.
function void wirelink:egpDPUnitIDSelector(Index:number, Pos:vector2, Label:string, DigitSelected:number, DisplayNumber:string){
    local O = Index
    local XOffset = Label:length() * 7
    DigitSelected = max(DigitSelected, 1)
    
    #Initialize
    if(!This:egpHasObject(Index) | This:egpPos(Index + 2) != (Pos + vec2(XOffset, 0))){
        This:egpText(O, Label, Pos)
        This:egpFont(O, Font_Monospace, 16)
        This:egpAlign(O, 0, 0)
        This:egpColor(O, color("lightBlue"))
        
        O++
        This:egpBox(O, Pos + vec2(4 + XOffset + (DigitSelected - 1)*9, 8), vec2(7, 14))
        This:egpColor(O, color("lightBlue"))
            
        for(I = 1, 4){
            O++
            This:egpText(O, DisplayNumber[I], Pos + vec2((I-1)*9 + XOffset, 0))
            This:egpFont(O, Font_Monospace, 16)
            This:egpAlign(O, 0, 0)
            This:egpColor(O, (I == DigitSelected ? vec(0) : color("white")))
        }
        
        return
    }
    
    #Update
    This:egpSetText(O, Label)
    
    O++
    This:egpPos(O, Pos + vec2(4 + XOffset + (DigitSelected - 1)*9, 8))
    
    for(I = 1, 4){
        O++
        This:egpSetText(O, DisplayNumber[I])
        This:egpColor(O, (I == DigitSelected ? vec(0) : color("white")))
    }
}

#Creates/updates the distributed power locomotive readout fields.
#NOTE: supply the entire DP_BUS table when using local unit (UnitID == -1), otherwise supply "received_units" table!
function void wirelink:egpLoadDistPowerUnitReadout(Index:number, Pos:vector2, UnitID:number, DATA:table, UnitIndex:number){
    local IsLocalUnit = (UnitID == -1)
    local CanLoad = UnitID | IsLocalUnit
    local O = Index
    
    if(!DistPower_PageData:exists(UnitIndex) & !IsLocalUnit){
        DistPower_PageData[UnitIndex, table] = table(
            "last_data" = table()
        )
    }
    
    #Loading the objects
    if(!This:egpHasObject(O)){
        for(I = 1, 9){
            local Index = (I-1) + O
                        
            This:egpText(Index, "--", Pos + vec2(0, (I-1) * 21))
            This:egpAlign(Index, 1, 0)
            This:egpFont(Index, Font_SansSerif, 18)
            This:egpColor(Index, color(IsLocalUnit | CanLoad ? "lightGreen" : "white"))
            This:egpAlpha(Index, CanLoad ? 255 : 0)
        }
        
        O += 9
        This:egpText(O, "A-?", Pos + vec2(0, -30))
        This:egpAlign(O, 1, 0)
        This:egpFont(O, Font_SansSerif, 18)
        This:egpColor(O, color("white"))
        This:egpAlpha(O, CanLoad ? 255 : 0)
        
        return
    }
    
    
    #Hiding the objects if the unit data doesn't exit
    if((This:egpAlpha(O) > 0) & !CanLoad){
        for(I = 1, 10){
            local Index = (I-1) + O
            This:egpAlpha(Index, 0)
        }
    }
    if(!CanLoad){ return }
    
    
    #Shows previously hidden objects
    if(!This:egpAlpha(O) & CanLoad){
        for(I = 1, 10){
            local Index = (I-1) + O
            This:egpAlpha(Index, 255)
            This:egpColor(Index, ((I == 3 & !IsLocalUnit) | I == 10 ? color("white") : color("lightGreen")))
        }
    }
    
    
    #The actual updating part#
    #Local unit (reads different data and doesn't do fancy shit)
    #----------
    if(UnitID == -1){
        local MainData = DATA["local_unit", table]
        if(!DATA:exists("local_unit")){
            MainData = table("throttle" = "--", "load" = "--", "remote" = "--")
        }
        
        This:egpSetText(O, MainData["throttle", string]) #THROTTLE
        This:egpSetText(O + 1, MainData["load", string]) #LOAD
        This:egpSetText(O + 2, format("%d:%d %.0fK", ConsistUnitsCapable, ConsistUnitsTotal, ConsistEffort)) #CONSIST
        This:egpSetText(O + 3, format("%.0f", MainData["brake_pipe", number])) #BRAKE PIPE
        This:egpSetText(O + 4, format("%.0f", MainData["flow", number])) #FLOW
        
        This:egpSetText(O + 5, MainData["remote", string]) #REMOTE
        This:egpSetText(O + 6, format("%.0f", MainData["equalizing", number])) #EQUAL
        This:egpSetText(O + 7, format("%.0f", MainData["cylinder", number])) #CYL
        This:egpSetText(O + 8, format("%.0f", MainData["main_res", number])) #MAIN RES
        
        This:egpSetText(O + 9, format("%s-%04d", "A", LOCOMOTIVE_IDENT["number", number])) #Unit ID
        
        return
    }
    
    
    #Remote unit
    #-----------
    local SessionData = DistPower_PageData[UnitIndex, table]
    local RemoteEpoch = DATA[UnitID, table]["time_sent", number]
    local LastPacketSent = abs(time() - RemoteEpoch)
    local CommError = (LastPacketSent >= 5 ? 2 : (LastPacketSent >= 2 ? 1 : 0))
    
    #Communication error handling
    if(!CommError){
        SessionData["last_data", table] = DATA[UnitID, table]
    }elseif(CommError == 2){
        SessionData["last_data", table] = table("throttle" = "--", "remote" = "COMM", "unit_alarm" = 1)
    }
    local RemoteData = (!CommError ? DATA[UnitID, table] : SessionData["last_data", table])
    local UnitRemoteMode = (!CommError ? RemoteData["remote", string] : "COMM")
    
    local TextFields = array(
        RemoteData["throttle", string], #THROTTLE
        RemoteData["load", string], #LOAD
        "N/A",
        format("%.0f", RemoteData["brake_pipe", number]), #BRAKE PIPE
        format("%.0f", RemoteData["flow", number]), #FLOW
        
        (DPOperation_RemoteMode ? DP_REMOTE_MODE_LOOKUP[DistPower_UnitModes[UnitIndex, number], string] : UnitRemoteMode), #REMOTE
        format("%.0f", RemoteData["equalizing", number]), #EQUAL
        format("%.0f", RemoteData["cylinder", number]), #CYL
        format("%.0f", RemoteData["main_res", number]) #MAIN RES
    )
    
    for(I = 1, 9){
        local Obj = (I-1) + O
        
        This:egpSetText(Obj, TextFields[I, string])
        if(I == 6){
            This:egpColor(Obj, color(select(CommError + 1, "lightGreen", "onYellow", "lightRed")))
        }
    }
    This:egpSetText(O + 9, format("%s-%04d", select(UnitIndex, "B", "C", "D"), UnitID)) #Unit ID
}


#This creates a warning indicator - a colored box with text in it.
function number wirelink:egpCreateWarningIndicator(StartIndex:number, Pos:vector2, Size:vector2, Text:string, BackgroundColor:vector, TextPadding:number){
    local O = StartIndex
    
    This:egpBox(O, Pos, Size)
    This:egpColor(O, BackgroundColor)
    
    O++
    This:egpTextLayout(O, Text, Pos, Size - vec2(0, TextPadding))
    This:egpAlign(O, 1, (TextPadding > 0 ? 0 : 1))
    This:egpFont(O, Font_SansSerif, 14)
    This:egpColor(O, vec())
    
    return O + 1
}

#Creates a box with the name of the page displayed inside.
function void wirelink:egpPageLabelBox(Index:number, Pos:vector2, Text:string){
    local E = This
    
    E:egpBox(Index, Pos, vec2(506, 16))
    E:egpColor(Index, color("darkBlue"))
    
    E:egpBoxOutline(Index + 1, Pos, vec2(508, 20))
    E:egpSize(Index + 1, 2)
    E:egpColor(Index + 1, color("white"))
    
    E:egpTextLayout(Index + 2, Text, vec2(256, Pos:y()), vec2(512, 16))
    E:egpFont(Index + 2, Font_SansSerif, 16)
    E:egpAlign(Index + 2, 1, 1)
    E:egpColor(Index + 1, color("white"))
}


#Returns a different color based on if the supplied state is true or not.
function vector switchColor(State:number, OffColor:vector, OnColor:vector){
    if(State){ return OnColor }
    return OffColor
}

function vector switchColor(State:number, OffColor:string, OnColor:string){
    return switchColor(State, color(OffColor), color(OnColor))
}

#Takes the number of seconds and returns an HH:MM:SS time format.
function string formatTime(Seconds:number){
    local RoundedSeconds = Seconds % 60
    local Minutes = floor(Seconds / 60, 0)
    local Hours = floor(Seconds / 3600, 0)
    return format("%02d:%02d:%02d", Hours, Minutes, RoundedSeconds)
}

#Same as the above, but the box moves horizontally instead of vertically.
function void wirelink:egpHoriSelectBar(TextIndex:number, TextCount:number, IndexSkipMult:number, BoxIndex:number, BoxPosMult:number, ScrollPos:number, BoxStartPos:vector2, BoxScale:vector2, TextVisibleColor:vector){
    local E = This
    for(I = 1, TextCount){
        E:egpColor((I - 1) * IndexSkipMult + TextIndex, switchColor(ScrollPos == (I - 1), TextVisibleColor, color("background")))
    }
    if(!E:egpHasObject(BoxIndex)){
        E:egpBox(BoxIndex, vec2(BoxStartPos:x() + (ScrollPos * BoxPosMult), BoxStartPos:y()), BoxScale)
    }else{
        E:egpPos(BoxIndex, vec2(BoxStartPos:x() + (ScrollPos * BoxPosMult), BoxStartPos:y()))
        E:egpSize(BoxIndex, BoxScale)
    }
}



#MARK: The main functions

#LOADING SCREEN SYSTEM
if(first()|duped()){
    OSLoadSteps = 400
    OSLoadProgress = 0
    OS_TerminalLine = 1
    OS_TerminalLineCount = 26
    OS_WindowsXPLoadBarIndex = 0
    #DISCLAIMER: These statements do not reflect the beliefs of the author in any way. They are for amusement and entertainment purposes only.
    #Taking these seriously may result in symptoms not limited to: "wanting to install twitter", "fighting for the social cause",
    #"putting pronouns into your online profile(s)", "believing in astrology", "wishing death upon the author" and "the need for new diapers".
    FC_DATA = array(
        "EMD is going under in favor of GE due to their price cuts.\\We need to do something.",
        "We keep pushing these shitty products out and we wonder\\why the company is going under.",
        "They aren't even trying to hide it anymore. There must be\\something we can do.",
        "They're pushing eco bullshit for what? The destruction of our jobs?",
        "How many times have you seen a GE turbo explode?\\Let that be an indication of the quality status quo.",
        "They just fired somebody for voicing their opinion!\\This has to be stopped.",
        "The company continues to push safety equipment and guidelines that\\prevent us from doing our work.",
        "Power grids are crashing all over the place,\\but the power they transmit is green, so it's fine.",
        "Our jobs are full of people unqualified for their position\\and we wonder why quality is going to shit."
    )
    
    
    #Color grading
    local DisplayTint = select(LCDType+1, vec(1, 1.02, 1.03), vec(1.025, 1.05, 0.9))
    foreach(Key:string,SystemColor:vector = SYS_COLORS){
        SYS_COLORS[Key, vector] = colorTint(desaturate(SystemColor, (LCDType ? 0.2 : 0)), DisplayTint, ColorGrading)
    }
}



#Yeah I rewrote this for the 3rd time because it sucked.

#Creates an array of horizontally aligned text objects that simulate a terminal window. If ShowBoot is 1, shows the "Starting Applications" screen instead.
function void wirelink:bootupScreenLoad(ShowBoot:number){
    local E = This
    
    if(ShowBoot){
        for(I = 1, OS_TerminalLineCount){
            E:egpText(I, "", vec2(4, 60 + (I-1) * 16)) #AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz1234567890
            E:egpFont(I, "Cascadia Mono", 16)
            E:egpAlign(I, 0, 0)
            E:egpColor(I, color("terminal_gray"))
        }
        
    }else{
        #"Starting Applications" box
        local O = 1
        E:egpBox(O, vec2(256, 256), vec2(256, 150))
        E:egpColor(O, color("white"))
        
        O = 2
        E:egpText(O, "Starting Applications...", vec2(256, 256))
        E:egpFont(O, Font_SansSerif, 20)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, vec(0))
        
        #Firmware version indicator
        O = 3
        E:egpText(O, format("Firmware ver.: %s", FirmwareVersion), vec2(5, 507))
        E:egpFont(O, Font_SansSerif, 18)
        E:egpAlign(O, 0, 2)
        E:egpColor(O, color("white"))
    }
}

#Clears all terminal text objects. If AdditionalIndexClear is set to anything other than 0, clears EGP objects with indeces starting at 30 up to this value.
function void wirelink:egpClearTerminal(AdditionalIndexClear:number){
    for(I = 1, OS_TerminalLineCount){
        This:egpSetText(I, " ")
    }
    OS_TerminalLine = 1
    
    if(This:egpHasObject(30) & AdditionalIndexClear){
        for(I = 30, max(AdditionalIndexClear, 30)){
            if(!This:egpHasObject(I)){ break }
            This:egpRemove(I)
        }
    }
}

#Writes a single line of text to the terminal at the current cursor position. If Offset is not 0, the cursor is moved by that value before writing. Automatically advances the cursor position when done writing.
function void wirelink:egpWriteTerminal(Text:string, Offset:number){
    OS_TerminalLine += Offset
    This:egpSetText(OS_TerminalLine, Text)
    OS_TerminalLine++
}

#Shorthand for writing a line with no cursor offset.
function void wirelink:egpWriteTerminal(Text:string){
    This:egpWriteTerminal(Text, 0)
}

#Writes to the terminal at the specified line.
function void wirelink:egpWriteTerminalAbs(Text:string, Line:number){
    This:egpSetText(Line, Text)
}


#Creates the windows XP loading screen layout
function number wirelink:egpCreateWindowsXPLoader(FirstIndex:number){
    local E = This
    local O = FirstIndex
    local MainFont = "Franklin Gothic Medium Cond"
    local SecFont = "Franklin Gothic Book"
    local UniC_Registerred = toUnicodeChar(174)
    local UniC_Trademark = toUnicodeChar(8482)
    local TextWhite = color("white")
    local TextOrange = color("windows_orange")
    local Gray = color("windows_gray")
    local LoadingBar = color("windows_blue")
    
    #Windows XP logo
    E:egpBox(O, vec2(290, 170), vec2(100, 120))
    E:egpMaterial(O, "models/res/egp/windows_xp_logo.png")
    
    O++
    E:egpText(O, "Windows", vec2(256, 236))
    E:egpFont(O, MainFont, 54)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 1, 1)
    O++
    E:egpText(O, "xp", vec2(355, 224))
    E:egpFont(O, SecFont, 42)
    E:egpColor(O, TextOrange)
    E:egpAlign(O, 1, 1)
    
    O++
    E:egpText(O, "Microsoft", vec2(175, 216))
    E:egpFont(O, SecFont, 12)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 0, 1)
    
    O++
    E:egpText(O, "Professional", vec2(181, 269))
    E:egpFont(O, SecFont, 36)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 0, 1)
    
    
    O++
    E:egpText(O, UniC_Registerred, vec2(224, 212)) #Microsoft
    E:egpFont(O, SecFont, 10)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 1, 1)
    O++
    E:egpText(O, UniC_Registerred, vec2(337, 227)) #Windows
    E:egpFont(O, SecFont, 10)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 1, 1)
    
    O++
    E:egpText(O, UniC_Trademark, vec2(326, 212)) #Windows
    E:egpFont(O, SecFont, 10)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 1, 1)
    
    
    O++
    E:egpText(O, format("Copyright %s Microsoft Corporation", toUnicodeChar(169)), vec2(2, 510))
    E:egpFont(O, SecFont, 14)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 0, 2)
    O++
    E:egpText(O, format("Microsoft", toUnicodeChar(169)), vec2(510, 510))
    E:egpFont(O, MainFont, 15)
    E:egpColor(O, TextWhite)
    E:egpAlign(O, 2, 2)
    
    
    #Loading bar
    O++
    local BarIndex = O
    E:egpBox(O, vec2(177, 370), vec2(5, 10)) #Left-most hidden position: 177, Step: n*6, Sweep: 24*6, Right-most hidden position: 321
    E:egpColor(O, LoadingBar)
    
    for(I = 1, 3){
        O++
        E:egpBox(O, vec2(6 * I, 0), vec2(5, 10))
        E:egpColor(O, LoadingBar)
        E:egpParent(O, O-I)
    }
    
    #Bar travel region
    O++
    E:egpRoundedBoxOutline(O, vec2(256, 370), vec2(120, 14))
    E:egpRadius(O, 4)
    E:egpSize(O, 2)
    E:egpColor(O, Gray)
    O++ #Blackout bars to hide the overflow
    E:egpBox(O, vec2(180, 370), vec2(30, 14))
    E:egpColor(O, vec(0))
    O++
    E:egpBox(O, vec2(332, 370), vec2(30, 14))
    E:egpColor(O, vec(0))
    
    
    return BarIndex
}

#Updates the windows XP loading layout
function void wirelink:egpUpdateWindowsXPLoader(BarIndex:number, BarPositionStep:number){
    local E = This
    
    E:egpPos(BarIndex, vec2(177 + (BarPositionStep % 24) * 6, 370))
}



#Updates the boot screen.
function void wirelink:bootupScreenUpdate(LoadProgress:number){
    local AwardBiosBlue = color("award_blue")
    local O = 30
    
    #Special, usually fast-repeating steps are defined outside of the switch (because it's nicer)
    if(inrange(LoadProgress, 21, 60)){
        This:egpWriteTerminal(format("Memory Testing : %.0fK %s", 524302 * (LoadProgress - 21) / (60 - 21), (LoadProgress == 60 ? "OK" : "")), -1)
    }
    
    #Windows XP loading screen (hell yeah)
    if(LoadProgress == 210){
        OS_WindowsXPLoadBarIndex = This:egpCreateWindowsXPLoader(O)
    }
    if(inrange(LoadProgress, 211, 300)){
        This:egpUpdateWindowsXPLoader(OS_WindowsXPLoadBarIndex, floor(max(LoadProgress - 220, 0) / (300 - 220) * 82))
    }
    
    
    #You know, maybe using a switch statement wasn't such a great idea
    switch(LoadProgress){
        case 1,
            This:egpWriteTerminal("   Award Modular BIOS v6.00PG, An Energy Star Ally")
            This:egpWriteTerminal("   Copyright (C) 1984-2002, Award Software, Inc.")
            This:egpWriteTerminalAbs("Press DEL to enter Setup", OS_TerminalLineCount - 1)
            This:egpWriteTerminalAbs(format("%02d/%02d/%s-a452BX,W145667P-9A154GPS9C-00", time("month"), time("day"), toString(time("year")):sub(3)), OS_TerminalLineCount)
            
            This:egpCircle(O, vec2(15, 70), vec2(5))
            This:egpColor(O, AwardBiosBlue)
            
            O = 31
            This:egpPoly(O, array(vec2(20, 78), vec2(18, 88), vec2(14, 83), vec2(8, 88), vec2(10, 78)))
            This:egpColor(O, AwardBiosBlue)
            
            O = 32
            This:egpPoly(O, array(vec2(9, 78), vec2(8, 83), vec2(4, 83)))
            This:egpColor(O, AwardBiosBlue)
            
            O = 33
            This:egpBox(O, vec2(512 - 69, 105), vec2(130))
            This:egpMaterial(O, "models/res/egp/energy_star_logo.png")
            This:egpColor(O, color("energy_star_yellow"))
        break
        case 5,
            This:egpWriteTerminal("ASUS E3V141 ACPI BIOS Revision 1003 Release 001", 1)
        break
        
        case 20,
            This:egpWriteTerminal("Main Processor : AMD Athlon(tm) 500", 1)
            This:egpWriteTerminal("Memory Testing : 0K") #Updated in separate statement
        break
        case 64,
            This:egpWriteTerminal("  Primary Master : ... [Press F4 to Skip]", 2)
        break
        case 70,
            This:egpWriteTerminal("  Primary Master : WDC AC32100-00H", -1)
            This:egpWriteTerminal("   Primary Slave : ... [Press F4 to Skip]")
        break
        case 74,
            This:egpWriteTerminal("   Primary Slave : None", -1)
            This:egpWriteTerminal("Secondary Master : ... [Press F4 to Skip]")
        break
        case 84,
            This:egpWriteTerminal("Secondary Master : MOS MPS6540", -1)
            This:egpWriteTerminal(" Secondary Slave : ... [Press F4 to Skip]")
        break
        case 100,
            This:egpWriteTerminal(" Secondary Slave : None", -1)
        break
        
        case 120,
            This:egpWriteTerminalAbs(" ", OS_TerminalLineCount - 1)
            This:egpWriteTerminalAbs(" ", OS_TerminalLineCount)
            This:egpRemove(33)
            This:egpWriteTerminalAbs("_", 15)
        break
        case 124,
            This:egpWriteTerminalAbs(" ", 15)
        break
        case 128,
            This:egpWriteTerminalAbs("_", 15)
        break
        case 132,
            This:egpWriteTerminalAbs(" ", 15)
        break
        case 136,
            This:egpWriteTerminalAbs("_", 15)
        break
        
        case 140,
            This:egpClearTerminal(33) #Clears the energy star logo as well
            
            This:egpWriteTerminal("-------------------------------------------------")
            This:egpWriteTerminal("CPU Type         : AMD Athlon(tm) 500 at 499 MHz")
            This:egpWriteTerminal("Cache Memory     : 513462K")
            This:egpWriteTerminal("Memory Installed : 524M DRAM")
            This:egpWriteTerminal("-------------------------------------------------")
            This:egpWriteTerminal("Pri. Master Disk : 2048MB")
            This:egpWriteTerminal("Sec. Master Disk : 64MB, ROM")
            This:egpWriteTerminal("Display Type     : True HD-IPS+LCD 1024x796", 1)
            This:egpWriteTerminal("Serial Port(s)   : 2xRS-232")
            This:egpWriteTerminal("-------------------------------------------------")
            
            This:egpWriteTerminal("PCI device listing.....", 2)
            This:egpWriteTerminal("Bus No. Device No. Device ID Device Class")
            This:egpWriteTerminal("-----------------------------------------------------------------------")
            This:egpWriteTerminal("  0        21      11FA      Network Controller")
            This:egpWriteTerminal("  0        15      22A1      Network Controller")
            This:egpWriteTerminal("  0        11      0102      IDE Controller")
            This:egpWriteTerminal("  0        12      0103      Multimedia Device")
            This:egpWriteTerminal("  0        13      0104      Display Controller")
            This:egpWriteTerminal("  0        09      0E11      Serial Bus Controller")
        break
        
        case 148,
            This:egpWriteTerminalAbs("_", 24)
        break
        case 152,
            This:egpWriteTerminalAbs(" ", 24)
        break
        case 156,
            This:egpWriteTerminalAbs("_", 24)
        break
        case 160,
            This:egpWriteTerminalAbs(" ", 24)
        break
        case 162,
            This:egpWriteTerminal("Verifying DMI Pool Data .......", 1)
            This:egpWriteTerminal("_")
        break
        
        case 200,
            This:egpClearTerminal(0) #Windows XP part
        break
        
        case 300,
            This:egpClearTerminal(60) #End of windows XP part
        break
        
        
        case 320,
            This:egpWriteTerminal("Starting External ROM Script ...")
        break
        case 327,
            This:egpWriteTerminal(" ", -1)
        break
        case 328,
            This:egpWriteTerminal("C:\\>_", -1)
        break
        case 329,
            This:egpWriteTerminal("C:\\>.\\EMD Software\\FIRE\\>exec.bat_", -1)
        break
        case 332,
            This:egpWriteTerminal("_", -1)
        break

        case 340,
            This:egpWriteTerminal("Starting FIRE display system...", -1)
            This:egpWriteTerminal("_")
        break
        case 350,
            This:egpWriteTerminal("System emulation author: The Big Bean", -1)
            This:egpWriteTerminal("_")
        break
        case 351,
            This:egpWriteTerminal("Verifying system integrity...", -1)
            This:egpWriteTerminal("_")
        break
        case 370,
            This:egpWriteTerminal("Initializing peripherals...", -1)
            This:egpWriteTerminal("_")
        break
        case 375,
            This:egpWriteTerminal("Loading user configurations...", -1)
            This:egpWriteTerminal("_")
        break
        case 388,
            local SubFC = FC_DATA[randint(1, FC_DATA:count()), string]:explode("\\")
            This:egpWriteTerminal(SubFC[1, string], -1)
            if(SubFC:exists(2)){
                This:egpWriteTerminal(SubFC[2, string] + "_")
            }
        break
    }
}



#The main function that loads all of the stuff on the EGP screens
function void wirelink:egpLoad(Page:number, MainMonitorLoad:number, PortMainPages:number){
    local E = This
    
    #Background
    E:egpBox(299, vec2(256), vec2(512))
    E:egpColor(299, color("background"))
    E:egpOrder(299, 1)
    
    
    if(MainMonitorLoad){
        local O = 0
        
        #----Upper panel (gauges and warnings)
        #Upper text (Driven distance, Unit RR & Number, Date, Time)
        O = 1
        E:egpTextLayout(O, format("%.0f " + "mi", 0), vec2(48,15), vec2(85,30))
        E:egpColor(O, color("lightBlue"))
        E:egpFont(O, Font_SansSerif, 15)
        E:egpAlign(O, 0, 0)
        
        O = 2
        E:egpTextLayout(O, format("%s %d", LOCOMOTIVE_IDENT["railroad",string], LOCOMOTIVE_IDENT["number",number]), vec2(148, 15), vec2(90,30))
        E:egpColor(O, color("lightBlue"))
        E:egpFont(O, Font_SansSerif, 15)
        E:egpAlign(O, 0, 0)
        
        O = 3
        E:egpTextLayout(O, "JAN 1, 2020", vec2(378, 15), vec2(90,30))
        E:egpColor(O, color("lightBlue"))
        E:egpFont(O, Font_SansSerif, 15)
        E:egpAlign(O, 0, 0)
        
        O = 4
        E:egpTextLayout(O, (TimeFormat ? "12:00:00 UTC" : "12:00 AM UTC"), vec2(465, 15), vec2(90,30))
        E:egpColor(O, color("lightBlue"))
        E:egpFont(O, Font_SansSerif, 15)
        E:egpAlign(O, 2, 0)
        
        
        if(!BrakePanelYeet){
            #Left indicator boxes
            E:egpBoxLabeled(5, vec2(5, 30), vec2(85, 85), "Equalizing Res")
            E:egpBoxLabeled(8, vec2(94, 30), vec2(85, 85), "Brake Pipe")
            E:egpBoxLabeled(11, vec2(5, 125), vec2(40, 35), "Rear")
            E:egpBoxLabeled(24, vec2(50, 125), vec2(40, 35), "Flow")
            E:egpBoxLabeled(28, vec2(94, 125), vec2(40, 35), "Main")
            E:egpBoxLabeled(32, vec2(139, 125), vec2(40, 35), "BC")
        }else{
            E:egpBoxLabeled(11, vec2(9, 250), vec2(40, 35), "Rear")
        }
        
        
        #Analog speedometer
        local WhiteSpeedoAngle = SpeedoYellowAreaVelocity / MaxSpeedoVelocity * 272
        local YellowSpeedoAngle = (SpeedoRedAreaVelocity - SpeedoYellowAreaVelocity) / MaxSpeedoVelocity * 272
        local RedSpeedoAngle = (MaxSpeedoVelocity - SpeedoRedAreaVelocity) / MaxSpeedoVelocity * 272
        O = 36
        E:egpWedge(O, vec2(256, 90), vec2(74, 74))
        E:egpColor(O, color("white"))
        E:egpSize(O, 360 - WhiteSpeedoAngle)
        E:egpAngle(O, vec2(256, 90), vec2(0), -134)
        
        O = 37
        E:egpWedge(O, vec2(256, 90), vec2(74, 74))
        E:egpColor(O, color("onYellow"))
        E:egpSize(O, 360 - YellowSpeedoAngle)
        E:egpAngle(O, vec2(256, 90), vec2(0), -134 - WhiteSpeedoAngle)
        
        O = 38
        E:egpWedge(O, vec2(256, 90), vec2(74, 74))
        E:egpColor(O, color("lightRed"))
        E:egpSize(O, 360 - RedSpeedoAngle)
        E:egpAngle(O, vec2(256, 90), vec2(0), -134 - WhiteSpeedoAngle - YellowSpeedoAngle)
        
        O = 39
        E:egpCircle(O, vec2(256,90), vec2(72,72))
        E:egpColor(O, color("background"))
        
        O = 40
        E:egpBox(O, vec2(256, 300), vec2(102, 30))
        E:egpColor(O, color("background"))
        
        #Gauge lines
        for(I = 1, 17){
            local Index = (I - 1) + 41
            local Angle = -27.5 - (I / 16) * 270
            local LineLength = (I % 2 == 1) ? 118 : 128
            local CurSpeed = MaxSpeedoVelocity * (I - 1) / 16
            #E:egpLine(Index, vec2(256, 90) + vec2(146 * sin(Angle), 146 * cos(Angle)), vec2(256, 90) + vec2(LineLength * sin(Angle), LineLength * cos(Angle)))
            E:egpLine(Index, vec2(256, 90) + vec2(73 * sin(Angle), 73 * cos(Angle)), vec2(256, 90) + vec2(LineLength/2 * sin(Angle), LineLength/2 * cos(Angle)))
            E:egpColor(Index, (CurSpeed >= SpeedoRedAreaVelocity ? color("lightRed") : (CurSpeed >= SpeedoYellowAreaVelocity ? color("onYellow") : color("white"))))
        }
        
        #Numbers
        for(I = 1, 9){
            local Index = (I - 1) + 58
            local Angle = -46 - ((I - 1) / 8) * 272
            local CurSpeed = MaxSpeedoVelocity * (I - 1) / 8
            E:egpText(Index, format("%.0f", CurSpeed * (Units ? UNIT_DATA["M_km", number] : 1)), vec2(256, 90) + vec2(50 * sin(Angle), 50 * cos(Angle)))
            E:egpFont(Index, Font_SansSerif, 14)
            E:egpAlign(Index, 1, 1)
            E:egpColor(Index, (CurSpeed >= SpeedoRedAreaVelocity ? color("lightRed") : (CurSpeed >= SpeedoYellowAreaVelocity ? color("onYellow") : color("white"))))
        }
        
        
        O = 67 #Gauge needle
        E:egpCircle(O, vec2(256, 90), vec2(36, 3))
        E:egpColor(O, color("lightRed"))
        E:egpAngle(O, vec2(256, 90), vec2(-36, 0), 46) #46 - 271
        
        O = 68 #Gauge center
        E:egpCircle(O, vec2(256,90), vec2(8))
        E:egpColor(O, vec(100))
        
        #Right indicator boxes
        E:egpBoxLabeled(69, vec2(335, 30), vec2(55, 35), "Accel")
        E:egpBoxLabeled(72, vec2(394, 30), vec2(55, 35), "Length")
        E:egpBoxLabeled(75, vec2(453, 30), vec2(55, 35), "Reverser")
        E:egpBoxLabeled(78, vec2(335, 70), vec2(114, 60), "Consist Effort")
        E:egpBoxLabeled(81, vec2(335, 100), vec2(114, 30), (SetToAmps ? "Amps" : "Tractive Effort"))
        E:egpBoxLabeled(84, vec2(453, 70), vec2(55, 60), "TH Handle")
        
        
        #Tractive effort bar
        local MaxTE_Actual = (Dynamics ? MaxTE * (MaxDynCurrent / MaxTMCurrent) : MaxTE) #This calculates the "approximate" max tractive effort for dynamics
        local MaxContTE_Actual = (Dynamics ? MaxContTE * (MaxContDynCurrent / MaxTMCurrent) : MaxContTE)
        local MaxCurrent_Act = (Dynamics ? MaxDynCurrent : MaxTMCurrent)
        local MaxContCurrent_Act = (Dynamics ? MaxContDynCurrent : MaxContTMCurrent)
        local ActualDiff = (SetToAmps ? (MaxContCurrent_Act / MaxCurrent_Act) : (MaxContTE_Actual / MaxTE_Actual))
        
        O = 87 #White part
        E:egpBox(O, vec2(round(345 + (ActualDiff * 150) / 2,0), 146), vec2(round(ActualDiff * 150,0), 3))
        O = 88 #Yellow part
        E:egpBox(O, vec2(round((345 + (ActualDiff * 150)) + (150 - ActualDiff * 150) / 2,0), 146), vec2(round(150 - ActualDiff * 150,0), 3))
        E:egpColor(O, color("onYellow"))
        
        #Pointers and numbers
        for(I = 1, 5){
            local Izero = (I - 1)
            local Index = (Izero * 2 + 89)
            
            #Pointer generation
            E:egpBox(Index, vec2(346 + Izero * 37, 150), vec2(2, 9))
            E:egpColor(Index, (ActualDiff <= (Izero / 4) ? color("onYellow") : vec(255)))
            
            #Numbers
            E:egpText(Index + 1, format("%.0f", (SetToAmps ? MaxCurrent_Act : MaxTE_Actual * (Units ? UNIT_DATA["M_N", number] : 1)) * (Izero / 4)), vec2(346 + Izero * 37, 138))
            E:egpFont(Index + 1, Font_SansSerif, 14)
            E:egpAlign(Index + 1, 1, 1)
            E:egpColor(Index + 1, (ActualDiff <= (Izero / 4) ? color("onYellow") : vec(255)))
        }
        
        
        #Tractive effort bar indicator needle
        O = 99
        E:egpTriangle(O, vec2(340, 154), vec2(350, 154), vec2(345, 148)) #Needle pointer
        E:egpColor(O, color("lightGreen"))
        
        O = 100
        E:egpBox(O, vec2(345, 156), vec2(11, 4)) #Needle follower
        E:egpColor(O, color("lightGreen"))
        
        
        if(!BrakePanelYeet){
            #Value init (from left to right)
            O = 101 #ER
            E:egpTextLayout(O, "0", vec2(47, 78), vec2(85, 75))
            E:egpFont(O, Font_SansSerif, 55)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightGreen"))
            
            O = 102 #BP
            E:egpTextLayout(O, "0", vec2(136, 78), vec2(85, 75))
            E:egpFont(O, Font_SansSerif, 55)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightGreen"))
            
            O = 103 #Rear
            E:egpTextLayout(O, "?", vec2(25, 145), vec2(40, 25))
            E:egpFont(O, Font_SansSerif, 25)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightGreen"))
            
            O = 104 #Flow
            E:egpTextLayout(O, "0", vec2(70, 145), vec2(40, 25))
            E:egpFont(O, Font_SansSerif, 25)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightGreen"))
            
            O = 105 #Main
            E:egpTextLayout(O, "0", vec2(114, 145), vec2(40, 25))
            E:egpFont(O, Font_SansSerif, 25)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightRed"))
            
            O = 106 #Cyl
            E:egpTextLayout(O, "0", vec2(159, 145), vec2(40, 25))
            E:egpFont(O, Font_SansSerif, 25)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightGreen"))
        }else{
            O = 103 #Rear
            E:egpTextLayout(O, "?", vec2(25, 145), vec2(40, 25))
            E:egpFont(O, Font_SansSerif, 25)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightGreen"))
        }
        
        
        #Speed readout
        O = 107
        E:egpTextLayout(O, "0.0", vec2(253, 130), vec2(100, 75))
        E:egpFont(O, Font_SansSerif, 44)
        E:egpAlign(O, 1, 2)
        E:egpColor(O, color("lightGreen"))
        
        O = 108
        E:egpText(O, (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string]), vec2(283, 160))
        E:egpFont(O, Font_SansSerif, 16)
        E:egpAlign(O, 0, 2)
        E:egpColor(O, color("lightGreen"))
        
        
        O = 109 #Accel
        E:egpTextLayout(O, "0", vec2(350, 48), vec2(40, 16))
        E:egpFont(O, Font_SansSerif, 16)
        E:egpAlign(O, 1, 2)
        E:egpColor(O, color("lightGreen"))
        
        O = 110
        E:egpTextLayout(O, (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string]), vec2(375, 41), vec2(40, 16))
        E:egpFont(O, Font_SansSerif, 12)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("lightGreen"))
        
        O = 111
        E:egpBox(O, vec2(375, 48), vec2(20, 1))
        E:egpColor(O, color("lightGreen"))
        
        O = 112
        E:egpTextLayout(O, "min", vec2(375, 54), vec2(40, 12))
        E:egpFont(O, Font_SansSerif, 12)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("lightGreen"))
        
        O = 113 #Length
        E:egpTextLayout(O, "0", vec2(404, 48), vec2(40, 16))
        E:egpFont(O, Font_SansSerif, 16)
        E:egpAlign(O, 2, 1)
        E:egpColor(O, color("lightBlue"))
        
        O = 114
        E:egpTextLayout(O, (Units ? UNIT_DATA["m", string] : UNIT_DATA["ft", string]), vec2(441, 48), vec2(16))
        E:egpFont(O, Font_SansSerif, 16)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("lightBlue"))
        
        O = 115 #Reverser position
        E:egpTextLayout(O, "Center", vec2(480, 48), vec2(55, 16))
        E:egpFont(O, Font_SansSerif, 16)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("lightBlue"))
        
        
        #Consist effort ratio (capable:total units)
        O = 116
        E:egpText(O, "0:1", vec2(350, 87))
        E:egpFont(O, Font_SansSerif, 18)
        E:egpAlign(O, 1, 1)
        
        #Consist power state (P/D)
        O = 117
        E:egpText(O, "-", vec2(370, 87))
        E:egpFont(O, Font_SansSerif, 18)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("lightGreen"))
        
        #Consist tractive effort readout
        O = 118
        E:egpText(O, "0", vec2(415, 87))
        E:egpFont(O, Font_SansSerif, 18)
        E:egpAlign(O, 2, 1)
        E:egpColor(O, color("lightGreen"))
        
        #TE unit
        O = 119
        E:egpText(O, (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string]), vec2(420, 87))
        E:egpFont(O, Font_SansSerif, 18)
        E:egpAlign(O, 0, 1)
        E:egpColor(O, color("lightGreen"))
        
        
        #Tractive effort readout
        O = 120
        E:egpText(O, "0", vec2(392, 117))
        E:egpFont(O, Font_SansSerif, 18)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("lightGreen"))
        
        O = 121
        E:egpText(O, (SetToAmps ? "A" : (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string])), vec2(420, 117))
        E:egpFont(O, Font_SansSerif, 18)
        E:egpAlign(O, 0, 1)
        E:egpColor(O, color("lightGreen"))
        
        
        #Throttle
        O = 122
        E:egpTextLayout(O, "Idle", vec2(480, 103), vec2(55))
        E:egpFont(O, Font_SansSerif, 28)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("lightGreen"))
        #----Upper panel end
        
        
        
        #----Warning indicators
        O = 123 #Separator lines
        E:egpBox(O, vec2(256, 163), vec2(512, 2))
        E:egpColor(O, color("lightBlue"))
        
        O = 124
        E:egpBox(O, vec2(256, 203), vec2(512, 2))
        E:egpColor(O, color("lightBlue"))
        
        #Warnings
        O = 125 #Wheel slip
        E:egpBox(O, vec2(21, 183), vec2(41, 38))
        E:egpColor(O, color("offWhite"))
        
        O = 126
        E:egpTextLayout(O, "WHEEL SLIP", vec2(21, 183), vec2(41, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        
        O = 127 #PCS Open
        E:egpBox(O, vec2(64, 183), vec2(41, 38))
        E:egpColor(O, color("offRed"))
        
        O = 128
        E:egpTextLayout(O, "PCS OPEN", vec2(64, 183), vec2(41, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        
        #Blank
        
        O = 129 #Dyn brake
        E:egpBox(O, vec2(150, 183), vec2(41, 38))
        E:egpColor(O, color("offYellow"))
        
        O = 130
        E:egpTextLayout(O, "DYN BRAKE", vec2(150, 183), vec2(41, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        
        O = 131 #Load shed
        E:egpBox(O, vec2(193, 183), vec2(41, 38))
        E:egpColor(O, color("offYellow"))
        
        O = 132
        E:egpTextLayout(O, "LOAD SHED", vec2(193, 183), vec2(41, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        
        O = 133 #Alerter
        E:egpBox(O, vec2(256, 183), vec2(82, 38))
        E:egpColor(O, color("offRed"))
        
        O = 134
        E:egpTextLayout(O, "ALERT", vec2(256, 183), vec2(82, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        
        O = 135 #Unit alarm
        E:egpBox(O, vec2(320, 183), vec2(41, 38))
        E:egpColor(O, color("offYellow"))
        
        O = 136
        E:egpTextLayout(O, "UNIT ALARM", vec2(320, 183), vec2(41, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        
        #Blank
        
        O = 137 #AB Fault
        E:egpBox(O, vec2(406, 183), vec2(41, 38))
        E:egpColor(O, color("offRed"))
        
        O = 138
        E:egpTextLayout(O, "AB FAIL", vec2(406, 183), vec2(41, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        
        #Blank
        
        O = 139 #EOT move
        E:egpBox(O, vec2(492, 183), vec2(41, 38))
        E:egpColor(O, color("offWhite"))
        
        O = 140
        E:egpTextLayout(O, "EOT MOVE", vec2(492, 183), vec2(41, 38))
        E:egpFont(O, Font_SansSerif, 14)
        E:egpAlign(O, 1, 1)
        E:egpColor(O, color("background"))
        #----End of warning indicators
        
        
        
        
        #----Lower section stuff
        local LoadStyle = shouldLoadLowerMainContent()
        if(LoadStyle){
            #Other indicators
            #Horn
            O = 141
            E:egpTriangle(O, vec2(400, 220), vec2(400, 210), vec2(420, 215))
            E:egpColor(O, color("offBlue"))
            
            O = 142
            E:egpBox(O, vec2(416, 216), vec2(2, 8))
            E:egpColor(O, color("offBlue"))
            
            
            #Bell
            O = 143
            E:egpTriangle(O, vec2(430, 225), vec2(444, 225), vec2(437, 209))
            E:egpColor(O, color("offBlue"))
            
            O = 144
            E:egpCircle(O, vec2(437, 225), vec2(2))
            E:egpColor(O, color("offBlue"))
            
            #Sanding
            O = 145
            E:egpTriangle(O, vec2(455, 225), vec2(470, 225), vec2(460, 215))
            E:egpColor(O, color("offYellow"))
            
            O = 146
            E:egpBox(O, vec2(460, 213), vec2(2, 6))
            E:egpColor(O, color("offYellow"))
            
            #Low fuel
            O = 147
            E:egpBox(O, vec2(490, 220), vec2(7, 10))
            E:egpColor(O, color("offYellow"))
            
            O = 148
            E:egpBoxOutline(O, vec2(490, 212), vec2(7))
            E:egpColor(O, color("offYellow"))
            
            O = 149
            E:egpBox(O, vec2(494, 223), vec2(2))
            E:egpColor(O, color("offYellow"))
            
            O = 150
            E:egpBox(O, vec2(496, 218), vec2(2, 10))
            E:egpColor(O, color("offYellow"))
            
            
            
            #Cab signals
            #-----------
            O = 157
            E:egpText(O, "Cab Signals", vec2(433, 247))
            E:egpFont(O, Font_SansSerif, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightBlue"))
            
            #Time to penalty readout
            O = 158
            E:egpText(O, "Time To Penalty", vec2(433, 262))
            E:egpFont(O, Font_SansSerif, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightBlue"))
            
            O = 159
            E:egpText(O, "0 Seconds", vec2(433, 277))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("onYellow"))
            
            
            #CCS Mode readout
            O = 160
            E:egpText(O, "CCS Mode", vec2(350, 295))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 0, 1)
            E:egpColor(O, color("lightBlue"))
            
            O = 161
            E:egpText(O, "CUT OUT", vec2(433, 295))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 0, 1)
            E:egpColor(O, color("lightGreen"))
            
            #ATC Mode readout
            O = 162
            E:egpText(O, "ATC Mode", vec2(350, 313))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 0, 1)
            E:egpColor(O, color("lightBlue"))
            
            O = 163
            E:egpText(O, "CUT OUT", vec2(433, 313))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 0, 1)
            E:egpColor(O, color("lightGreen"))
            
            #Cab signal status box
            O = 164
            E:egpBox(O, vec2(860, 660), vec2(320, 16))
            E:egpColor(O, color("onYellow"))
            E:egpAlpha(O, 0)
            
            O = 165
            E:egpText(O, "CS INOPERATIVE", vec2(430, 330))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec4(0))
            
            
            #Signal readout block (you know, the thing this is actually made for)
            O = 166
            E:egpPolyOutline(O, array(vec2(495, 239), vec2(509, 239), vec2(509, 250), vec2(495, 250),  vec2(495, 261), vec2(509, 261), vec2(509, 272), vec2(495, 272),  vec2(495, 283), vec2(509, 283), vec2(509, 294), vec2(495, 294)))
            E:egpSize(O, 1)
            
            O = 167 #Filler for the right side of the polygon
            E:egpBox(O, vec2(510, 267), vec2(1, 55))
            
            
            #Green signal indicator
            O = 168
            E:egpBox(O, vec2(503, 245), vec2(13, 10))
            E:egpColor(O, color("darkerGreen"))
            E:egpAlpha(O, 0)
            
            #Yellow/Green signal indicator
            O = 169
            E:egpBox(O, vec2(503, 254), vec2(13, 5))
            E:egpColor(O, color("darkerYellow"))
            E:egpAlpha(O, 0)
            
            O = 170
            E:egpBox(O, vec2(503, 259), vec2(13, 5))
            E:egpColor(O, color("darkerGreen"))
            E:egpAlpha(O, 0)
            
            #Yellow signal indicator
            O = 171
            E:egpBox(O, vec2(503, 267), vec2(13, 10))
            E:egpColor(O, color("darkerYellow"))
            E:egpAlpha(O, 0)
            
            #Red/Yellow signal indicator
            O = 172
            E:egpBox(O, vec2(503, 276), vec2(13, 5))
            E:egpColor(O, color("lightRed"))
            E:egpAlpha(O, 0)
            
            O = 173
            E:egpBox(O, vec2(503, 281), vec2(13, 5))
            E:egpColor(O, color("darkerYellow"))
            E:egpAlpha(O, 0)
            
            #Red movement indicator
            O = 174
            E:egpBox(O, vec2(503, 289), vec2(13, 10))
            E:egpColor(O, color("lightRed"))
            E:egpAlpha(O, 0)
        }
        
        #This is there to make room for remote session windows
        if(LoadStyle == 1){
            #Fuel quantity
            O = 151
            E:egpTextLayout(O, "FUEL QUANTITY", vec2(85, 240), vec2(125, 14))
            E:egpFont(O, Font_SansSerif, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightBlue"))
            
            O = 152
            E:egpTextLayout(O, "? " + (Units ? UNIT_DATA["L", string] : UNIT_DATA["Gal", string]), vec2(85, 253), vec2(125, 40))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("white"))
            
            #Air brake setup
            O = 153
            E:egpTextLayout(O, "AIR BRAKE SETUP", vec2(85, 270), vec2(125, 14))
            E:egpFont(O, Font_SansSerif, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightBlue"))
            
            O = 154
            E:egpTextLayout(O, "TRAILING", vec2(85, 283), vec2(125, 20))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("white"))
            
            
            #Last car
            O = 155
            E:egpTextLayout(O, "LAST CAR", vec2(256, 240), vec2(125, 14))
            E:egpFont(O, Font_SansSerif, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("lightBlue"))
            
            O = 156
            E:egpTextLayout(O, "IDENT 0", vec2(256, 255), vec2(125, 20))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, color("white"))
            
            
            #DP enabled message
            O = 175
            E:egpText(O, "", vec2(38, 310))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 0, 1)
            E:egpColor(O, color("white"))
        }
        
        #Top priority message box
        if(Page == 0 | Page == 5 | (Page == 6 & LocoMonitorPage == 1)){
            E:egpCreateSingleMessageBox(247, vec2(256, 449), color("onYellow"), table())
        }
    }
    
    
    #This is where the fun begins
    if(MainMonitorLoad | PortMainPages){
        switch(Page){
            case 1, #Consist monitor
                E:egpPageLabelBox(190, vec2(256, 400), "MU Consist Detail") #+16
                
                #Column names
                O = 193
                E:egpText(O, "UNIT           MODE     EFFORT         STATUS", vec2(40, 420))
                E:egpFont(O, Font_SansSerif, 16)
                E:egpAlign(O, 0, 1)
                E:egpColor(O, color("white"))
                
                #Consist monitor info functions
                E:egpCreateConsistMonitorField(194, vec2(40, 440))
                E:egpCreateConsistMonitorField(199, vec2(40, 458))
                E:egpCreateConsistMonitorField(204, vec2(40, 476))
                E:egpCreateConsistMonitorField(209, vec2(40, 494))
                
            break
            case 3, #Operator controls
                switch(OPControlsPage){
                    case 0, #Main page
                        E:egpPageLabelBox(190, vec2(256, 400), "Operator Controls")
                        
                        #Blower status box
                        E:egpBoxLabeled(193, vec2(385, 429), vec2(63, 36), "Blower")
                        
                        #Blower status text
                        O = 196
                        E:egpText(O, "Off", vec2(416, 449))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                    break
                    case 1, #Climate control page
                        E:egpPageLabelBox(190, vec2(256, 400), "Cab Climate Control System")
                        
                        #Defogger status box
                        E:egpBoxLabeled(193, vec2(385, 429), vec2(63, 36), "Defog")
                        
                        #Defogger status text
                        O = 196
                        E:egpText(O, "Off", vec2(416, 449))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                    break
                    case 2, #Display setup page
                        E:egpPageLabelBox(190, vec2(256, 400), "Display Setup")
                        
                        #Brightness % box
                        E:egpBoxLabeled(193, vec2(1, 429), vec2(127, 36), "Screen Brightness")
                        
                        #Brightness % text
                        O = 196
                        E:egpTextLayout(O, "100%", vec2(64, 448), vec2(128, 40))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        #Display mode box
                        E:egpBoxLabeled(197, vec2(129, 429), vec2(127, 36), "Display mode")
                        
                        O = 200
                        E:egpTextLayout(O, "Engineer Primary", vec2(192, 448), vec2(128, 40))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        #Unit change button
                        E:egpBoxLabeled(201, vec2(385, 429), vec2(63, 36), "Units")
                        
                        #Current units
                        O = 204
                        E:egpText(O, (Units ? "Metric" : "Imper."), vec2(416, 449))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                                                    
                    break
                }
            break
            case 4, #Length counter
                switch(LengthCounterPage){
                    case 0, #Main page
                        #Page label box
                        E:egpPageLabelBox(190, vec2(256, 400), "Length Counter")
                        
                    break
                    case 1, #Length change page
                        switch(LengthChangePage){
                            case 0, #Main page
                                #I mean you get the idea at this point
                                E:egpPageLabelBox(190, vec2(256, 400), "Change Length")
                                
                                #Measured length
                                
                            break
                            case 1, #Measure length page
                                E:egpPageLabelBox(190, vec2(256, 400), "Train Length Counter Functions")
                                local LUnits = (Units ? "Meters" : "Feet")
                                local LUnitMult = (Units ? UNIT_DATA["M_m", number] : 1)
                                
                                if(!MeasureLengthFinished){
                                    #Current measured length
                                    O = 193
                                    E:egpText(O, format("%.0f", MeasuredLength * LUnitMult), vec2(160, 445))
                                    E:egpFont(O, Font_SansSerif, 18)
                                    E:egpAlign(O, 1, 1)
                                    E:egpColor(O, color("white"))
                                    
                                    #Units
                                    O = 194
                                    E:egpText(O, format("%s", LUnits), vec2(210, 445))
                                    E:egpFont(O, Font_SansSerif, 18)
                                    E:egpAlign(O, 1, 1)
                                    E:egpColor(O, color("lightBlue"))
                                }else{
                                    #Info text
                                    O = 193 #Short length warning
                                    E:egpText(O, (MeasuredLTooShort ? "The measured length is too short!" : ""), vec2(10, 440))
                                    E:egpFont(O, Font_SansSerif, 18)
                                    E:egpAlign(O, 0, 1)
                                    E:egpColor(O, color("white"))
                                    
                                    #Previous length
                                    O = 194
                                    E:egpText(O, format("The previous length was %.0f %s", ConsistLength * LUnitMult, LUnits), vec2(10, 460))
                                    E:egpFont(O, Font_SansSerif, 18)
                                    E:egpAlign(O, 0, 1)
                                    E:egpColor(O, color("lightBlue"))
                                }
                                    
                                
                            break
                            case 2, #Enter length page
                                E:egpPageLabelBox(190, vec2(256, 400), "Enter Length")
                                
                                #Current input length readout
                                O = 193
                                E:egpText(O, format("%01d  %01d  %01d  %01d  %01d", IL1, IL2, IL3, IL4, IL5), vec2(224, 430))
                                E:egpFont(O, Font_SansSerif, 18)
                                E:egpAlign(O, 1, 1)
                                E:egpColor(O, color("white"))
                                
                                O = 194
                                E:egpText(O, format("%s", (Units ? "Meters" : "Feet")), vec2(265, 430))
                                E:egpFont(O, Font_SansSerif, 18)
                                E:egpAlign(O, 0, 1)
                                E:egpColor(O, color("white"))
                                #---
                                
                                #Digit underlines
                                O = 195
                                E:egpBox(O, vec2(192, 442), vec2(11, 3))
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 196
                                E:egpBox(O, vec2(208, 442), vec2(11, 3))
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 197
                                E:egpBox(O, vec2(224, 442), vec2(11, 3))
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 198
                                E:egpBox(O, vec2(240, 442), vec2(11, 3))
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 199
                                E:egpBox(O, vec2(256, 442), vec2(11, 3))
                                E:egpColor(O, color("lightBlue"))
                                
                                #Connection lines
                                O = 200
                                E:egpLine(O, vec2(96, 470), vec2(192, 443))
                                E:egpSize(O, 2)
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 201
                                E:egpLine(O, vec2(160, 470), vec2(208, 443))
                                E:egpSize(O, 2)
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 202
                                E:egpLine(O, vec2(224, 470), vec2(224, 443))
                                E:egpSize(O, 2)
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 203
                                E:egpLine(O, vec2(288, 470), vec2(240, 443))
                                E:egpSize(O, 2)
                                E:egpColor(O, color("lightBlue"))
                                
                                O = 204
                                E:egpLine(O, vec2(352, 470), vec2(256, 443))
                                E:egpSize(O, 2)
                                E:egpColor(O, color("lightBlue"))
                                
                                #Invalid length text
                                O = 205
                                E:egpText(O, "Invalid Length", vec2(509, 445)) #Invalid Length
                                E:egpFont(O, Font_SansSerif, 16)
                                E:egpAlign(O, 2, 1)
                                E:egpColor(O, color("onRed"))
                                
                            break
                        }
                    break
                    case 2, #Length countdown page
                        E:egpPageLabelBox(190, vec2(256, 400), "Countdown Length")
                        local LUnits = (Units ? "Meters" : "Feet")
                        local LUnitMult = (Units ? UNIT_DATA["M_m", number] : 1)
                        
                        #Length
                        O = 193
                        E:egpText(O, format("%.0f", CountdownLength * LUnitMult), vec2(288, 452))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("white"))
                        
                        #Units
                        O = 194
                        E:egpText(O, format("%s", LUnits), vec2(338, 452))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                                                                            
                    break
                    case 3, #Measured mile page
                        E:egpPageLabelBox(190, vec2(256, 400), "Measured Mile")
                        
                        O = 193 #Elapsed time
                        E:egpText(O, "Time Mile Posts", vec2(96, 425))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 194 #Time readout
                        E:egpText(O, format("%02d:%02d", 0, 0), vec2(96, 445))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightPurple"))
                        
                        O = 195 #Average speed for Measured Mile text placeholder
                        E:egpText(O, "", vec2(400, 425))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 196 #Average speed / Speed Check invalid message
                        E:egpText(O, "", vec2(400, 445))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightPurple"))
                        
                    break
                }
            break
            case 5, #Distributed power
                switch(DistributedPowerPage){
                    case 0, #Main page
                        O = 175
                        E:egpCreateRemoteSessionWindow(O, vec2(0, 206), vec2(336, 222), "DP Main Menu", "DP01")
                        
                        O = 179
                        E:egpText(O, "   Current Status: Conventional", vec2(3, 246))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("white"))
                        
                        O = 180
                        E:egpText(O, "=":repeat(45), vec2(3, 262))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 181
                        E:egpText(O, format("   %-13s- Set up as Lead", "LEAD SETUP"), vec2(3, 278))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 182
                        E:egpText(O, format("   %-13s- Set up as Remote", "REMOTE SETUP"), vec2(3, 294))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 183
                        E:egpText(O, format("   %-13s- Maintenance Menu", "MAINT MENU"), vec2(3, 310))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                    break
                    case 1, #LEAD SETUP
                        O = 175
                        E:egpCreateRemoteSessionWindow(O, vec2(0, 206), vec2(336, 222), "DP Lead Setup", "DP31")
                        
                        O = 179
                        E:egpDPUnitIDSelector(O, vec2(3, 240), "   Link to unit - ", 1, "0000")
                        
                        O = 185
                        for(I = 1, 4){
                            local EGPIndex = I-1 + O
                            E:egpText(EGPIndex, "", vec2(3, 240 + (I - 1)*16))
                            E:egpFont(EGPIndex, Font_Monospace, 16)
                            E:egpAlign(EGPIndex, 0, 0)
                            E:egpColor(EGPIndex, color("lightBlue"))
                        }
                        
                        #Warning message when existing active DP
                        O = 189
                        E:egpText(O, (DistPower_LocalEnable ? "   <WARNING>: PRESSING EXIT KEY WILL END DP" : ""), vec2(3, 384))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("onYellow"))
                        
                    break
                    case 2, #REMOTE SETUP
                        O = 175
                        E:egpCreateRemoteSessionWindow(O, vec2(0, 206), vec2(336, 222), "DP Remote Setup", "DP21")
                        
                        O = 179
                        E:egpDPUnitIDSelector(O, vec2(3, 240), "   Link to unit - ", 1, "0000")
                        
                        O = 185
                        E:egpText(O, format("   %-13s- %s", "Direction", "SAME as lead"), vec2(3, 240 + 16))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        #Warning message when existing active DP
                        O = 189
                        E:egpText(O, (DistPower_LocalEnable ? "   <WARNING>: PRESSING EXIT KEY WILL END DP" : ""), vec2(3, 384))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("onYellow"))
                        
                    break
                    case 3, #Main Menu - DP enabled LEAD
                        O = 175
                        E:egpCreateRemoteSessionWindow(O, vec2(0, 206), vec2(336, 222), "DP Main Menu", "DP11")
                        
                        O = 179
                        E:egpText(O, format("   Lead unit for %d remote%s", DistPower_LinkedUnits:count(), DistPower_LinkedUnits:count() == 1 ? "" : "s"), vec2(3, 246))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("white"))
                        
                        O = 180
                        E:egpText(O, "=":repeat(45), vec2(3, 246+16))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 181
                        E:egpText(O, "   TRAIN CONFIG - Train Configuration/Setup", vec2(3, 246+16*2))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 182
                        E:egpText(O, "   SYSTEM       - Initiate tests & view logs", vec2(3, 246+16*3))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 183
                        E:egpText(O, "   MODE         - Select operating mode", vec2(3, 246+16*4))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 184
                        E:egpText(O, "   MAINT MENU   - Maintenance Menu", vec2(3, 246+16*6))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 185
                        E:egpText(O, "   END DIST PWR - End Distributed Power", vec2(3, 246+16*7))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightPurple"))
                        
                    break
                    case 4, #Main menu - DP enabled REMOTE
                        O = 175
                        E:egpCreateRemoteSessionWindow(O, vec2(0, 206), vec2(336, 222), "DP Main Menu", "DP12")
                        
                        O = 179
                        E:egpText(O, format("   Remote unit, Lead unit %d", DistPower_LeadUnitNumber), vec2(3, 246))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("white"))
                        
                        O = 180
                        E:egpText(O, "=":repeat(45), vec2(3, 246+16))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 181
                        E:egpText(O, "   SYSTEM       - Initiate tests & view logs", vec2(3, 246+16*2))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 182
                        E:egpText(O, "   MAINT MENU   - Maintenance Menu", vec2(3, 246+16*3))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 183
                        E:egpText(O, "   END DIST PWR - End Distributed Power", vec2(3, 246+16*7))
                        E:egpFont(O, Font_Monospace, 16)
                        E:egpAlign(O, 0, 0)
                        E:egpColor(O, color("lightPurple"))
                    break
                }
                
            break
        }
        #End of main monitor stuff#
    }
    
    
    
    #Secondary display crazyness
    #---------------------------
    if(!MainMonitorLoad){
        local O = 0
        
        if(Page == 0 | (Page == 5 & AirBrakePage <= 1) | Page == 7 | Page == 10 | MainPagePort){ #Upper portion stuffs
            #Month, day, year
            O = 1
            E:egpText(O, format("%s %01d, %04d", "JAN", 1, 2020), vec2(3, 3))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 0, 0)
            E:egpColor(O, color("white"))
            
            #Time
            O = 2
            E:egpText(O, (TimeFormat ? "12:00:00 UTC" : "12:00 AM UTC"), vec2(3, 19))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 0, 0)
            E:egpColor(O, color("white"))
            
            #Unit RR and number
            O = 3
            E:egpText(O, format("%s %d", LOCOMOTIVE_IDENT["railroad",string], LOCOMOTIVE_IDENT["number",number]), vec2(509, 3))
            E:egpFont(O, Font_SansSerif, 16)
            E:egpAlign(O, 2, 0)
            E:egpColor(O, color("white"))
        }
    }
    
    
    
    if(!MainMonitorLoad & !PortMainPages){
        switch(Page){ #Page specific loading
            case 0, #Main page
                #Brightness indicator box is in the button definitions
            break
            case 5, #Air brake setup
                switch(AirBrakePage){
                    case 0, #Main page
                        #Label
                        E:egpPageLabelBox(4, vec2(256, 400), "Air Brake Setup")
                        
                        O = 7 #Air brake setup change warn
                        E:egpText(O, "", vec2(10, 420)) #Reverser must be centered to be setup as trail.
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 0, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        #New values
                        O = 8
                        E:egpText(O, "NEW", vec2(32, 445))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("white"))
                        
                        O = 9
                        E:egpText(O, "0 " + (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string]), vec2(96, 445))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("white"))
                        
                        O = 10
                        E:egpText(O, "TRAIL", vec2(160, 445))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("white"))
                        
                        O = 11
                        E:egpText(O, "CUT IN", vec2(224, 445))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("white"))
                        
                        #Current values
                        O = 12
                        E:egpText(O, "CURRENT", vec2(32, 460))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 13
                        E:egpText(O, "0 " + (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string]), vec2(96, 460))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 14
                        E:egpText(O, "TRAIL", vec2(160, 460))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 15
                        E:egpText(O, "CUT IN", vec2(224, 460))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                    break
                    case 1, #EQ res setup
                        #Label
                        E:egpPageLabelBox(4, vec2(256, 400), "EQ Reservoir Setup")
                        
                        O = 7 #Displayed pressure
                        E:egpText(O, "0 " + (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string]), vec2(128, 435))
                        E:egpFont(O, Font_SansSerif, 16)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("white"))
                        
                        O = 8 #Value underline
                        E:egpBox(O, vec2(128, 445), vec2(20, 3))
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 9 #Pointer line (Decrease)
                        E:egpLine(O, vec2(96, 465), vec2(128, 445))
                        E:egpColor(O, color("lightBlue"))
                        E:egpSize(O, 2)
                        
                        O = 10 #Pointer line (Increase)
                        E:egpLine(O, vec2(160, 465), vec2(128, 445))
                        E:egpColor(O, color("lightBlue"))
                        E:egpSize(O, 2)
                        
                    break
                    case 2, #Air brake data
                        O = 1
                        E:egpText(O, "Air Brake Data Remote Session", vec2(256, 2))
                        E:egpAlign(O, 1, 0)
                        E:egpColor(O, color("white"))
                        E:egpFont(O, Font_SansSerif, 16)
                        
                        O = 2
                        E:egpBox(O, vec2(256, 34), vec2(510, 18))
                        E:egpColor(O, color("lightBlue"))
                        
                        O = 3
                        E:egpText(O, "AIR BRAKE MAIN MENU", vec2(256, 34))
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("background"))
                        E:egpFont(O, Font_Monospace, 18)
                        
                        
                        #Content
                        local Lines = table(
                            array("IPM_SYSTEM:", "1669 GETS/CSX (SW# 0800092)"),
                            array("IPM_VERSION:", "02/07/2020 Rev 411"),
                            array("LCC_VERSION:", "?")
                        )
                        for(I = 1, 14){
                            local Index = O + I
                            local Content = Lines[I, array]
                            local ExtraOffset = (I >= 4 ? 36 : 0)
                            E:egpText(Index, format("%-13s%s", Content[1, string], Content[2, string]), vec2(2, 70 + (I-1) * 18 + ExtraOffset))
                            E:egpAlign(Index, 0, 1)
                            E:egpColor(Index, (I <= 3 ? color("lightGreen") : color("white")))
                            E:egpFont(Index, Font_Monospace, 18)
                        }
                    break
                }
            break
            case 7, #EOT ID
                
                if(!EOTIDSetup){ #Main EOTD page
                    #Yes, the label again, you won't get rid of it... ever
                    E:egpPageLabelBox(4, vec2(256, 400), "End of Train Identification")
                    
                    #EOT ID box
                    E:egpBoxLabeled(7, vec2(1, 429), vec2(63, 36), "EOT ID")
                    
                    #Current ID
                    O = 10
                    E:egpText(O, "0", vec2(32, 446))
                    E:egpFont(O, Font_SansSerif, 18)
                    E:egpAlign(O, 1, 1)
                    E:egpColor(O, color("lightBlue"))
                    
                    #EOT Arm state
                    E:egpBoxLabeled(11, vec2(66, 429), vec2(191, 36), "Arm State")
                    
                    #Arm state readout
                    O = 14
                    E:egpText(O, "?", vec2(163, 446))
                    E:egpFont(O, Font_SansSerif, 18)
                    E:egpAlign(O, 1, 1)
                    E:egpColor(O, color("lightGreen"))
                    
                    #EOT ID box
                    E:egpBoxLabeled(15, vec2(321, 429), vec2(63, 36), "Comm Test")
                    
                    #Current ID
                    O = 18
                    E:egpText(O, "-", vec2(352, 446))
                    E:egpFont(O, Font_SansSerif, 18)
                    E:egpAlign(O, 1, 1)
                    E:egpColor(O, color("lightBlue"))

                    break
                }
                
                #Change EOT ID
                E:egpPageLabelBox(4, vec2(256, 400), "Change EOT ID")
            
                O = 7 #EOT ID readout text
                E:egpText(O, format("%01d  %01d  %01d  %01d  %01d", EID1, EID2, EID3, EID4, EID5), vec2(224, 430))
                E:egpFont(O, Font_SansSerif, 18)
                E:egpAlign(O, 1, 1)
                
                #Number underlines
                O = 8
                E:egpBox(O, vec2(192, 438), vec2(11, 2))
                E:egpColor(O, color("lightBlue"))
                
                O = 9
                E:egpBox(O, vec2(208, 438), vec2(11, 2))
                E:egpColor(O, color("lightBlue"))
                
                O = 10
                E:egpBox(O, vec2(224, 438), vec2(11, 2))
                E:egpColor(O, color("lightBlue"))
                
                O = 11
                E:egpBox(O, vec2(240, 438), vec2(11, 2))
                E:egpColor(O, color("lightBlue"))
                
                O = 12
                E:egpBox(O, vec2(256, 438), vec2(11, 2))
                E:egpColor(O, color("lightBlue"))
                
                #Connection lines
                O = 13
                E:egpLine(O, vec2(96, 465), vec2(192, 439))
                E:egpSize(O, 2)
                E:egpColor(O, color("lightBlue"))
                
                O = 14
                E:egpLine(O, vec2(160, 465), vec2(208, 439))
                E:egpSize(O, 2)
                E:egpColor(O, color("lightBlue"))
                
                O = 15
                E:egpLine(O, vec2(224, 465), vec2(224, 439))
                E:egpSize(O, 2)
                E:egpColor(O, color("lightBlue"))
                
                O = 16
                E:egpLine(O, vec2(288, 465), vec2(240, 439))
                E:egpSize(O, 2)
                E:egpColor(O, color("lightBlue"))
                
                O = 17
                E:egpLine(O, vec2(352, 465), vec2(256, 439))
                E:egpSize(O, 2)
                E:egpColor(O, color("lightBlue"))
                
            break
            case 11, #Distributed power operation
                E:egpPageLabelBox(1, vec2(256, 12), "Distributed Power Operation")
                
                O = 4
                O = E:egpCreateWarningIndicator(O, vec2(32, 60), vec2(56, 40), "W. SLIP", color("offDarkBlue"), 10)
                O = E:egpCreateWarningIndicator(O, vec2(95, 60), vec2(56, 40), "PCS", color("offRed"), 10)
                O = E:egpCreateWarningIndicator(O, vec2(158, 60), vec2(56, 40), "SAND", color("offBlue"), 10)
                O = E:egpCreateWarningIndicator(O, vec2(221, 60), vec2(56, 40), "BK WARN", color("offYellow"), 10)
                O = E:egpCreateWarningIndicator(O, vec2(284, 60), vec2(56, 40), "SYSTEM", color("offRed"), 10)
                O = E:egpCreateWarningIndicator(O, vec2(347, 60), vec2(56, 40), "PENALTY", color("offRed"), 10)
                O = E:egpCreateWarningIndicator(O, vec2(410, 60), vec2(56, 40), "ALM. BELL", color("offDarkBlue"), 10)
                O = E:egpCreateWarningIndicator(O, vec2(473, 49), vec2(56, 18), "SYSTEM", color("offDarkBlue"), 0)
                O = E:egpCreateWarningIndicator(O, vec2(473, 71), vec2(56, 18), "ALARM", color("offDarkBlue"), 0)
                
                
                #Distributed power unit listing border box
                O = 24
                E:egpBoxOutline(O, vec2(194, 200), vec2(384, 106))
                E:egpSize(O, 2)
                E:egpColor(O, color("white"))
                
                #DP status
                O = 25
                E:egpButton(O, vec2(36, 130), vec2(63, 20), "IDLE", color("lightBlue"))
                
                
                #DP readout objects
                O = 28 #Labels
                local DPLabels = array("THROTTLE", "LOAD", "CONSIST", "BRAKE PIPE", "FLOW",  "REMOTE", "EQUAILIZING", "CYLINDER", "MAIN RES")
                for(I = 1, 9){
                    local Index = (I-1) + O
                    E:egpText(Index, DPLabels[I, string], vec2(6, 151 + (I-1) * 21))
                    E:egpAlign(Index, 0, 0)
                    E:egpFont(Index, Font_SansSerif, 18)
                    E:egpColor(Index, color("white"))
                }
                
                
                #Individual units
                O = 37
                E:egpLoadDistPowerUnitReadout(O, vec2(140, 151), -1, DISTRIBUTED_POWER_DATA_BUS, 1)
                O = 47
                E:egpLoadDistPowerUnitReadout(O, vec2(210, 151), DistPower_LinkedUnits[1, number], DP_RECEIVED_UNITS, 1)
                O = 57
                E:egpLoadDistPowerUnitReadout(O, vec2(280, 151), DistPower_LinkedUnits[2, number], DP_RECEIVED_UNITS, 2)
                O = 67
                E:egpLoadDistPowerUnitReadout(O, vec2(350, 151), DistPower_LinkedUnits[3, number], DP_RECEIVED_UNITS, 3)
                
                
                #FRONT and BACK labels
                O = 77
                E:egpText(O, "FRONT                                        BACK", vec2(114, 100))
                E:egpFont(O, Font_SansSerif, 18)
                E:egpAlign(O, 0, 0)
                E:egpColor(O, color("white"))
                
                #Fence
                O = 78
                E:egpBox(O, vec2(175, 230), vec2(2, 220))
                E:egpColor(O, color("white"))
                E:egpAlpha(O, 0)
                
                #Remote selection bar
                O = 79
                E:egpBox(O, vec2(210, 265), vec2(64, 18))
                E:egpColor(O, color("lightGreen"))
                E:egpOrder(O, 2)
                E:egpAlpha(O, 0)
                
            break
        }
    }
}
 

#All the button presets on each page
function void wirelink:egpLoadButtons(Page:number, MainMonitorLoad:number, PortMainPages:number){
    E = This
    
    #Main display buttons
    if(MainMonitorLoad | PortMainPages){
        switch(Page){
            case 0, #Main page
                switch(MoreChoicesMain){
                    case 0,
                        E:egpButton(250, vec2(224, 490), vec2(63, 40), "Consist   Monitor", color("lightBlue"))
                        E:egpButton(253, vec2(288, 490), vec2(63, 40), "Crew  Message", color("lightBlue"))
                        E:egpButton(256, vec2(480, 490), vec2(63, 40), "More Choices", color("lightGreen"))
                        
                    break
                    case 1,
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "Brighter", color("offBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "Dimmer", color("lightBlue"))
                        E:egpButton(256, vec2(224, 490), vec2(63, 40), "Operator   Controls", color("lightBlue"))
                        E:egpButton(259, vec2(352, 490), vec2(63, 40), "Length   Counter", color("lightBlue"))
                        E:egpButton(262, vec2(480, 490), vec2(63, 40), "More Choices", color("lightGreen"))
                        
                    break
                    case 2,
                        E:egpButton(250, vec2(96, 490), vec2(63, 40), "Distributed  Power", color("lightBlue"))
                        E:egpButton(253, vec2(352, 490), vec2(63, 40), "Locomotive  Monitor", color("lightBlue"))
                        E:egpButton(256, vec2(416, 490), vec2(63, 40), "Maint    Mode", color("lightBlue"))
                        E:egpButton(259, vec2(480, 490), vec2(63, 40), "More Choices", color("lightGreen"))
                        
                    break
                }
                
            break
            case 1, #Consist monitor
                E:egpButton(250, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                
            break
            case 3, #Operator controls
                switch(OPControlsPage){
                    case 0, #Main page
                        E:egpButton(250, vec2(96, 490), vec2(63, 40), "Alarm Bell Silence", color("offBlue"))
                        E:egpButton(253, vec2(160, 490), vec2(63, 40), "Climate   Control", color("lightBlue"))
                        E:egpButton(256, vec2(224, 490), vec2(63, 40), "Display    Setup", color("lightBlue"))
                        E:egpButton(259, vec2(416, 490), vec2(63, 40), "Rail    Conditioner", color("lightBlue"))
                        E:egpButton(262, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                        for(I = 1, 3){
                            E:egpRemove(I + 264)
                        }
                        
                    break
                    case 1, #Climate control page
                        E:egpButton(250, vec2(416, 490), vec2(63, 40), "Defogger", color("lightBlue"))
                        E:egpButton(253, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                        
                    break
                    case 2, #Display setup page
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "Brighter", color("offBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "Dimmer", color("lightBlue"))
                        E:egpButton(256, vec2(160, 490), vec2(63, 40), "Engineer's  Combined", color("offBlue"))
                        E:egpButton(259, vec2(224, 490), vec2(63, 40), "Engineer's   Primary", color("offBlue"))
                        E:egpButton(262, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                        E:egpButton(265, vec2(416, 490), vec2(63, 40), "Change    Units", color("lightBlue"))
                        
                    break
                }
            break
            case 4, #Length counter
                switch(LengthCounterPage){
                    case 0, #Main page
                        E:egpButton(250, vec2(96, 490), vec2(63, 40), "Change   Length", color("lightBlue"))
                        E:egpButton(256, vec2(224, 490), vec2(63, 40), "Countdown  Length", color("lightBlue"))
                        E:egpButton(259, vec2(352, 490), vec2(63, 40), "Mesaured   Mile", color("lightBlue"))
                        E:egpButton(262, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                        
                    break
                    case 1, #Change length page
                        switch(LengthChangePage){
                            case 0, #Main length change page
                                E:egpButton(250, vec2(160, 490), vec2(63, 40), "Measure   Length", color("lightBlue"))
                                E:egpButton(253, vec2(288, 490), vec2(63, 40), "Enter     Length", color("lightBlue"))
                                E:egpButton(256, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                                
                            break
                            case 1, #Measure length
                                if(!MeasureLengthFinished){
                                    E:egpButton(250, vec2(32, 490), vec2(63, 40), "Cancel", color("lightBlue"))
                                    E:egpButton(253, vec2(160, 490), vec2(63, 40), (MeasuringLength ? "Stop      Measure" : "Start      Measure"), (MeasuringLength ? color("onYellow") : color("lightBlue")))
                                    E:egpButton(256, vec2(480, 490), vec2(63, 40), "Exit, Count Conitnues", color("lightBlue"))
                                }else{
                                    E:egpButton(250, vec2(288, 490), vec2(63, 40), "Accept    Length", (!MeasuredLTooShort ? color("onYellow") : color("offYellow")))
                                    E:egpButton(253, vec2(416, 490), vec2(63, 40), "Reject    Length", color("onYellow"))
                                }
                                                                                
                            break
                            case 2, #Enter length
                                E:egpButton(250, vec2(32, 490), vec2(63, 40), "Cancel", color("lightBlue"))
                                E:egpButton(253, vec2(96, 490), vec2(63, 40), "", color("lightBlue"))
                                E:egpButton(256, vec2(160, 490), vec2(63, 40), "", color("lightBlue"))
                                E:egpButton(259, vec2(224, 490), vec2(63, 40), "", color("lightBlue"))
                                E:egpButton(262, vec2(288, 490), vec2(63, 40), "", color("lightBlue"))
                                E:egpButton(265, vec2(352, 490), vec2(63, 40), "", color("lightBlue"))
                                E:egpButton(268, vec2(480, 490), vec2(63, 40), "Enter", color("offBlue"))
                                
                            break
                        }
                    break
                    case 2, #Length countdown page
                        E:egpButton(250, vec2(288, 490), vec2(63, 40), "Count     Down", color("lightPurple"))
                        E:egpButton(253, vec2(416, 490), vec2(63, 40), "Reset    Counter", color("lightBlue"))
                        E:egpButton(256, vec2(480, 490), vec2(63, 40), "Exit, Count Conitnues", color("lightBlue"))
                                                                            
                    break
                    case 3, #Measure mile page
                        if(!MeasuredMileRun & !MMFinished){
                            for(I = 1, 6){ #Yeet the previous buttons
                                E:egpRemove(I + 249)
                            }
                            E:egpButton(250, vec2(96, 490), vec2(63, 40), "Start     Timer", color("lightBlue"))
                        }
                        
                        if(MeasuredMileRun | MMFinished){
                            if(!MMFinished){
                                E:egpButton(250, vec2(288, 490), vec2(63, 40), "Stop      Timer", color("onYellow"))
                            }else{
                                for(I = 1, 3){ #YEET the yellow button with extreme force
                                    E:egpRemove(I + 249)
                                }
                            }
                            E:egpButton(253, vec2(416, 490), vec2(63, 40), "Reset     Timer", color("lightBlue"))
                        }
                        
                        E:egpButton(256, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                        
                    break
                }
            break
            case 5, #Distributed power
                switch(DistributedPowerPage){
                    case 0, #Main menu
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "LEAD\nSETUP", color("lightBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "REMOTE\nSETUP", color("lightBlue"))
                        E:egpButton(256, vec2(416, 490), vec2(63, 40), "MAINT\nMENU", color("offBlue"))
                        E:egpButton(259, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                    break
                    case 1, #LEAD SETUP
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "COUNT\nUP", color("lightBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "COUNT\nDOWN", color("lightBlue"))
                        E:egpButton(256, vec2(160, 490), vec2(63, 40), "DIGIT\nLEFT", color("lightBlue"))
                        E:egpButton(259, vec2(224, 490), vec2(63, 40), "DIGIT\nRIGHT", color("lightBlue"))
                        E:egpButton(262, vec2(288, 490), vec2(63, 40), "LINK", color("offGreen"))
                        E:egpButton(265, vec2(352, 490), vec2(63, 40), "ACCEPT", color("offPurple"))
                        E:egpButton(269, vec2(416, 490), vec2(63, 40), "UNLINK", color("lightPurple"))
                        E:egpButton(272, vec2(480, 490), vec2(63, 40), "Exit", color("onYellow"))
                    break
                    case 2, #REMOTE SETUP
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "COUNT\nUP", color("lightBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "COUNT\nDOWN", color("lightBlue"))
                        E:egpButton(256, vec2(160, 490), vec2(63, 40), "DIGIT\nLEFT", color("lightBlue"))
                        E:egpButton(259, vec2(224, 490), vec2(63, 40), "DIGIT\nRIGHT", color("lightBlue"))
                        E:egpButton(262, vec2(288, 490), vec2(63, 40), "OPPOSITE\nDIRN", color("lightBlue"))
                        E:egpButton(265, vec2(352, 490), vec2(63, 40), "ACCEPT", color("lightGreen"))
                        E:egpButton(269, vec2(480, 490), vec2(63, 40), "Exit", color("onYellow"))
                    break
                    case 3, #Main menu - DP enabled LEAD
                        E:egpButton(250, vec2(160, 490), vec2(63, 40), "TRAIN\nCONFIG", color("lightBlue"))
                        E:egpButton(253, vec2(224, 490), vec2(63, 40), "SYSTEM", color("offBlue"))
                        E:egpButton(256, vec2(288, 490), vec2(63, 40), "MODE", color("offBlue"))
                        E:egpButton(259, vec2(352, 490), vec2(63, 40), "MAINT\nMODE", color("offBlue"))
                        E:egpButton(262, vec2(416, 490), vec2(63, 40), "END DIST\nPWR", color("lightPurple"))
                        E:egpButton(265, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue")) 
                    break
                    case 4, #Main menu - DP enabled REMOTE
                        E:egpButton(250, vec2(224, 490), vec2(63, 40), "SYSTEM", color("offBlue"))
                        E:egpButton(253, vec2(352, 490), vec2(63, 40), "MAINT\nMODE", color("offBlue"))
                        E:egpButton(256, vec2(416, 490), vec2(63, 40), "END DIST\nPWR", color("lightPurple"))
                        E:egpButton(259, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue")) 
                    break
                }
            break
        }
    }
    
    
    #Secondary display button presets
    if(!MainMonitorLoad & !PortMainPages){
        switch(Page){
            case 0, #Main page
                switch(MoreChoicesSec){
                    case 0, #More ops. 1
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "Brighter", color("offBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "Dimmer", color("lightBlue"))
                        E:egpButton(256, vec2(160, 490), vec2(63, 40), "Locomotive Data", color("lightBlue"))
                        E:egpButton(259, vec2(224, 490), vec2(63, 40), "Operator Controls", color("offBlue"))
                        E:egpButton(262, vec2(288, 490), vec2(63, 40), "Speed Control", color("lightBlue"))
                        E:egpButton(265, vec2(352, 490), vec2(63, 40), "Length Counter", color("lightBlue"))
                        E:egpButton(268, vec2(416, 490), vec2(63, 40), "Air\nBrake", color("lightBlue"))
                        E:egpButton(271, vec2(480, 490), vec2(63, 40), "More Choices", color("lightGreen"))
                        
                        #Brightness % box
                        local O = 4
                        E:egpBoxLabeled(O, vec2(1, 429), vec2(127, 36), "Screen Brightness")
                        
                        #Brightness % text
                        O = 7
                        E:egpTextLayout(O, "100%", vec2(64, 448), vec2(128, 40))
                        E:egpFont(O, Font_SansSerif, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, color("lightBlue"))
                        
                    break
                    case 1, #More ops. 2
                        for(I = 1, 6){ #This is just so that the last two buttons get removed
                            E:egpRemove(274 - I)
                        }
                        E:egpButton(250, vec2(160, 490), vec2(63, 40), "Event\nInfo", color("lightBlue"))
                        E:egpButton(253, vec2(224, 490), vec2(63, 40), "EOT ID", color("lightBlue"))
                        E:egpButton(256, vec2(288, 490), vec2(63, 40), "Cab\nSignals", color("lightBlue"))
                        E:egpButton(259, vec2(352, 490), vec2(63, 40), "Locomotive Monitor", color("lightBlue"))
                        E:egpButton(262, vec2(416, 490), vec2(63, 40), "Maint\nMode", color("lightBlue"))
                        E:egpButton(265, vec2(480, 490), vec2(63, 40), "More Choices", color("lightGreen"))
                        
                        for(I = 4, 7){ #This removes the current brightness indicator box
                            E:egpRemove(I)
                        }
                    break
                    case 2, #More ops. 3
                        E:egpButton(250, vec2(160, 490), vec2(63, 40), "Work\nOrders", color("lightBlue"))
                        E:egpButton(253, vec2(224, 490), vec2(63, 40), "Consist\nMonitor", color("lightBlue"))
                        E:egpButton(256, vec2(288, 490), vec2(63, 40), "Crew\nMessage", color("lightBlue"))
                        E:egpButton(259, vec2(352, 490), vec2(63, 40), "Dist Power\nOperation", color((DistPower_LocalEnable == 1) & DistPower_LinkedUnits:count() ? "lightBlue" : "offBlue"))
                        E:egpButton(262, vec2(416, 490), vec2(63, 40), "Smart\nConsist", color("lightBlue"))
                        E:egpButton(265, vec2(480, 490), vec2(63, 40), "More Choices", color("lightGreen"))
                        
                    break
                }
                
            break
            case 5, #Air brake setup
                switch(AirBrakePage){
                    case 0, #Main page
                        local Color = color("lightBlue")
                        if(ABLockout){
                            Color = color("offBlue")
                        }
                        
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "Cancel", color("lightBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "EQ Res\nSet Up", Color)
                        E:egpButton(256, vec2(160, 490), vec2(63, 40), "Lead\nTrail", Color)
                        E:egpButton(259, vec2(224, 490), vec2(63, 40), "Cut In\nCut Out", Color)
                        E:egpButton(262, vec2(352, 490), vec2(63, 40), "Air Brake\nData", color("lightBlue"))
                        E:egpButton(265, vec2(416, 490), vec2(63, 40), "Accept\nNew", Color)
                    break
                    case 1, #EQ setup
                        local PSIMult = (Units ? UNIT_DATA["M_kPa", number] : 1)
                        local PresUnits = (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "Cancel", color("lightBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "DECREASE", color("lightBlue"))
                        E:egpButton(256, vec2(160, 490), vec2(63, 40), "INCREASE", color("lightBlue"))
                        E:egpButton(259, vec2(224, 490), vec2(63, 40), format("%.0f %s", 80 * PSIMult, PresUnits), color("lightBlue"))
                        E:egpButton(262, vec2(288, 490), vec2(63, 40), format("%.0f %s", 90 * PSIMult, PresUnits), color("lightBlue"))
                        E:egpButton(265, vec2(352, 490), vec2(63, 40), format("%.0f %s", 100 * PSIMult, PresUnits), color("lightBlue"))
                        E:egpButton(268, vec2(416, 490), vec2(63, 40), format("%.0f %s", 110 * PSIMult, PresUnits), color("lightBlue"))
                        E:egpButton(271, vec2(480, 490), vec2(63, 40), "Enter", color("lightBlue"))
                    break
                    case 2, #Air brake data
                        E:egpButton(250, vec2(32, 490), vec2(63, 40), "SELF\nTEST", color("offBlue"))
                        E:egpButton(253, vec2(96, 490), vec2(63, 40), "EVENT\nLOG", color("offBlue"))
                        E:egpButton(256, vec2(160, 490), vec2(63, 40), "FAULT\nSUM", color("offBlue"))
                        E:egpButton(259, vec2(224, 490), vec2(63, 40), "FLOW\nCAL", color("offBlue"))
                        E:egpButton(262, vec2(288, 490), vec2(63, 40), "GAUGE\nCAL", color("offBlue"))
                        E:egpButton(265, vec2(352, 490), vec2(63, 40), "CONTROL\nCAL", color("offBlue"))
                        E:egpButton(271, vec2(480, 490), vec2(63, 40), "EXIT\nSESSION", color("lightBlue"))
                        
                    break
                }
                
            break
            case 7, #EOT ID
                if(!EOTIDSetup){
                    E:egpButton(250, vec2(32, 490), vec2(63, 40), "Change     EOT ID", color("lightBlue"))
                    E:egpButton(253, vec2(96, 490), vec2(63, 40), "Arm        EOT", color("offBlue"))
                    E:egpButton(256, vec2(160, 490), vec2(63, 40), "Disarm     EOT", color("offBlue"))
                    E:egpButton(259, vec2(224, 490), vec2(63, 40), "EOT ID    00000", color("lightBlue"))
                    E:egpButton(265, vec2(352, 490), vec2(63, 40), "Comm       Test", color("lightBlue"))
                    E:egpButton(268, vec2(480, 490), vec2(63, 40), "Exit", color("lightBlue"))
                    
                }else{
                    E:egpButton(250, vec2(32, 490), vec2(63, 40), "Cancel", color("lightBlue"))
                    E:egpButton(253, vec2(96, 490), vec2(63, 40), "", color("lightBlue"))
                    E:egpButton(256, vec2(160, 490), vec2(63, 40), "", color("lightBlue"))
                    E:egpButton(259, vec2(224, 490), vec2(63, 40), "", color("lightBlue"))
                    E:egpButton(262, vec2(288, 490), vec2(63, 40), "", color("lightBlue"))
                    E:egpButton(265, vec2(352, 490), vec2(63, 40), "", color("lightBlue"))
                    E:egpButton(268, vec2(416, 490), vec2(63, 40), "Enter", color("lightBlue"))
                }
                
            break
            case 11, #Distributed power operation
                E:egpButton(253, vec2(96, 490), vec2(63, 40), "Move\nBack", color("lightBlue"))
                E:egpButton(265, vec2(352, 490), vec2(63, 40), (DPOperation_RemoteMode ? "Isolate" : "Remote\nSand"), color("lightBlue"))
                E:egpButton(268, vec2(416, 490), vec2(63, 40), "Exit", color("lightBlue"))
                E:egpButton(271, vec2(480, 490), vec2(63, 40), (DPOperation_RemoteMode ? "Control\nMenu" : "Remote\nMenu"), color("lightGreen"))
                
                if(DPOperation_RemoteMode){ #Remote mode
                    E:egpButton(250, vec2(32, 490), vec2(63, 40), "Move\nForward", color("lightBlue"))
                    E:egpButton(256, vec2(160, 490), vec2(63, 40), "Normal", color("lightBlue"))
                    E:egpButton(259, vec2(224, 490), vec2(63, 40), "Idle", color("lightBlue"))
                    E:egpButton(262, vec2(288, 490), vec2(63, 40), "Set-out", color("lightBlue"))
                    
                }elseif(DPOperation_BackIndex > 0){ #Move back mode
                    E:egpButton(250, vec2(32, 490), vec2(63, 40), "Move\nForward", color("lightBlue"))
                    E:egpButton(256, vec2(160, 490), vec2(63, 40), "More\nPower", color("lightBlue"))
                    E:egpButton(259, vec2(224, 490), vec2(63, 40), "Idle", color("lightBlue"))
                    E:egpButton(262, vec2(288, 490), vec2(63, 40), "More\nBrake", color("lightBlue"))
                    
                }else{ #Clearing the unused buttons
                    local ClearList = array(250, 256, 259, 262)
                    foreach(_:number,Index:number = ClearList){
                        E:egpRemove(Index)
                        E:egpRemove(Index+1)
                        E:egpRemove(Index+2)
                    }
                }
            break
        }
    }
}


#Updates whatever is displayed
function void wirelink:egpUpdate(Page:number, MainMonitorLoad:number, PortMainPages:number){
    local E = This
    
    #Time - Inception (11/10 film, would recommend)
    SystemDate = getTimezoneEpochDate(Timezone)
    
    
    #----Main page updating
    if(MainMonitorLoad){
        #Unit changing
        #Driven distance
        E:egpSetText(1, format("%.0f " + (Units ? UNIT_DATA["km", string] : UNIT_DATA["mi", string]), DrivenDistMI * (Units ? UNIT_DATA["M_km", number] : 1)))
        E:egpSetText(2, format("%s %d", LOCOMOTIVE_IDENT["railroad",string], LOCOMOTIVE_IDENT["number",number]))
        
        E:egpSetText(3, getDateString(SystemDate))
        E:egpSetText(4, getTimeString(SystemDate, TimeFormat))
        
        #All of the unit changing
        local SpeedMult = (Units ? UNIT_DATA["M_km", number] : 1)
        if(UpdateUnits){
            #Analog speedo
            E:egpSetText(59, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.125))
            E:egpSetText(60, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.25))
            E:egpSetText(61, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.375))
            E:egpSetText(62, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.5))
            E:egpSetText(63, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.625))
            E:egpSetText(64, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.75))
            E:egpSetText(65, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.875))
            E:egpSetText(66, format("%.0f", MaxSpeedoVelocity * SpeedMult))
            
            
            #Digital speedo
            local SpeedUnit = (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string])
            E:egpSetText(108, SpeedUnit)
            
            #Accelerometer
            E:egpSetText(110, SpeedUnit)
            
            #Length
            E:egpSetText(114, (Units ? UNIT_DATA["m", string] : UNIT_DATA["ft", string]))
            
            #Tractive effort
            E:egpSetText(119, (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string]))
            if(!SetToAmps){
                E:egpSetText(121, (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string]))
            }
        }
        
        
        #All of the brake values
        local PresFormat = "%.0f"
        local PresMult = (Units ? UNIT_DATA["M_kPa", number] : 1)
        if(!BrakePanelYeet){
            E:egpSetText(101, format(PresFormat, EqualRes * PresMult))
            E:egpSetText(102, format(PresFormat, BrakePipe * PresMult))
            E:egpSetText(104, format(PresFormat, AirFlow * (Units ? UNIT_DATA["M_L/sec", number] : 1)))
            E:egpSetText(105, format(PresFormat, MainRes * PresMult))
            if(MainRes > 100){
                E:egpColor(105, color("lightGreen"))
            }else{
                E:egpColor(105, color("lightRed"))
            }
            E:egpSetText(106, format(PresFormat, BrakeCyl * PresMult))
        }
        
        if(EOTDArmed){
            E:egpSetText(103, format(PresFormat, RearPres * PresMult))
        }else{
            E:egpSetText(103, "?")
        }
        
        
        #Speedometer updating
        E:egpAngle(67, vec2(256, 90), vec2(-36, 0), clamp(46 - (MPH / MaxSpeedoVelocity) * 271, -225, 46)) #The needle
        local MPH_A = abs(MPH * SpeedMult)
        E:egpSetText(107, decForm(MPH_A, 10, 1, 0))
        
        
        #Acceleration
        E:egpSetText(109, format("%.0f", (Units ? UNIT_DATA["M_km", number] * Accel : Accel)))
        
        #Length
        E:egpSetText(113, format("%.0f", (Units ? UNIT_DATA["M_m", number] * ConsistLength : ConsistLength)))
        
        #Reverser position
        E:egpSetText(115, select(Reverser + 2, "Reverse", "Center", "Forward"))
        
        
        #Consist effort unit ratio, power status and consist effort
        ConsistPowerStat = ""
        ConsistEffort = 0
        local CTECol = (ConsistPowerStat == "D" ? color("onYellow") : color("lightGreen"))
        E:egpSetText(116, format("%01d:%01d", 0,0))#ConsistUnitsCapable, ConsistUnitsTotal)) #Ratio
        
        E:egpSetText(117, "")#ConsistPowerStat) #Power status
        E:egpColor(117, CTECol)
        E:egpSetText(118, format("%.0f", ConsistEffort * (Units ? UNIT_DATA["M_N", number] : 1)))
        E:egpColor(118, CTECol)
        E:egpColor(119, CTECol) #Changes the color of the units
        
        
        #Changing between TE/Amps readout
        local TECol = (Dynamics ? color("onYellow") : color("lightGreen"))
        if(!SetToAmps){
            E:egpSetText(120, format("%.0f", TractiveEffort * (Units ? UNIT_DATA["M_N", number] : 1) / 1000))
        }else{
            E:egpSetText(120, format("%.0f", abs(TMCurrent)))
            E:egpSetText(121, "A")
        }
        E:egpColor(120, TECol)
        E:egpColor(121, TECol)
        
        #TE readout box scale and text updating
        E:egpBoxLabeled(81, vec2(335, 100), vec2(114, 30), (SetToAmps ? "Amps" : (Dynamics ? "Dynamic Brake Effort" : "Tractive Effort")))
        
        #TE number axis updating based on mode
        local MaxTE_Actual = (Dynamics ? MaxTE * (MaxDynCurrent / MaxTMCurrent) : MaxTE) #This calculates the "approximate" max tractive effort for dynamics
        local MaxContTE_Actual = (Dynamics ? MaxContTE * (MaxContDynCurrent / MaxTMCurrent) : MaxContTE)
        local MaxCurrent_Act = (Dynamics ? MaxDynCurrent : MaxTMCurrent)
        local MaxContCurrent_Act = (Dynamics ? MaxContDynCurrent : MaxContTMCurrent)
        local ActualDiff = (SetToAmps ? (MaxContCurrent_Act / MaxCurrent_Act) : (MaxContTE_Actual / MaxTE_Actual))
        
        #Updating axis scale
        if(UpdateUnits){
            E:egpBox(87, vec2(round(345 + (ActualDiff * 150) / 2,0), 146), vec2(round(ActualDiff * 150 + 1,0), 3)) #White section
            E:egpBox(88, vec2(round((345 + (ActualDiff * 150)) + (150 - ActualDiff * 150) / 2,0), 146), vec2(round(150 - ActualDiff * 150,0) + 1, 3)) #Yellow section
            
            #Also changes the label of the throttle position indicator box
            E:egpBoxLabeled(84, vec2(453, 70), vec2(55, 60), (Dynamics ? "DB Handle" : "TH Handle"))
        }
        
        #Updating axis numbers and colors
        for(I = 1, 5){
            local Izero = (I - 1)
            local Index = (Izero * 2 + 89)
            E:egpSetText(Index + 1, format("%.0f", (SetToAmps ? MaxCurrent_Act : MaxTE_Actual * (Units ? UNIT_DATA["M_N", number] : 1)) * (Izero / 4)))
            
            E:egpColor(Index, (ActualDiff <= (Izero / 4) ? color("onYellow") : vec(255)))
            E:egpColor(Index + 1, (ActualDiff <= (Izero / 4) ? color("onYellow") : vec(255)))
        }
        
        #TE needle movement
        local TE_NeedlePos = 0
        if(SetToAmps){
            TE_NeedlePos = clamp(abs(TMCurrent) / MaxCurrent_Act * 150, 0, 150)
        }else{
            TE_NeedlePos = clamp((TractiveEffort / 1000) / MaxTE_Actual * 150, 0, 150)
        }
        E:egpTriangle(99, vec2(340 + TE_NeedlePos, 154), vec2(350 + TE_NeedlePos, 154), vec2(345 + TE_NeedlePos, 148))
        E:egpColor(99, TECol)
        
        E:egpBox(100, vec2(345 + TE_NeedlePos / 2, 156), vec2(11 + TE_NeedlePos, 4)) #690 + NeedlePos / 2, 22 + NeedlePos
        E:egpColor(100, TECol)
        
        #Throttle indicator
        if(Dynamics){
            E:egpColor(122, color("onYellow"))
            E:egpSetText(122, !DynaBrakeNotch ? "Set" : format("D %.0f", DynaBrakeNotch))
        }else{
            E:egpColor(122, color("lightGreen"))
            E:egpSetText(122, Throttle <= 0 ? "Idle" : format("N %.0f", Notch))
        }
        
        
        #Warning indicators
        E:egpColor(125, (WheelSlip ? color("onWhite") : color("offWhite")))
        E:egpColor(127, (PCSOpen ? color("onRed") : color("offRed")))
        E:egpColor(129, (DynBrakeWarn ? color("onYellow") : color("offYellow")))
        E:egpColor(131, (LoadShed ? color("onYellow") : color("offYellow")))
        E:egpColor(133, (AlerterBlink ? color("onRed") : color("offRed")))
        E:egpSetText(134, format("ALERT\n%.0f", AlerterTime))
        E:egpColor(135, (UnitAlarm ? color("onYellow") : color("offYellow")))
        E:egpColor(139, (EOTMove ? color("onWhite") : color("offWhite")))
        #----End of that
        
        
        local LoadStyle = shouldLoadLowerMainContent()
        if(LoadStyle){
            #Other indicators
            E:egpColor(141, switchColor(Horn, color("offBlue"), color("lightBlue"))) #This doesn't work for whatever reason
            E:egpColor(142, switchColor(Horn, color("offBlue"), color("lightBlue")))
            
            E:egpColor(143, switchColor(Bell, color("offBlue"), color("lightBlue")))
            E:egpColor(144, switchColor(Bell, color("offBlue"), color("lightBlue")))
            
            E:egpColor(145, switchColor(Sanding, color("offYellow"), color("onYellow")))
            E:egpColor(146, switchColor(Sanding, color("offYellow"), color("onYellow")))
            
            E:egpColor(147, switchColor(LowFuel, color("offYellow"), color("onYellow")))
            E:egpColor(148, switchColor(LowFuel, color("offYellow"), color("onYellow")))
            E:egpColor(149, switchColor(LowFuel, color("offYellow"), color("onYellow")))
            E:egpColor(150, switchColor(LowFuel, color("offYellow"), color("onYellow")))
            
            
            #Cab signals (yup, they're here now)
            #CCS Mode readout
            E:egpSetText(161, (CS_CCSMode ? "CUT IN" : "CUT OUT"))
            
            if(CS_Operative){
                #Time to penalty
                E:egpSetText(159, format("%.0f Seconds", max(CS_PenaltyLength - CS_PenaltyElapsed, 0)))
                
                #CS INOPERATIVE warning going off (comes on when the cab signals circuit breaker is off)
                E:egpAlpha(164, 0)
                E:egpAlpha(165, 0)
                
                #Cab signal indicators
                E:egpAlpha(168, (CS_CCSState == 1) * 255) #Green
                E:egpAlpha(169, (CS_CCSState == 2) * 255) #Green/Yellow
                E:egpAlpha(170, (CS_CCSState == 2) * 255)
                E:egpAlpha(171, (CS_CCSState == 3) * 255) #Yellow
                E:egpAlpha(172, (CS_CCSState == 4) * 255) #Yellow/Red
                E:egpAlpha(173, (CS_CCSState == 4) * 255)
                E:egpAlpha(174, CS_Movement * 255) #Movement indicator
                
            }else{
                #Setting the elapsed time to 0
                E:egpSetText(159, "0 Seconds")
                
                #Turning on 'CS INOPERATIVE' indicator
                E:egpAlpha(164, 255)
                E:egpAlpha(165, 255)
                
                #Turning off all the column indicators
                for(I = 168, 174){
                    E:egpAlpha(I, 0)
                }
            }
        }
        
        #Remote session content gap
        if(LoadStyle == 1){
            #Fuel quantity
            if(->FuelLevel){
                E:egpSetText(152, format("%.0f " + (Units ? UNIT_DATA["L", string] : UNIT_DATA["Gal", string]), FuelLevel * (Units ? UNIT_DATA["M_L", number] : 1 )))
            }else{
                E:egpSetText(152, "? " + (Units ? UNIT_DATA["L", string] : UNIT_DATA["Gal", string]))
            }
            
            
            #Brake setup indication
            if(BrakePipeCutin){
                E:egpSetText(154, "LEAD - " + (MU2AValveCutIn ? "CUT IN" : "CUT OUT"))
            }else{
                E:egpSetText(154, "TRAILING")
            }
            
            
            #IDENT readout
            if(EOTDSetID != 0){
                E:egpSetText(156, format("IDENT %05d", EOTDSetID))
            }else{
                E:egpSetText(156, "IDENT 0")
            }
            
            
            #DP enabled indication
            E:egpSetText(175, (DistPower_LocalEnable == -1 ? "DP REMOTE ENABLED" : DistPower_LocalEnable == 1 ? "DP LEAD ENABLED" : ""))
        }
    }
    
    
    if(MainMonitorLoad | PortMainPages){    
        switch(Page){ #Page specific updating
            case 0, #General page
                E:egpCreateSingleMessageBox(247, vec2(256, 449), color("onYellow"), table())
                
            break
            case 1, #Consist monitor
                local TEUnits = (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string])
                local TEMult = (Units ? UNIT_DATA["M_N", number] : 1)
                
                E:egpUpdateConsistMonitorField(194, 1, CONSIST_MONITOR_DATA, TEMult, TEUnits) #Unit 1 ID, mode and effort
                E:egpUpdateConsistMonitorField(199, 2, CONSIST_MONITOR_DATA, TEMult, TEUnits) #Unit 2
                E:egpUpdateConsistMonitorField(204, 3, CONSIST_MONITOR_DATA, TEMult, TEUnits) #etc.
                E:egpUpdateConsistMonitorField(209, 4, CONSIST_MONITOR_DATA, TEMult, TEUnits)
                
            break
            case 3, #Operator controls
                switch(OPControlsPage){
                    case 0, #Main page
                        E:egpSetText(196, (RailConditioner ? "Auto" : "Off"))
                        
                    break
                    case 1, #Climate control page
                        E:egpSetText(196, (DefoggerOn ? "On" : "Off"))
                        
                    break
                    case 2, #Display setup page
                        E:egpSetText(196, format("%.0f%s", Brightness * 100, "%"))
                        E:egpSetText(204, (Units ? "Metric" : "Imper."))
                        
                    break
                }
            break
            case 4, #Length counter
                local LUnits = (Units ? "Meters" : "Feet")
                local LUnitMult = (Units ? UNIT_DATA["M_m", number] : 1)
                
                switch(LengthCounterPage){
                    case 1, #Length change page
                        switch(LengthChangePage){
                            case 1, #Mesaure length
                                if(!MeasureLengthFinished){
                                    E:egpSetText(193, format("%.0f", MeasuredLength * LUnitMult))
                                    E:egpSetText(194, LUnits)
                                    
                                }else{
                                    #Length too short thing
                                    E:egpSetText(193, (MeasuredLTooShort ? "The measured length is too short!" : format("Mesaured length: %.0f %s", MeasuredLength * LUnitMult, LUnits)))
                                    E:egpSetText(194, format("The previous length was %.0f %s", ConsistLength * LUnitMult, LUnits))
                                }
                                
                            break
                            case 2, #Enter length
                                E:egpSetText(193, format("%01d  %01d  %01d  %01d  %01d", IL1, IL2, IL3, IL4, IL5))
                                E:egpSetText(194, format("%s", (Units ? "Meters" : "Feet")))
                                                                    
                            break
                        }
                    break
                    case 2, #Length countdown
                        E:egpSetText(193, format("%.0f", CountdownLength * LUnitMult))
                        E:egpSetText(194, LUnits)
                        
                    break
                    case 3, #Measured mile
                        local SPUnit = (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string])
                        local SPMult = (Units ? UNIT_DATA["M_km", number] : 1)
                        
                        #Elapsed time readout
                        local Minutes = floor(MMTimeElapsed / 60, 0)
                        E:egpSetText(194, format("%02d:%02d", Minutes, round(MMTimeElapsed, 0) - Minutes * 60))
                        
                        if(MeasuredMileRun | MMFinished){
                            E:egpSetText(192, "Measured Mile - In Progress")
                        }else{
                            E:egpSetText(192, "Measured Mile")
                        }
                        
                        #Speed check conclusion
                        if(MMFinished){
                            E:egpSetText(195, "Average Speed for Measured Mile")
                            
                            if(MMCheckFailed){
                                E:egpSetText(196, "Speed Check Invalid!")
                            }else{
                                E:egpSetText(196, format("%.0f %s", MMAverageSpeed * SPMult, SPUnit))
                            }
                        }else{
                            E:egpSetText(195, "")
                            E:egpSetText(196, "")
                        }
                                                    
                    break
                        
                }
            break
            case 5, #Distributed power page
                switch(DistributedPowerPage){
                    case 0,
                    break
                    case 1, #LEAD SETUP
                        O = 179
                        E:egpDPUnitIDSelector(O, vec2(3, 240 + DistPower_LinkedUnits:count() * 17), format("   %-13s- ", (DP_SetupUnlinkMode ? "Unlink unit" : "Link to unit")), DP_SetupSelectedDigit, DP_SetupUnitID:concat())
                        
                        O = 185
                        for(I = 1, 3){
                            local LinkedUnitID = DistPower_LinkedUnits[I, number]
                            local EGPIndex = I-1 + O
                            
                            if(!LinkedUnitID){
                                E:egpSetText(EGPIndex, "")
                                continue
                            }
                            local LinkSuccessful = DP_RECEIVED_UNITS:exists(LinkedUnitID) & (DP_RECEIVED_UNITS[LinkedUnitID, table]["remote", string] != "COMM")
                            E:egpSetText(EGPIndex, format("   %-13s- %04d - %s", "Linked unit", LinkedUnitID, (LinkSuccessful ? "Linked OK" : "LINK FAILED")))
                        }
                        
                    break
                    case 2, #REMOTE SETUP
                        O = 179
                        E:egpDPUnitIDSelector(O, vec2(3, 240), format("   %-13s- ", "Link to unit"), DP_SetupSelectedDigit, DP_SetupUnitID:concat())
                        
                        O = 185
                        E:egpSetText(O, format("   %-13s- %s", "Direction", (DP_RemoteTravelDir ? "OPPOS to lead" : "SAME as lead")))
                        
                    break
                }
            break
        }
    }
    #----End of main screen shits
    
    
    
    
    #----Secondary page hell
    if(!MainMonitorLoad){
        if(Page == 0 | (Page == 5 & AirBrakePage <= 1) | Page == 7 | Page == 10 | MainPagePort){
            #Date setting
            E:egpSetText(1, getDateString(SystemDate))
            E:egpSetText(2, getTimeString(SystemDate, TimeFormat))
            
            E:egpSetText(3, format("%s %d", LOCOMOTIVE_IDENT["railroad",string], LOCOMOTIVE_IDENT["number",number]))
        }
    }
    
    
    #The real shit
    if(!MainMonitorLoad & !PortMainPages){
        #Page speciffic updating
        switch(Page){
            case 0, #Main page
                #Screen brightness
                E:egpSetText(7, format("%.0f%s", Brightness * 100, "%"))
            break
            case 5, #Air brake setup
                local PSIMult = (Units ? UNIT_DATA["M_kPa", number] : 1) #PSI multiplier (from PSI to kPa)
                
                switch(AirBrakePage){
                    case 0, #Main page
                        #Trail / Lead indication
                        E:egpSetText(10, (BrakePipeCutin_New ? "LEAD" : "TRAIL"))
                        E:egpSetText(14, (BrakePipeCutin ? "LEAD" : "TRAIL"))
                        
                        if(!ABLockout){ #Show and update indications if not locked out
                            E:egpAlpha(9, 255)
                            E:egpAlpha(13, 255)
                            E:egpAlpha(11, 255)
                            E:egpAlpha(15, 255)
                            
                            #EQ Res pressures
                            E:egpSetText(9, format("%.0f %s", EQResSetPressure_New * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(13, format("%.0f %s", EQResSetPressure * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            
                            #Cut In / Cut Out indication
                            E:egpSetText(11, (MU2AValveCutIn_New ? "CUT IN" : "CUT OUT"))
                            E:egpSetText(15, (MU2AValveCutIn ? "CUT IN" : "CUT OUT"))
                            
                            E:egpSetText(7, "")
                        }else{ #Hide the indicators when locked out
                            E:egpAlpha(9, 0)
                            E:egpAlpha(13, 0)
                            E:egpAlpha(11, 0)
                            E:egpAlpha(15, 0)
                            
                            E:egpSetText(7, "Reverser must be centered to be setup as trail.")
                        }
                    break
                    case 1, #EQ setup
                        if(UpdateUnits){
                            E:egpSetText(260, format("%.0f %s", 80 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(263, format("%.0f %s", 90 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(266, format("%.0f %s", 100 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(269, format("%.0f %s", 110 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                        }
                        
                        #EQ Res pressure readout
                        E:egpSetText(7, format((Units ? "%.1f" : "%.0f") + " %s", EQResSetPressure_New * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                    break
                    case 2, #Air brake data
                        local PSIMult = (Units ? UNIT_DATA["M_kPa", number] : 1)
                        local UnitString = (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])
                        local FlowMult = (Units ? UNIT_DATA["M_hL/min", number] : 1)
                        local FlowUnits = (Units ? UNIT_DATA["hL/min", string] : UNIT_DATA["CFM", string])
                        
                        local DisplayData = table(
                            array("LCC_VERSION", "UNKNOWN"),
                            array("BRAKE_PIPE_CUT_IN", boolToText(BrakePipeCutin, 1)),
                            array("MU2A_LEAD", boolToText(MU2AValveCutIn, 1)),
                            array("MAIN_RES_PRESSURE", format("%-5.1f[%s]", MainRes * PSIMult, UnitString)),
                            array("EQUAL_RES_PRESSURE", format("%-5.1f[%s]", EqualRes * PSIMult, UnitString)),
                            array("BRAKE_PIPE_PRESSURE", format("%-5.1f[%s]", BrakePipe * PSIMult, UnitString)),
                            array("BRAKE_CYL_PRESSURE", format("%-5.1f[%s]", BrakeCyl * PSIMult, UnitString)),
                            array("BRAKE_PIPE_ABS_FLOW", format("%-5.1f[%s]", AirFlow * FlowMult, FlowUnits)),
                            array("AB_FEED_VALVE_SETPOINT", format("%-5.1f[%s]", EQResSetPressure * PSIMult, UnitString)),
                            array("PNEUMATIC_CTRL_RELAY", "N/A"),
                            array("PENALTY_BRAKE_TRIGGER", boolToText(AlertEmergency, 1))
                        )
                        
                        for(I = 1, DisplayData:count()){
                            local Index = 5 + I
                            local Data = DisplayData[I, array]
                            if(I == 1){
                                E:egpSetText(Index, format("%-13s%s", Data[1, string] + ":", Data[2, string]))
                                continue
                            }
                            E:egpSetText(Index, format("%-24s%s", Data[1, string] + ":", Data[2, string]))
                        }
                    break
                }
            break
            case 7, #EOT ID
                if(!EOTIDSetup){
                    #EOT ID readout
                    E:egpSetText(10, format("%0.f", EOTDSetID))
                    
                    #Arm state
                    if(RX_EOTID != 0 & (CommTestFinished & CommTestResult)){
                        E:egpSetText(14, (EOTDArmed ? "Armed" : "Disarmed"))
                    }else{
                        E:egpSetText(14, "?")
                    }
                    
                    #Comm test status
                    if(CommTestRun){
                        E:egpSetText(18, "Testing")
                        E:egpColor(18, color("lightBlue"))
                    }elseif(CommTestFinished){
                        E:egpSetText(18, (CommTestResult ? "Passed" : "Failed"))
                        E:egpColor(18, (CommTestResult ? color("lightBlue") : color("lightRed")))
                    }else{
                        E:egpSetText(18, "-")
                        E:egpColor(18, color("lightBlue"))
                    }
                }else{
                    #EOT ID readout
                    E:egpSetText(7, format("%01d  %01d  %01d  %01d  %01d", EID1, EID2, EID3, EID4, EID5))
                }
                
            break
            case 11, #Distributed power operation
                
                O = 27
                E:egpSetText(O, "IDLE")
                
                #Updating the unit readouts
                O = 37
                E:egpLoadDistPowerUnitReadout(O, vec2(140, 151), -1, DISTRIBUTED_POWER_DATA_BUS, 0)
                O = 47
                E:egpLoadDistPowerUnitReadout(O, vec2(210, 151), DistPower_LinkedUnits[1, number], DP_RECEIVED_UNITS, 1)
                O = 57
                E:egpLoadDistPowerUnitReadout(O, vec2(280, 151), DistPower_LinkedUnits[2, number], DP_RECEIVED_UNITS, 2)
                O = 67
                E:egpLoadDistPowerUnitReadout(O, vec2(350, 151), DistPower_LinkedUnits[3, number], DP_RECEIVED_UNITS, 3)
                
                
                #Fence
                if(DPOperation_BackIndex > 0){
                    E:egpAlpha(78, 255)
                    E:egpPos(78, vec2(175 + 70 * (DPOperation_BackIndex - 1), 230))
                }else{
                    E:egpAlpha(78, 0)
                }
                
                #Remote mode selection bar
                if(DPOperation_RemoteMode){
                    E:egpAlpha(79, 255)
                    
                    E:egpHoriSelectBar(52, DistPower_LinkedUnits:count(), 10, 79, 70, DPOperation_RemoteModeIndex - 1, vec2(210, 265), vec2(64, 18), color("lightGreen"))
                }else{
                    E:egpAlpha(79, 0)
                }
                
            break
        }
    }
}


#MAIN SCREEN INTERACTION# 
#A wrapper for getting a key from an array at the specified numerical index.
function number array:iKey(KeyIndex:number){
    return This[KeyIndex, number]
}

function void setRemoteMode(Index:number, State:number){
    DistPower_UnitModes[Index, number] = State
}

#Call this every time the page porting feature has to be reset.
function void resetMainPagePort(CanReset:number){
    if(!CanReset){
        return
    }
    MainPagePort = 0
    ForceUpdate_Sec = 1
}

#Handles page-specific interaction related to the main screen. Returns the page that should be switched to. If ResetPagePort is set to 1, it'll handle properly porting the secondary page back to its normal state.
function vector wirelink:handleMainScreenInteraction(SelectedPage:number, KeyStates:array, ResetPagePort:number){
    local PageChange = SelectedPage
    local ForceUpdate = 0
    local ButtonUpdate = 0

    switch(SelectedPage){
    case 0, #Main page
        if(KeyStates:iKey(8) & MoreChoicesMain < 2){ #More choices
            MoreChoicesMain++
            ButtonUpdate_Main = 1
        }elseif(KeyStates:iKey(8) & MoreChoicesMain >= 2){
            MoreChoicesMain = 0
            ButtonUpdate_Main = 1
        }
        
        switch(MoreChoicesMain){
            case 0, #More options 1
                if(KeyStates:iKey(4)){ #Consist mon. page
                    PageChange = 1
                }
            break
            case 1, #More options 2
                #Brightness buttons
                if(Brightness < 1){ #Brighter
                    if(KeyStates:iKey(1)){ Brightness += 0.05 }
                    This:egpColor(250, color("lightBlue"))
                }else{
                    This:egpColor(250, color("offBlue"))
                }
                
                if(Brightness > 0.15){ #Dimmer
                    if(KeyStates:iKey(2)){ Brightness -= 0.05 }
                    This:egpColor(253, color("lightBlue"))
                }else{
                    This:egpColor(253, color("offBlue"))
                }
                
                if(KeyStates:iKey(4)){ #Operator controls page
                    PageChange = 3
                }
                if(KeyStates:iKey(6)){ #Length counter page
                    PageChange = 4
                }
            break
            case 2, #More options 3
                if(KeyStates:iKey(2)){ #Distributed power page
                    PageChange = 5
                    DistributedPowerPage = (DistPower_LocalEnable == -1 ? 4 : (DistPower_LocalEnable == 1 ? 3 : 0))
                }
            break
        }
    break
    case 1, #Consist monitor
        if(KeyStates:iKey(8)){
            PageChange = 0
            resetMainPagePort(ResetPagePort)
        }
    break
    case 3, #Operator controls
        switch(OPControlsPage){
            case 0, #Main page
                if(KeyStates:iKey(3)){ #Climate control
                    OPControlsPage = 1
                    ForceUpdate = 1
                }
                if(KeyStates:iKey(4)){ #Display setup
                    OPControlsPage = 2
                    ForceUpdate = 1
                }
                if(KeyStates:iKey(7)){ #Rail conditioner mode swap
                    RailConditioner = !RailConditioner
                }
                if(KeyStates:iKey(8)){ #Exit
                    PageChange = 0
                    resetMainPagePort(ResetPagePort)
                }
            break
            case 1, #Climate control page
                if(KeyStates:iKey(7)){ #Defogger cycling
                    DefoggerOn = !DefoggerOn
                }
                if(KeyStates:iKey(8)){ #Exit
                    OPControlsPage = 0
                    ForceUpdate = 1
                }
            break
            case 2, #Display setup page
                #Brightness buttons
                if(Brightness < 1){ #Brighter
                    if(KeyStates:iKey(1)){ Brightness += 0.05 }
                    This:egpColor(250, color("lightBlue"))
                }else{
                    This:egpColor(250, color("offBlue"))
                }
                
                if(Brightness > 0.15){ #Dimmer
                    if(KeyStates:iKey(2)){ Brightness -= 0.05 }
                    This:egpColor(253, color("lightBlue"))
                }else{
                    This:egpColor(253, color("offBlue"))
                }
                
                if(KeyStates:iKey(7)){ #Units change button
                    Units = !Units
                }
                
                if(KeyStates:iKey(8)){ #Exit
                    OPControlsPage = 0
                    ForceUpdate = 1
                }
            break
        }
    break
    case 4, #Length counter page
        switch(LengthCounterPage){
            case 0, #Main length counter page
                if(KeyStates:iKey(2)){ #Change length page switch
                    LengthCounterPage = 1
                    ForceUpdate = 1
                }
                if(KeyStates:iKey(4)){ #Countdown length page switch
                    LengthCounterPage = 2
                    ForceUpdate = 1
                    if(!CountdownRun){
                        CountdownLength = ConsistLength
                    }
                    CountdownRun = 1
                }
                if(KeyStates:iKey(6)){ #Measured mile page switch
                    LengthCounterPage = 3
                    ForceUpdate = 1
                }
                if(KeyStates:iKey(8)){ #Page exit
                    PageChange = 0
                    MeasuringLength = 0 #Stop measuring length (if somebody forgot to stop it themselves)
                    MeasuredLength = 0
                    MeasureLengthFinished = 0
                    resetMainPagePort(ResetPagePort)
                }
            break
            case 1, #Main length change page
                switch(LengthChangePage){
                    case 0, #Length change type selection
                        if(KeyStates:iKey(3)){ #Measure length
                            LengthChangePage = 1
                            ForceUpdate = 1
                        }
                        if(KeyStates:iKey(5)){ #Measure length
                            LengthChangePage = 2
                            ForceUpdate = 1
                        }
                        if(KeyStates:iKey(8)){ #Exit
                            LengthCounterPage = 0
                            ForceUpdate = 1
                        }
                    break
                    case 1, #Measure length page
                        if(!MeasureLengthFinished){
                            if(KeyStates:iKey(1)){ #Cancel
                                LengthChangePage = 0
                                MeasuringLength = 0
                                MeasuredLength = 0
                                MeasureLengthFinished = 0
                                ForceUpdate = 1
                            }
                            
                            if(KeyStates:iKey(3)){
                                if(!MeasuringLength){ #Start measure
                                    MeasuringLength = 1
                                    ButtonUpdate = 1
                                }elseif(MeasuringLength){ #Stop measure
                                    MeasuringLength = 0
                                    MeasureLengthFinished = 1
                                    ForceUpdate = 1

                                    if(MeasuredLength <= ConsistLength){
                                        MeasuredLTooShort = 1
                                    }else{
                                        MeasuredLTooShort = 0
                                    }
                                }
                            }
                            
                            if(KeyStates:iKey(8)){ #Page exit (keeps running the measure)
                                LengthChangePage = 0
                                ForceUpdate = 1
                            }
                        }else{
                            if(KeyStates:iKey(5) & !MeasuredLTooShort){ #Accept measured length
                                ConsistLength = MeasuredLength
                                MeasuredLength = 0
                                MeasureLengthFinished = 0
                                PageChange = LengthChangePage = LengthCounterPage = 0
                                ForceUpdate = 1
                            }
                            if(KeyStates:iKey(7)){ #Reject measured length
                                MeasuredLength = 0
                                MeasureLengthFinished = 0
                                PageChange = LengthChangePage = LengthCounterPage = 0
                                ForceUpdate = 1
                                resetMainPagePort(ResetPagePort)
                            }
                        }
                    break
                    case 2, #Enter length page
                        if(KeyStates:iKey(1)){ #Cancel
                            LengthChangePage = 0
                            ForceUpdate = 1
                        }
                        
                        if(KeyStates:iKey(2)){
                            IL1 = incrementNumber(IL1, 1, 0, 0, 9)
                        }
                        if(KeyStates:iKey(3)){
                            IL2 = incrementNumber(IL2, 1, 0, 0, 9)
                        }
                        if(KeyStates:iKey(4)){
                            IL3 = incrementNumber(IL3, 1, 0, 0, 9)
                        }
                        if(KeyStates:iKey(5)){
                            IL4 = incrementNumber(IL4, 1, 0, 0, 9)
                        }
                        if(KeyStates:iKey(6)){
                            IL5 = incrementNumber(IL5, 1, 0, 0, 9)
                        }
                        ILStr = (IL1:toString() + IL2:toString() + IL3:toString() + IL4:toString() + IL5:toString())
                        #Is the length valid?
                        if(ILStr:toNumber() != 0){
                            LengthValid = 1
                            This:egpSetText(205, "")
                            This:egpColor(268, color("lightBlue"))
                        }else{
                            LengthValid = 0
                            This:egpSetText(205, "Invalid Length")
                            This:egpColor(268, color("offBlue"))
                        }
                        
                        if(KeyStates:iKey(8) & LengthValid){ #Enter input length
                            ConsistLength = (ILStr:toNumber()) / (Units ? UNIT_DATA["M_m", number] : 1)
                            LengthChangePage = 0
                            ForceUpdate = 1
                        }
                    break
                }
            break
            case 2, #Lengt countdown page
                if(KeyStates:iKey(5)){ #Count down button (whatever this does)
                    CountdownLength = ConsistLength
                    LengthCounterPage = 0
                    PageChange = 0
                    CountdownRun = 0
                    resetMainPagePort(ResetPagePort)
                }
                
                if(KeyStates:iKey(7)){ #Reset counter
                    CountdownLength = ConsistLength
                    CountdownRun = 1
                }
                
                if(KeyStates:iKey(8)){ #Page exit (countdown keeps going)
                    LengthCounterPage = 0
                    ForceUpdate = 1
                }
            break
            case 3, #Measured mile page
                if(KeyStates:iKey(2) & !(MeasuredMileRun | MMFinished)){ #Start le toimr
                    MeasuredMileRun = 1
                    ButtonUpdate = 1
                }
                
                if(KeyStates:iKey(5) & MeasuredMileRun){ #Stop the timer
                    MeasuredMileRun = 0
                    MMFinished = 1
                    ButtonUpdate = 1
                }
                
                if(KeyStates:iKey(7)){ #Reset timer
                    if(MeasuredMileRun & !MMFinished){
                        MMTimeElapsed = 0
                    }elseif(MMFinished){
                        MMTimeElapsed = 0
                        MMFinished = 0
                        MMCheckFailed = 0
                    }
                    MMSpeedChecks:clear()
                    ButtonUpdate = 1
                }
                                        
                if(KeyStates:iKey(8)){ #Exit(tm)
                    MMFinished = 0
                    MeasuredMileRun = 0
                    LengthCounterPage = 0
                    MMTimeElapsed = 0
                    MMSpeedChecks:clear()
                    ForceUpdate = 1
                }
            break
        }
    break
    case 5, #Distributed power
        switch(DistributedPowerPage){
            case 0, #Main DP page
                if(KeyStates:iKey(1)){ #Lead Setup
                    DistPower_LocalEnable = 1
                    
                    DistributedPowerPage = 1
                    ForceUpdate = 1
                }
                if(KeyStates:iKey(2)){ #Remote Setup
                    DistPower_LocalEnable = -1
                    
                    DistributedPowerPage = 2
                    ForceUpdate = 1
                }
                
                if(KeyStates:iKey(8)){
                    PageChange = 0
                    ForceUpdate = 1
                    #resetMainPagePort(ResetPagePort)
                }
            break
            case 1, #LEAD SETUP
                #Count UP/DOWN
                if(KeyStates:iKey(1)){
                    DP_SetupUnitID[DP_SetupSelectedDigit, number] = DP_SetupUnitID[DP_SetupSelectedDigit, number] + 1
                    if(DP_SetupUnitID[DP_SetupSelectedDigit, number] > 9){
                        DP_SetupUnitID[DP_SetupSelectedDigit, number] = 0
                    }
                }
                if(KeyStates:iKey(2)){
                    DP_SetupUnitID[DP_SetupSelectedDigit, number] = DP_SetupUnitID[DP_SetupSelectedDigit, number] - 1
                    if(DP_SetupUnitID[DP_SetupSelectedDigit, number] < 0){
                        DP_SetupUnitID[DP_SetupSelectedDigit, number] = 9
                    }
                }
                
                #Digit LEFT/RIGHT
                if(KeyStates:iKey(3)){
                    DP_SetupSelectedDigit--
                    if(DP_SetupSelectedDigit < 1){
                        DP_SetupSelectedDigit = 4
                    }
                }
                if(KeyStates:iKey(4)){
                    DP_SetupSelectedDigit++
                    if(DP_SetupSelectedDigit > 4){
                        DP_SetupSelectedDigit = 1
                    }
                }
                local DP_InputUnitID = DP_SetupUnitID:concat():toNumber()
                
                
                #LINK/UNLINK
                if(KeyStates:iKey(5) & DistPower_LinkedUnits:count() < 3 & !DP_SetupUnlinkMode & DP_InputUnitID){
                    local IsDuplicit = 0
                    
                    foreach(_:number,Num:number = DistPower_LinkedUnits){
                        if(Num == DP_InputUnitID){
                            IsDuplicit = 1
                            break
                        }
                    }
                    
                    if(!IsDuplicit){
                        DistPower_LinkedUnits:pushNumber(DP_InputUnitID)
                        DP_SetupUnitID = array(0, 0, 0, 0)
                        DP_SetupSelectedDigit = 1
                    }
                }elseif(KeyStates:iKey(5) & DistPower_LinkedUnits:count() > 0 & DP_SetupUnlinkMode & DP_InputUnitID){
                    foreach(Index:number,Num:number = DistPower_LinkedUnits){
                        if(Num == DP_InputUnitID){
                            DistPower_LinkedUnits:remove(Index)
                            break
                        }
                    }
                    
                    DP_SetupUnitID = array(0, 0, 0, 0)
                    DP_SetupSelectedDigit = 1
                }
                This:egpColor(262, ((DistPower_LinkedUnits:count() < 3) & !DP_SetupUnlinkMode | DistPower_LinkedUnits:count() & DP_SetupUnlinkMode) & DP_InputUnitID ? color("lightGreen") : color("offGreen"))
                This:egpSetText(263, DP_SetupUnlinkMode ? "UNLINK" : "LINK")
                
                
                #ACCEPT (starts DP)
                if(KeyStates:iKey(6) & DistPower_LinkedUnits:count()){
                    DP_SetupUnitID = array(0, 0, 0, 0)
                    DP_SetupSelectedDigit = 1
                    DP_SetupUnlinkMode = 0
                    
                    DistributedPowerPage = 3
                    ForceUpdate = 1
                }
                This:egpColor(265, color(DistPower_LinkedUnits:count() ? "lightPurple" : "offPurple"))
                
                
                #Toggling LINK/UNLINK mode
                if(KeyStates:iKey(7)){
                    DP_SetupUnlinkMode = !DP_SetupUnlinkMode
                }
                This:egpSetText(270, DP_SetupUnlinkMode ? "LINK" : "UNLINK")
                
                
                #Exit
                if(KeyStates:iKey(8)){
                    DP_SetupUnlinkMode = 0
                    DP_SetupUnitID = array(0, 0, 0, 0)
                    DP_SetupSelectedDigit = 1
                    DistPower_LocalEnable = 0
                    DistPower_LinkedUnits:clear()
                    DistPower_UnitModes = table(1, 1, 1)
                    
                    DistributedPowerPage = 0
                    ForceUpdate = 1
                }
            break
            case 2, #REMOTE SETUP
                #Count UP/DOWN
                if(KeyStates:iKey(1)){
                    DP_SetupUnitID[DP_SetupSelectedDigit, number] = DP_SetupUnitID[DP_SetupSelectedDigit, number] + 1
                    if(DP_SetupUnitID[DP_SetupSelectedDigit, number] > 9){
                        DP_SetupUnitID[DP_SetupSelectedDigit, number] = 0
                    }
                }
                if(KeyStates:iKey(2)){
                    DP_SetupUnitID[DP_SetupSelectedDigit, number] = DP_SetupUnitID[DP_SetupSelectedDigit, number] - 1
                    if(DP_SetupUnitID[DP_SetupSelectedDigit, number] < 0){
                        DP_SetupUnitID[DP_SetupSelectedDigit, number] = 9
                    }
                }
                
                #Digit LEFT/RIGHT
                if(KeyStates:iKey(3)){
                    DP_SetupSelectedDigit--
                    if(DP_SetupSelectedDigit < 1){
                        DP_SetupSelectedDigit = 4
                    }
                }
                if(KeyStates:iKey(4)){
                    DP_SetupSelectedDigit++
                    if(DP_SetupSelectedDigit > 4){
                        DP_SetupSelectedDigit = 1
                    }
                }
                local DP_InputUnitID = DP_SetupUnitID:concat():toNumber()
                
                #Direction toggle
                if(KeyStates:iKey(5)){
                    DP_RemoteTravelDir = !DP_RemoteTravelDir
                }
                
                
                #ACCEPT
                if(KeyStates:iKey(6)){
                    DistPower_LeadUnitNumber = DP_InputUnitID
                    DP_SetupUnitID = array(0, 0, 0, 0)
                    DP_SetupSelectedDigit = 1
                    
                    DistributedPowerPage = 4
                    ForceUpdate = 1
                }
                
                
                #Exit
                if(KeyStates:iKey(8)){
                    DP_SetupUnitID = array(0, 0, 0, 0)
                    DP_SetupSelectedDigit = 1
                    DistPower_LocalEnable = 0
                    DistPower_LeadUnitNumber = 0
                    
                    DistributedPowerPage = 0
                    ForceUpdate = 1
                }
            break
            case 3, #Main menu - DP enabled LEAD
                #TRAIN CONFIG
                if(KeyStates:iKey(3)){
                    DistributedPowerPage = 1
                    ForceUpdate = 1
                }
                
                #END DIST PWR
                if(KeyStates:iKey(7)){
                    DistPower_LocalEnable = 0
                    DistPower_LinkedUnits:clear()
                    DistPower_UnitModes = table(1, 1, 1)
                    
                    DistributedPowerPage = 0
                    ForceUpdate = 1
                }
                
                #Exit (keeps DP running)
                if(KeyStates:iKey(8)){
                    PageChange = 0
                    ForceUpdate = 1
                }
            break
            case 4, #Main menu - DP enabled REMOTE
                #END DIST PWR
                if(KeyStates:iKey(7)){
                    DistPower_LocalEnable = 0
                    DistPower_LeadUnitNumber = 0
                    
                    DistributedPowerPage = 0
                    ForceUpdate = 1
                }
                
                #Exit (keeps DP running)
                if(KeyStates:iKey(8)){
                    PageChange = 0
                    ForceUpdate = 1
                }
            break
        }
    break
    }
    
    return vec(PageChange, ForceUpdate, ButtonUpdate)
}

#Overload that handles specifically main page interaction.
function void wirelink:handleMainScreenInteraction(...KeyStates:array){
    local LastPage = MainPage
    local PageChangeData = This:handleMainScreenInteraction(MainPage, KeyStates, 0)
    MainPage = PageChangeData:x()
    ForceUpdate_Main = PageChangeData:y()
    ButtonUpdate_Main = PageChangeData:z() | ButtonUpdate_Main

    if(LastPage != MainPage){
        ForceUpdate_Main = 1
    }
}



#SECONDARY SCREEN INTERACTION#
#Handles interaction on the secondary screen.
function void wirelink:handleSecondaryScreenInteraction(...KeyStates:array){
    if(!MainPagePort){
        switch(SecPage){
        case 0, #Main setup page
            #More choices
            if(KeyStates:iKey(8) & MoreChoicesSec < 2){
                MoreChoicesSec++
                ButtonUpdate_Sec = 1
            }elseif(KeyStates:iKey(8) & MoreChoicesSec >= 2){
                MoreChoicesSec = 0
                ButtonUpdate_Sec = 1
            }
            
            switch(MoreChoicesSec){
                case 0, #More options 1
                    if(Brightness < 1){ #Brighter
                        if(KeyStates:iKey(1)){ Brightness += 0.05 }
                        EGPSec:egpColor(250, color("lightBlue"))
                    }else{
                        EGPSec:egpColor(250, color("offBlue"))
                    }
                    if(Brightness > 0.15){ #Dimmer
                        if(KeyStates:iKey(2)){ Brightness -= 0.05 }
                        EGPSec:egpColor(253, color("lightBlue"))
                    }else{
                        EGPSec:egpColor(253, color("offBlue"))
                    }
                    
                    #Length Counter
                    if(KeyStates:iKey(6)){
                        SecPage = 4
                        MainPagePort = 1
                        ForceUpdate_Sec = 1
                    }
                    #Air Setup
                    if(KeyStates:iKey(7)){
                        SecPage = 5
                        ForceUpdate_Sec = 1
                    }
                break
                case 1, #More options 2
                    #EOT ID
                    if(KeyStates:iKey(4)){
                        SecPage = 7
                        ForceUpdate_Sec = 1
                    }
                break
                case 2, #More options 3
                    #Consist monitor
                    if(KeyStates:iKey(4)){
                        SecPage = 1
                        MainPagePort = 1
                        ForceUpdate_Sec = 1
                    }
                    
                    #Distributed power operation
                    local CanEnterDPOperations = (DistPower_LocalEnable == 1 & DistPower_LinkedUnits:count())
                    if(KeyStates:iKey(6) & CanEnterDPOperations){
                        SecPage = 11
                        ForceUpdate_Sec = 1
                    }
                    EGPSec:egpColor(259, color(CanEnterDPOperations ? "lightBlue" : "offBlue"))
                break
            }
        break
        case 5, #Air Brake (setup)
            switch(AirBrakePage){
                case 0, #Main page
                    if(KeyStates:iKey(1)){ #Cancel
                        SecPage = 0
                        ForceUpdate_Sec = 1
                    }
                    
                    if(!ABLockout){
                        #EQ res setup page
                        if(KeyStates:iKey(2)){
                            AirBrakePage = 1
                            ForceUpdate_Sec = 1
                        }
                        
                        #Lead / Trail change
                        if(KeyStates:iKey(3)){
                            BrakePipeCutin_New = !BrakePipeCutin_New
                        }
                        #Cut In / Cut Out change
                        if(KeyStates:iKey(4)){
                            MU2AValveCutIn_New = !MU2AValveCutIn_New
                        }
                        
                        #Air brake data
                        if(KeyStates:iKey(6)){
                            AirBrakePage = 2
                            ForceUpdate_Sec = 1
                        }
                        
                        #Accept new
                        if(KeyStates:iKey(7)){
                            BrakePipeCutin = BrakePipeCutin_New
                            MU2AValveCutIn = MU2AValveCutIn_New
                            EQResSetPressure = EQResSetPressure_New
                            SecPage = 0
                            ForceUpdate_Sec = 1
                        }
                    }
                break
                case 1, #EQ setup
                    #Cancel
                    if(KeyStates:iKey(1)){
                        EQResSetPressure_New = EQResSetPressure
                        AirBrakePage = 0
                        ForceUpdate_Sec = 1
                    }
                    
                    #Decrease & Increase buttons
                    if(KeyStates:iKey(2) | KeyStates:iKey(3)){
                        EQResSetPressure_New = incrementNumber(EQResSetPressure_New, KeyStates:iKey(3), KeyStates:iKey(2), 80, 130)
                    }
                    #80 PSI
                    if(KeyStates:iKey(4)){
                        EQResSetPressure_New = 80
                    }
                    #90 PSI
                    if(KeyStates:iKey(5)){
                        EQResSetPressure_New = 90
                    }
                    #100 PSI
                    if(KeyStates:iKey(6)){
                        EQResSetPressure_New = 100
                    }
                    #110 PSI
                    if(KeyStates:iKey(7)){
                        EQResSetPressure_New = 110
                    }
                    
                    #Enter
                    if(KeyStates:iKey(8)){
                        AirBrakePage = 0
                        ForceUpdate_Sec = 1
                    }
                break
                case 2, #Air brake data
                    if(KeyStates:iKey(8)){
                        AirBrakePage = 0
                        ForceUpdate_Sec = 1
                    }
                break
            }
        break
        case 7, #EOT ID page
            if(!EOTIDSetup){
                if(KeyStates:iKey(1)){ #Change EOT ID
                    EOTIDSetup = 1
                    ForceUpdate_Sec = 1
                }
                
                local CommTestPassed = (CommTestResult & CommTestFinished)
                if(KeyStates:iKey(2) & CommTestPassed){ #Arm EOT
                    EOTDArmState = 1
                }
                if(CommTestPassed){
                    EGPSec:egpColor(253, color("lightBlue"))
                    EGPSec:egpColor(256, color("lightBlue"))
                }else{
                    EGPSec:egpColor(253, color("offBlue"))
                    EGPSec:egpColor(256, color("offBlue"))
                }
                
                if((KeyStates:iKey(3) & CommTestPassed) | !CommTestPassed){ #Disarm EOT
                    EOTDArmState = 0
                }
                
                
                if(KeyStates:iKey(4)){ #Reset EOT ID
                    EIDStr = "0"
                    CommTestResult = CommTestFinished = 0
                    EID1 = EID2 = EID3 = EID4 = EID5 = 0
                }
                
                if(KeyStates:iKey(6)){ #Comm test
                    CommTestRun = 1
                }
                
                if(KeyStates:iKey(8)){ #Exit(tm)
                    SecPage = 0
                    ForceUpdate_Sec = 1
                }
            }else{
                #Yeah you get idea
                if(KeyStates:iKey(1)){ #Cancel
                    EOTIDSetup = 0
                    ForceUpdate_Sec = 1
                }
                
                #Individual digit cycle buttons
                if(KeyStates:iKey(2)){
                    EID1 = incrementNumber(EID1, KeyStates:iKey(2), 0, 0, 9)
                }
                if(KeyStates:iKey(3)){
                    EID2 = incrementNumber(EID2, KeyStates:iKey(3), 0, 0, 9)
                }
                if(KeyStates:iKey(4)){
                    EID3 = incrementNumber(EID3, KeyStates:iKey(4), 0, 0, 9)
                }
                if(KeyStates:iKey(5)){
                    EID4 = incrementNumber(EID4, KeyStates:iKey(5), 0, 0, 9)
                }
                if(KeyStates:iKey(6)){
                    EID5 = incrementNumber(EID5, KeyStates:iKey(6), 0, 0, 9)
                }
                
                if(KeyStates:iKey(7)){
                    EIDStr = EID1:toString() + EID2:toString() + EID3:toString() + EID4:toString() + EID5:toString()
                    if(EIDStr:toNumber() != EOTDSetID){
                        CommTestResult = CommTestFinished = 0
                    }
                    EOTIDSetup = 0
                    ForceUpdate_Sec = 1
                }
            }
        break
        case 11, #Distributed power operation
            #Exit
            if(KeyStates:iKey(7)){
                DPOperation_RemoteMode = 0
                DPOperation_BackIndex = 0
                
                SecPage = 0
                ForceUpdate_Sec = 1
            }
            
            #Remote menu/Control menu toggling
            if(KeyStates:iKey(8)){
                DPOperation_RemoteMode = !DPOperation_RemoteMode
                ButtonUpdate_Sec = 1
            }
            
            
            if(DPOperation_RemoteMode){ #REMOTE MENU
                #Move forward
                if(KeyStates:iKey(1)){
                    DPOperation_RemoteModeIndex--
                    if(DPOperation_RemoteModeIndex < 1){
                        DPOperation_RemoteModeIndex = DistPower_LinkedUnits:count()
                    }
                }
                
                #Move back
                if(KeyStates:iKey(2)){
                    DPOperation_RemoteModeIndex++
                    if(DPOperation_RemoteModeIndex > DistPower_LinkedUnits:count()){
                        DPOperation_RemoteModeIndex = 1
                    }
                }
                
                
                if(KeyStates:iKey(3)){ #NORMAL
                    setRemoteMode(DPOperation_RemoteModeIndex, 0)
                }
                if(KeyStates:iKey(4)){ #IDLE
                    setRemoteMode(DPOperation_RemoteModeIndex, 1)
                }
                if(KeyStates:iKey(5)){ #SET-OUT
                    setRemoteMode(DPOperation_RemoteModeIndex, 2)
                }
                if(KeyStates:iKey(6)){ #ISOLATE
                    setRemoteMode(DPOperation_RemoteModeIndex, 3)
                }
                
                
            }elseif(DPOperation_BackIndex > 0){
                #Move forward
                if(KeyStates:iKey(1)){
                    DPOperation_BackIndex--
                    
                    if(!DPOperation_BackIndex){
                        ButtonUpdate_Sec = 1
                    }
                }
                
                #More power
                if(KeyStates:iKey(3) & DistPower_FencePower < 8){
                    DistPower_FencePower++
                }
                EGPSec:egpColor(256, color(DistPower_FencePower < 8 ? "lightBlue" : "offBlue"))
                
                #Idle
                if(KeyStates:iKey(4)){
                    DistPower_FencePower = 0
                }
                
                #More brake
                if(KeyStates:iKey(5) & DistPower_FencePower > -9){
                    DistPower_FencePower--
                }
                EGPSec:egpColor(262, color(DistPower_FencePower > -9 ? "lightBlue" : "offBlue"))
            }
            
            #Move back (not in REMOTE mode)
            if(KeyStates:iKey(2) & !DPOperation_RemoteMode){
                if(!DPOperation_BackIndex){
                    DistPower_FencePower = Notch - Dynamics - DynaBrakeNotch
                    ButtonUpdate_Sec = 1
                }
                if(DPOperation_BackIndex < DistPower_LinkedUnits:count()){
                    DPOperation_BackIndex++
                }
            }
            EGPSec:egpColor(253, color(DPOperation_BackIndex < 3 ? "lightBlue" : "offBlue"))
            
        break
        }
    }elseif(MainPagePort){ #End of secondary page stuff
        local LastPage = SecPage
        local PageChangeData = This:handleMainScreenInteraction(SecPage, KeyStates, 1)
        SecPage = PageChangeData:x()
        ForceUpdate_Sec = PageChangeData:y()
        ButtonUpdate_Sec = PageChangeData:z() | ButtonUpdate_Sec

        if(LastPage != SecPage){
            ForceUpdate_Sec = 1
        }
    }
}



#Post-init:
#----------
if(first()|dupefinished()){
    Run = 1
    EGPMain:egpClear()
    EGPSec:egpClear()
}
#finally that madness ended... oh wait, there's more shi-




#----The shit that you actually care about

#Runs the display (which means setting initial variables as well as clearing the screens and loading the default page profiles).
function void runDisplay(){
    Running = 1
    CanRun = 1
    MainPage = Default_MainPage
    SecPage = Default_SecondaryPage
    AirBrakePage = 0
    DistributedPowerPage = 0
    DPOperation_RemoteMode = 0
    DPOperation_BackIndex = 0
    
    
    EGPMain:egpClear()
    EGPMain:egpLoad(MainPage, 1, 0)
    EGPMain:egpLoadButtons(MainPage, 1, 0)
    
    if(->EGPSec){
        EGPSec:egpClear()
        EGPSec:egpLoad(SecPage, 0, MainPagePort)
        EGPSec:egpLoadButtons(SecPage, 0, MainPagePort)
    }
}

function void runStartingApps(){
    EGPMain:bootupScreenLoad(0)
    if(->EGPSec){
        EGPSec:bootupScreenLoad(0)
    }
    
    if(!timerExists("run_display")){
        timer("run_display", 6, function(){
            runDisplay()
        })
    }
}

function void updateDisp(){
    #Updating the EGPs
    EGPMain:egpUpdate(MainPage, 1, 0)
    if(->EGPSec){
        EGPSec:egpUpdate(SecPage, 0, MainPagePort)
    }
}


function void main(){ #Display running
    #Display initialization
    BatteryLocal = Battery
    if(BatteryLocal & !Running & !SkipBoot & !OSLoaded){
        if(!OSLoading){
            EGPMain:egpClear()
            EGPSec:egpClear()
            
            EGPMain:bootupScreenLoad(1)
            OSLoadProgress = 0
            OS_TerminalLine = 1 
            OSLoading = 1
        }
        
        if(OSLoadProgress >= OSLoadSteps){
            OSLoadProgress = OSLoadSteps
            OSLoading = 0
            OSLoaded = 1
            EGPMain:egpClear()
            EGPSec:egpClear()
            
            timer("startApps", random(1, 1.5), function(){
                runStartingApps()
            })
        }else{
            OSLoadProgress++
            EGPMain:bootupScreenUpdate(OSLoadProgress)
            
            if(OSLoadProgress >= OSLoadSteps){
                OSLoadProgress = OSLoadSteps
            }
        }
    }elseif(!BatteryLocal){
        stoptimer("startApps")
        stoptimer("run_display")
        
        EGPMain:egpClear()
        EGPSec:egpClear()
        CanRun = 0
        Running = 0
        OSLoaded = OSLoadProgress = 0
        OSLoading = 0
        
        MainPage = SecPage = 0
        MainPagePort = MoreChoicesMain = MoreChoicesSec = 0
        AirBrakePage = OPControlsPage = LengthCounterPage = LengthChangePage = MeasureLengthFinished = 0
        OSLoaded = OSLoading = OSLoadProgress = 0
        MB1 = MB2 = MB3 = MB4 = MB5 = MB6 = MB7 = MB8 = 0
        SB1 = SB2 = SB3 = SB4 = SB5 = SB6 = SB7 = SB8 = 0
        KeyTimeout = 0
        DistPower_LocalEnable = 0
        DistPower_LinkedUnits:clear()
        DistPower_UnitModes = table(1, 1, 1)

        DISPLAY_CONTROL_BUS:clear()
    }
    
    #Handling display operation when SkipBoot is enabled
    if(SkipBoot & BatteryLocal & !Running){
        timer("run_display_delay", 0.2, function(){
            runDisplay()
        })
    }
    

    if(!CanRun | !Running){ return }
    
    
    #Stuff that happens after the display is running
    Driver = Pod:driver()
    
    #Display-specific functions
    #RLCPT
    RLCPTW = (RLCPT:isValid() ? RLCPT:wirelink() : nowirelink())
    KPH = abs(RLCPTW["KPH",number])
    MPH = abs(RLCPTW["MPH",number])
    
    Reverser = CtlTable["SetReverser", number]
    Throttle = CtlTable["SetThrottle", number]
    Dynamics = RLCPTW["Dynamics",number]
    DynaBrakeNotch = RLCPTW["DynaNotch",number]
    TractiveEffort = RLCPTW["TE_LBF",number]
    Load = RLCPTW["Load1",number]
    DynBrakeWarn = RLCPTW["BrakeWarn",number]
    WheelSlip = RLCPTW["WheelSlip",number]
    Sanding = RLCPTW["ForceSand",number]
    PCSOpen = RLCPTW["Emergency",number]
    
    EqualRes = RLCPTW["EqualRes",number]
    BrakePipe = RLCPTW["BrakePipe",number]
    AirFlow = RLCPTW["CFM",number]
    MainRes = RLCPTW["MainRes",number]
    BrakeCyl = RLCPTW["Cyl",number]
    
    BCI = BrakePipeCutin
    IsolatedBrakes = MU2AValveCutIn
    
    ConsistEffort = DISTRIBUTED_POWER_DATA_BUS["consist_effort", number] * 0.001
    ConsistUnitsCapable = DISTRIBUTED_POWER_DATA_BUS["live_unit_count", number]
    ConsistUnitsTotal = DISTRIBUTED_POWER_DATA_BUS["unit_count", number]
    ConsistPowerStat = (DISTRIBUTED_POWER_DATA_BUS:exists("local_status") ? DISTRIBUTED_POWER_DATA_BUS["local_status", string] : "-")
    DP_RECEIVED_UNITS = DISTRIBUTED_POWER_DATA_BUS["dp", table]["received_units", table]
    
    
    #Calculations
    TMCurrent = abs(Load)
    DrivenDistMI += (MPH / 18000)
    
    #Low fuel warning
    if(FuelLevel < FuelTankCap * 0.05 & ->FuelLevel){
        LowFuel = 1
    }else{
        LowFuel = 0
    }
    if(->UnitOverride){
        Units = UnitOverride
    }
    
    #Alerter system
    if(UseAlerter & IsLead){
        if(Driver:keyPressed(AlerterResetKey) | changed(vec(Notch, Reverser, DynaBrakeNotch))){
            AlerterTime = 60
            AlertEmergency = 0
            AlerterRunning = 0
        }
        
        if(KPH > 5 & !AlerterRunning){
            AlerterTime = 60
            AlerterRunning = 1
        }
        if(AlerterRunning){
            if(KPH < 5){
                AlerterRunning = 0
                AlerterTime = 60
            }else{
                AlerterTime += -min(AlerterTime, 0.1)
                if(AlerterTime <= 0){
                    AlertEmergency = 1
                }
            }
        }
        AlerterBlinkAngle += 36
        if(AlerterBlinkAngle > 360){ AlerterBlinkAngle -= 360 }
        AlerterBlink = (AlerterTime < 25 & AlerterTime > 20 ? sin(AlerterBlinkAngle) > 0 : AlerterTime < 20 ? 1 : 0)
         
        if(AlerterTime < 20){
            if(!soundPlaying("alerter_sound")){
                EGPMain:entity():soundPlay("alerter_sound", 0, "opencontrol/alerter.wav")
                soundLevel("alerter_sound", 65)
                soundVolume("alerter_sound", AlerterMaxVolume)
            }
        }
        if(AlerterTime <= 0 | AlerterTime >= 25){
            soundStop("alerter_sound")
        }
    }else{
        AlertEmergency = 0
        AlerterTime = 60
        AlerterBlink = 0
        AlerterBlinkAngle = 0
    }
    
    #Brake setup page lockout (when the reverser is not centerred)
    if(!BrakePipeCutin & SecPage == 5){
        if(Reverser != 0){
            ABLockout = 1
        }else{
            ABLockout = 0
        }
    }else{
        ABLockout = 0
    }
    
    #EOTD stuff
    if(CommTestRun){
        timer("commTestDelay", random(1,2), function(){
            if(RX_EOTID == EOTDSetID & ->RX_EOTID & RX_EOTID != 0){
                CommTestResult = 1
            }else{
                CommTestResult = 0
            }
            CommTestRun = 0
            CommTestFinished = 1
        })
        CommTestFinished = 0
    }
    if(EOTDArmed & CommTestResult & !RX_EOTID){
        CommTestFinished = 0
        CommTestResult = 0
        CommTestRun = 0
        EOTDArmed = 0
        EIDStr = "0"
        EID1 = EID2 = EID3 = EID4 = EID5 = 0
    }
    
    #EOTD Arming
    if(EOTDArmState){
        RX_EOTBrakePipe = BrakePipe
        RX_EOTMPH = MPH
        EOTDArmed = 1
    }else{
        RX_EOTBrakePipe = RX_EOTMPH = 0
        EOTDArmed = 0
    }
    
    #Rear pressure readout
    if(EOTDArmed){
        RearPres = RX_EOTPSI
    }else{
        RearPres = 0
    }
    
    #EOTD moving
    if(EOTDArmed & MPH > 0.2){
        EOTMove = 1
    }else{
        EOTMove = 0
    }
    
    
    #Main screen interaction
    if(->EGPMain){
        EGPMain:handleMainScreenInteraction(MB1, MB2, MB3, MB4, MB5, MB6, MB7, MB8)
        

        #Distributed power control data
        DistPower_Control["lead_trail", number] = DistPower_LocalEnable
        DistPower_Control["travel_direction", number] = DP_RemoteTravelDir
        DistPower_Control["unit_list", table] = DistPower_LinkedUnits
        DistPower_Control["lead_unit", number] = DistPower_LeadUnitNumber
        DistPower_Control["fence_pos", number] = DPOperation_BackIndex
        DistPower_Control["unit_modes", table] = DistPower_UnitModes
        DistPower_Control["power/brake", number] = DistPower_FencePower
    }


    #Secondary screen interaction
    if(->EGPSec){
        EGPSec:handleSecondaryScreenInteraction(SB1, SB2, SB3, SB4, SB5, SB6, SB7, SB8)
        
        #Miscellaneous operation stuff:
        if(tickDiff("display_units", Units)){
            UpdateUnits = 1
        }


        #Banning the distributed power operation page
        if(SecPage == 11 & (DistPower_LocalEnable != 1)){
            SecPage = 0
            ForceUpdate_Sec = 1
        }
    }

    Brightness = clamp(Brightness, 0.15, 1)


    #Measure length
    if(MeasuringLength){
        local FPS = (KPH * 0.91134442)
        MeasuredLength += (FPS / 10) * (MeasuredLength < 99999 ? 1 : 0)
    }
    
    #Countdown length
    if(CountdownRun){
        if(CountdownLength > 0){
            local FPS = (KPH * 0.91134442)
            CountdownLength -= (FPS / 10)
        }elseif(CountdownLength <= 0){
            CountdownLength = 0
            CountdownRun = 0
        }
    }
    
    #Measured mile stuff
    if(MeasuredMileRun){ #Measured mile running
        #Elapsed time counter
        MMTimeElapsed += 0.1 * (MMTimeElapsed < 3600)
        
        #Speed check (every 0.1 mile until 1 mile is driven)
        MMDrivenDistance += (MPH / 36000)
        if(MMDrivenDistance > 0.1){
            MMSpeedChecks:pushNumber(MPH)
            MMDrivenDistance = 0
        }
        
        #If the check count has exceeded 10 (1 mile driven), then automatically stop the measured mile
        if(MMSpeedChecks:count() >= 10){
            MMFinished = 1
            MeasuredMileRun = 0
        }
        
        #If the time elapsed passes an hour (how the fu-), the measurement will fail
        if(MMTimeElapsed >= 3600){
            MMFinished = 1
            MeasuredMileRun = 0
            MMCheckFailed = 1
        }
    }
    
    #Measured mile finished
    if(tickDiff("measured_mile_finished", MMFinished) & MMFinished){
        MMSpeedSum = 0
        for(I = 1, MMSpeedChecks:count()){ #This does a fancy thing called-
            local SpeedAtKey = MMSpeedChecks[I, number]
            MMSpeedSum = MMSpeedSum + SpeedAtKey
        }
        MMAverageSpeed = (MMSpeedChecks:count() ? MMSpeedSum / MMSpeedChecks:count() : 0) #-the arithmetic mean
    }
    
    if(!MeasuredMileRun & MMFinished){
        if(MMAverageSpeed <= 0 | MMSpeedChecks:count() < 2){
            MMCheckFailed = 1
        }else{
            MMCheckFailed = 0
        }
    }


    #Display control output
    DISPLAY_CONTROL_BUS["dp", table] = DistPower_Control
    DP_DATA = DistPower_Control
    EOTDSetID = EIDStr:toNumber()


    #Handling page updates on the displays#
    #Main display
    if(->EGPMain){
        if(ForceUpdate_Main){
            EGPMain:egpClear()
            EGPMain:egpLoad(MainPage, 1, 0)
            EGPMain:egpLoadButtons(MainPage, 1, 0)
            ForceUpdate_Main = 0
        }
        if(ButtonUpdate_Main){
            EGPMain:egpLoadButtons(MainPage, 1, 0)
            ButtonUpdate_Main = 0
        }
    }
    
    #Secondary display
    if(->EGPSec){
        if(ForceUpdate_Sec){
            if(SecPage == 0 & SetupScreenLogo & !MainPagePort){ #Setup page logo
                holoCreate(1, EGPSec:entity():toWorld(vec(5.3, 0, 0)), SetupLogoScale, EGPSec:entity():toWorld(ang(90, 0, 0)), SetupLogoCol, "plane")
                holoMaterial(1, SetupLogoMat)
                holoDisableShading(1, 1)
            }

            EGPSec:egpClear()
            EGPSec:egpLoad(SecPage, 0, MainPagePort)
            EGPSec:egpLoadButtons(SecPage, 0, MainPagePort)
            ForceUpdate_Sec = 0
        }
        if(ButtonUpdate_Sec){
            EGPSec:egpLoadButtons(SecPage, 0, MainPagePort)
            ButtonUpdate_Sec = 0
        }
    }
    
    MB1 = MB2 = MB3 = MB4 = MB5 = MB6 = MB7 = MB8 = 0
    SB1 = SB2 = SB3 = SB4 = SB5 = SB6 = SB7 = SB8 = 0
    if(KeyTimeout){
        KeyTimeout = 0
    }
}


#Key controls
if(User:isValid() & !User:isPlayer()){
    if(Driver:isPlayer()){
        User = Driver
    }
}
if(Driver:isValid() & !Driver:isPlayer()){
    User = noentity()
    KeyCMD = ""
    IsShifting = 0
}

#User key press detection
event keyPressed(Player:entity, Key:string, Down:number, KeyBind:string) {
    if(Driver == Player & Running & CanRun){
        if(Down & !KeyTimeout){
            IsShifting = (Key == "lshift") | IsShifting
            KeyCMD = format("%d%s", IsShifting, Key)
            
            switch(KeyCMD){
                case "01", #Main buttons
                    MB1 = 1
                    break
                case "02",
                    MB2 = 1
                    break
                case "03",
                    MB3 = 1
                    break
                case "04",
                    MB4 = 1
                    break
                case "05",
                    MB5 = 1
                    break
                case "06",
                    MB6 = 1
                    break
                case "07",
                    MB7 = 1
                    break
                case "08",
                    MB8 = 1
                    break
                case "11", #Secondary buttons
                    SB1 = 1
                    break
                case "12",
                    SB2 = 1
                    break
                case "13",
                    SB3 = 1
                    break
                case "14",
                    SB4 = 1
                    break
                case "15",
                    SB5 = 1
                    break
                case "16",
                    SB6 = 1
                    break
                case "17",
                    SB7 = 1
                    break
                case "18",
                    SB8 = 1
                    break
            }
            KeyTimeout = 1
            
            if("12345678":find(Key)){
                (IsShifting ? EGPSec : EGPMain):entity():soundPlaySuper("key_click", 0.5, "monkssounds/buttons/button5.wav", 0.5, 100)
            }
        }elseif(!Down & Key == "lshift"){
            IsShifting = 0
        }
    }
}


if(Run){
    if(!timerExists("clk")){
        timer("clk", 0.1, function(){
            main()
            timerRestart("clk")
            
            #Handling the display update timer
            if(Running){
                if(!timerExists("clkDisp")){
                    updateDisp()
                    timer("clkDisp", 0.5, function(){
                        updateDisp()
                        UpdateUnits = 0
                        timerRestart("clkDisp")
                    })
                }
            }else{
                if(timerExists("clkDisp")){
                    stoptimer("clkDisp")
                }
            }
            #--
        })
    }
}

#Made by The Big Bean with moral and knowledge support from Chessie Computer


#Autonomous Validity And Legality Inspection
