@name locomotive_displays/mfds/EMD FIRE Display System by Big Bean V1
@inputs RLCPT:entity Pod:entity CtlTable:table [EGPMain EGPSec]:wirelink Battery Isolation UnitNumberOvr:string
@inputs RX_EOTPSI RX_EOTID  FuelLevel Priming Horn Bell ParkingBrake LoadShed UnitOverride
@outputs RX_EOTBrakePipe RX_EOTMPH EOTDSetID Running DrivenDistMI AlertEmergency BCI IsolatedBrakes EQResSetPSI DefoggerOn RailConditioner Length MMDrivenDistance MMSpeedChecks:table MMTimeElapsed
#----
#Generic variables
@persist Run  Units SkipBoot ShowCredits UseAlerter AlerterMaxVolume AlerterResetKey:string MaxSpeedoVelocity SetToAmps MaxTE MaxContTE MaxTMCurrent MaxContTMCurrent MaxDynCurrent MaxContDynCurrent FuelTankCap 
@persist BrakePanelYeet TimeFormat Timezone HasDST TimezoneName:string LocoDataInfo:table SetupScreenLogo [SetupLogoScale SetupLogoCol]:vector SetupLogoMat:string
@persist RLCPTW:wirelink [Driver User]:entity [UNIT_DATA SmoothTable]:table MainPage SecPage CanRun OSLoaded OSLoadProgress OSLoadBarPos OSLoading
@persist [White LightBlue DarkBlue LightPurple LightGreen LightRed OffWhite OnWhite OffRed OnRed OffYellow OnYellow OffBlue LightGray VLightGreen VLightYellow DarkerGreen DarkerYellow]:vector
@persist BCI AlerterOn AlerterReset  DrivenDistMI Accel MPH1 MPH2 ACheck Speed1 Speed2 AETripped FirmwareVersion:string TMCurrent  Year Month Day Hours Minutes Seconds  HTZ HoursTZ DayTZ MonthTZ YearTZ Font1:string
#----
#Add-on E2 vars
@persist LowFuel
#----
#RLC vars
@persist EqualRes BrakePipe AirFlow MainRes BrakeCyl  KPH KPHRaw MPH  Length Reverser Throttle SetBrakeNotch Notch Dynamics DynaBrakePower TractiveEffort Load WheelSlip Sanding
@persist PCSOpen On EngineNotch EngineSpeed IsLead
#----
#Page specific vars
@persist DynBrakeWarn UnitAlarm EOTMove  EID1 EID2 EID3 EID4 EID5 EIDStr:string
@persist MoreOptionsMain Brightness OPControlsPage  LengthCounterPage LengthChangePage MeasureLengthFinished MeasuredLength MeasuredLTooShort IL1 IL2 IL3 IL4 IL5 CountdownLength 
@persist MeasuringLength MeasuredMileRun MMFinished MMTimeElapsed MMCheckFailed MMAverageSpeed CountdownRun MMDrivenDistance MMSpeedChecks:table MMSpeedSum
@persist MainPagePort MoreOptionsSec  AirBrakePage ABLockout BCI_New IsoBrk_New EQSet_New  EOTIDSetup EOTDArmState CommTestResult CommTestRun CommTestFinished EOTDArmed EOTDSetID RearPres
#Commands & buttons
@persist [PressedKey KeyCMD]:string IsShifting KeyTimeout  MB1 MB2 MB3 MB4 MB5 MB6 MB7 MB8 SB1 SB2 SB3 SB4 SB5 SB6 SB7 SB8
#----
@trigger none
FirmwareVersion = "102.03"
#----
#[ Hello there.
This is a recreation of the EMD FIRE locomotive displays by, you guessed it, Big ol' Bean.
While not completely realistic, I think it's pretty solid for anybody who doesn't feel like spending over a year on something "pointless", so yeah, have fun using it.

------------
Version log:
------------
V:102.03 - Fixed the fonts being whack because EGP updated their default font.
--------
V:102.02 - So you know how the config says that you can change the units in-game? That's a feature now. Additionally changed the metric pressure units to kPa from bar (thanks West)
Whoops, finger slipped, added length counter as well. Merry Christmas!
--------
V:102.01 - Overhaul of basically every page, fixed some config stuff, cleaned up the old mess, added new loading screen for your pleasures (wow you updated V1 no way)
--------
V:101.xx - So old I forgot
--------

Setup:
------
>>Display setup & wiring:
1. Slap this E2 somewhere
2. Wire EGPMain and EGPSec to the primary and secondary displays
3. Wire RLCPT to the RLC (wow)
4. Wire Pod to the Pod controller (that was hard too eh?)
5. Wire CtlTable to the control stand controller
6. Wire Battery to your switch that should turn this on

>Additional inputs:
1. FuelLevel is for displaying the amount of fuel in your unit (US gallons)
2. Priming should be on when your unit is priming, so wire it to the either the PT2's output or to your primer button
3. Horn and Bell go to your horn and bell
4. ParkingBrake is basically the handbrake, just for detail really
5. LoadShed is just for the indicator, basically pointless
6. UnitOverride overrides the currently selected unit type, so that you can control their type from a remote button or whatever

>>EOTD setup & wiring:
First off, you'll want to use the older titus' EOTD E2 (the one that doesn't work with the wireless HOTD thing).

It's quite straight forward afterwards:
1. Add an output called EOTDID
2. Add this block of code to the bottom of the E2:
    local IDS = toString(Skin1) + toString(Skin2) + toString(Skin3) + toString(Skin4) + toString(Skin5)
    EOTDID = IDS:toNumber()
3. Put a normal wire radio onto the EOTD with at least two values (can be more but they won't be used). Channel can be left at 1 because it'll get overwritten anyway.
4. Next, put a second wire radio into your locomotive with, again, two values

>>EOTD side radio wiring setup:
1. EOTDPsi goes to input 1 on the radio
2. EOTDID goes to input 2 on the radio
3. EOTD's BrakePipe input goes to output 1 on the radio
4. EOTD's MPH input goes to output 2 on the radio

>>Locomotive side radio wiring setup:
1. RX_EOTPSI goes to output 1 on the radio
2. RX_EOTID goes to output 2 on the radio
3. RX_EOTBrakePipe goes to input 1 on the radio
4. RX_EOTMPH goes to input 2 on the radio

And that's all. Config's down below, you know what to do. Adios.
]#
if(first()|duped()){
    Run = 0
}
if(first()|dupefinished()){
    #-------
    #Config:
    #-------
    Units = 0 #Changes the DEFAULT units of values displayed (you can change them any time "in-game" later (0 = Imperial US, 1 = Metric))
    SkipBoot = 0 #Skips the bootup sequence (WARNING: This option is kinda broken and should only be used for debugging!)
    UseAlerter = 1 #For those who want to sleep during driving
    AlerterMaxVolume = 0.5 #Maximum volume of the alerter sound (set to 1 if you're deaf)
    AlerterResetKey = "T" #The key that you have to press to acknowledge that you're not dead
    MaxSpeedoVelocity = 80 #Sets the maximum velocity in MPH shown on the analog speedometer
    SetToAmps = 0 #When this is used, the Tractive Effort indicator will change to traction motor/dynamic brake current instead
    MaxTE = 200 #Maximum Tractive effort of the locomotive (ft-lbf)
    MaxContTE = 199 #Max continuous tractive effort (If it's the same as MaxTE, set it one below so that MaxTE on the TE bar isn't completely white, same applies for the currents)
    MaxTMCurrent = 2265 #Maximum traction motor current (Important note: Dynamic brake max TE relies on the max TM and DB currents, so make sure those are set up right)
    MaxContTMCurrent = 2264 #Maximum continuous traction motor current
    MaxDynCurrent = 755 #Maximum dynamic brake current
    MaxContDynCurrent = 754 #Maximum continuous dynamic brake current
    FuelTankCap = 5000 #Capacity of the locomotive's fuel tank (gal)
    BrakePanelYeet = 0 #YEETs the shit out of the brake panel on the main display (so that you can use it in an SD75I)
    TimeFormat = 1 #When 1, the time format will be set to the superior 24 hour format, otherwise it'll use the AM/PM type
    Timezone = 0 #Sets your current timezone (UTC + this many hours, note that this has to be the non-daylight saving time timezone, because DST is automatic, if it is turned on)
    HasDST = 1 #Tells the E2 whether or not the timezone has daylight saving, if it does, set this to 1
    TimezoneName = "CET" #The name of the timezone you are in
    LocoDataInfo = table(
    "SD70MAC", #Unit name
    "CSX", #Unit owner (Railroad, abbreviated)
    "4758" #Unit number (unless UnitNumberOvr is wired)
    )
    SetupScreenLogo = 0 #Creates a hologram for a logo that is sometimes present in the middle of the setup monitor main page
    SetupLogoScale = vec(0.3, 0.5, 1) #Scales the logo hologram, if your logo doesn't match the size it should be
    SetupLogoCol = vec(255, 255, 255)
    SetupLogoMat = "" #The actual logo
    
    #-------------#
    #End of config#
    #-------------#
    
    #Init:
    #-----
    #Unit data for value unit changing
    UNIT_DATA = table()
    #String values
    UNIT_DATA["KPH", string] = "KPH"
    UNIT_DATA["km", string] = "km"
    UNIT_DATA["kW", string] = "kW"
    UNIT_DATA["kN", string] = "kN"
    UNIT_DATA["m", string] = "m"
    UNIT_DATA["L", string] = "L"
    UNIT_DATA["C", string] = "C"
    UNIT_DATA["kPa", string] = "kPa"
    UNIT_DATA["Nm", string] = "Nm"
    #--
    UNIT_DATA["MPH", string] = "MPH"
    UNIT_DATA["mi", string] = "mi"
    UNIT_DATA["hp", string] = "hp"
    UNIT_DATA["kLb", string] = "kLb"
    UNIT_DATA["ft", string] = "ft"
    UNIT_DATA["Gal", string] = "Gal"
    UNIT_DATA["F", string] = "F"
    UNIT_DATA["PSI", string] = "PSI"
    UNIT_DATA["ft-lbf", string] = "ft-lbf"
    
    #Multipliers
    UNIT_DATA["M_km", number] = 1.609344
    UNIT_DATA["M_kW", number] = 0.746
    UNIT_DATA["M_N", number] = 4.4482216
    UNIT_DATA["M_m", number] = 0.3048
    UNIT_DATA["M_L", number] = 3.785412
    UNIT_DATA["M_C", number] = 1.8
    UNIT_DATA["M_kPa", number] = 6.89475729
    UNIT_DATA["M_Nm", number] = 1.3558179483
    
    #Var init
    MainPage = 0 #Main monitor pages (range: 0 - 2)
    SecPage = 0 #Secondary (setup) monitor pages (range: yes)
    AirBrakePage = 0
    
    Running = 0
    Brightness = 1
    EQResSetPSI = EQSet_New = 90
    BCI = BCI_New = 0
    IsolatedBrakes = IsoBrk_New = 0
    ABLockout = 0
    EOTDSetID = 0
    EOTDArmState = EOTDArmed = 0
    Font1 = "Arial"
    
    Running = 0
    White = vec(255)
    LightBlue = vec(130,230,245)
    OffBlue = vec(10,40,45)
    DarkBlue = vec(15, 30, 100)
    LightPurple = vec(220, 155, 245)
    LightGreen = vec(80,255,50)
    LightRed = vec(250,100,60)
    OffWhite = vec(32,30,28)
    OnWhite = vec(243,242,234)
    OffRed = vec(40,10,10)
    OnRed = vec(220,30,30)
    OffYellow = vec(40,40,10)
    OnYellow = vec(255,250,110)
    LightGray = vec(180)
    VLightGreen = vec(190, 255, 170)
    VLightYellow = vec(255, 250, 190)
    DarkerGreen = vec(70, 210, 40)
    DarkerYellow = vec(240, 210, 40)
    
    #EGP clearing
    EGPMain:egpResolution(vec2(0,0), vec2(1024,1024))
    EGPSec:egpResolution(vec2(0,0), vec2(1024,1024))
    EGPMain:egpClear()
    EGPSec:egpClear()
    
    setName("Immersive FIRE by Big Bean\nFirmware Version: " + FirmwareVersion + "\nNot as immersive, still just as hot")
    #End of init#
    #-----------#
    
    
    #Function declerations:
    #----------------------
    #Smoothie maker (smooths out values)
    function number smooth(Var, SmoothAmount, TID:string, DefaultVal){
        if(!SmoothTable:exists(TID)){
            SmoothTable[TID,number] = DefaultVal
        }
        local Smooth = SmoothTable[TID,number]
        Smooth += (Var - Smooth) / SmoothAmount
        SmoothTable[TID,number] = Smooth
        return Smooth
    }
    
    #Nope, definitely not the same as the dac function, what are you talking abou-
    function number throt2notch(Throt, MinThrot, MaxThrot, MaxNotch){
        local Out = 0
        if(inrange(Throt, MinThrot, MaxThrot)){
            local In = round(Throt)
            Out = ((In - MinThrot) / (MaxThrot - MinThrot)) * MaxNotch
        }elseif(Throt > MaxThrot){
            Out = MaxNotch
        }
        return Out
    }
    
    #Changes the month from a number to a string (abbreviated)
    function string monthNum2String(Month){
        local MonthOut = select(Month, "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC")
        return MonthOut
    }
    
    #A box with a top portion of it cut out for a label
    function void wirelink:egpBoxLabeled(Index, Pos:vector2, Size:vector2, Label:string){
        local E = This
        local LabLenPix = Label:length() * (10 + max(6 - Label:length(),0) / 0.5) + Label:length()
        
        E:egpBoxOutline(Index, vec2((Pos:x() + Size:x() / 2), (Pos:y() + Size:y() / 2)), Size)
        E:egpBox(Index + 1, vec2(Pos:x() + (Size:x() / 2), Pos:y()), vec2(LabLenPix, 15))
        E:egpColor(Index + 1, vec(0))
        E:egpTextLayout(Index + 2, Label, vec2(Pos:x(), Pos:y() - 13), vec2(Size:x(), 24))
        E:egpFont(Index + 2, "Arial", 12)
        E:egpAlign(Index + 2, 1, 1)
    }
    
    #A box with text in it
    function void wirelink:egpButton(Index, Pos:vector2, Size:vector2, Label:string, Color:vector){
        local E = This
        
        E:egpBox(Index, Pos, Size)
        E:egpColor(Index, Color)
        
        E:egpTextLayout(Index + 1, Label, vec2(Pos:x() - Size:x() / 2, Pos:y() - Size:y() / 2), vec2(Size:x(), Size:y()))
        E:egpColor(Index + 1, vec(0))
        E:egpFont(Index + 1, Font1, 12)
        E:egpAlign(Index + 1, 1, 1)
        
        E:egpBoxOutline(Index + 2, Pos, Size)
    }
    
    #A box with a blue background usually showing the name of a page
    function void wirelink:egpPageLabelBox(Index, Pos:vector2, Text:string){ #pos = vec2(512, 800)
        local E = This
        
        E:egpBox(Index, Pos, vec2(1012, 32))
        E:egpColor(Index, DarkBlue)
        
        E:egpBoxOutline(Index + 1, Pos, vec2(1016, 40))
        E:egpSize(Index + 1, 2)
        
        E:egpTextLayout(Index + 2, Text, vec2(0, Pos:y() - 16), vec2(1024, 32))
        E:egpFont(Index + 2, Font1, 16)
        E:egpAlign(Index + 2, 1, 1)
    }
    
    #Outputs a different color depending on the input state
    function vector indColor(On, OffColor:vector, OnColor:vector){
        local Out = OffColor
        if(On){ Out = OnColor }
        return Out
    }
    
    
    #A cool bootup thing for your eyes to enjoy
    #------------------------------------------
    function void wirelink:bootupScreenLoad(ShowOSScreen, SetupScreen){
        local E = This
        local Gray = vec(136)
        local Blue = vec(53, 75, 115)
        local Orange = vec(247, 140, 30)
        local DarkGray = vec(60)
        
        if(ShowOSScreen){
            if(!SetupScreen){ #Stuff to show if this is the main screen
                #OS logo
                local O = 1
                E:egpTextLayout(O, "Bean", vec2(142, 370), vec2(740, 240))
                E:egpFont(O, "Consolas Bold", 120)
                E:egpAlign(O, 0, 1)
                E:egpColor(O, Blue)
                
                O = 2
                E:egpTextLayout(O, "OS", vec2(142, 370), vec2(740, 240))
                E:egpFont(O, "Consolas Bold", 120)
                E:egpAlign(O, 2, 1)
                E:egpColor(O, Gray)
                
                O = 3
                E:egpText(O, ":", vec2(620, 490))
                E:egpFont(O, "Consolas Bold", 120)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, Orange)
                #---
                
                
                #Loading bar rim of the dark variety
                O = 4
                E:egpRoundedBox(O, vec2(512, 610), vec2(714, 32))
                E:egpRadius(O, 5)
                E:egpColor(O, DarkGray * vec(0.6))
                
                
                #Loading bar of the bright variety
                O = 5 #Bar center piece
                E:egpRoundedBox(O, vec2(0, 0), vec2(68, 24))
                E:egpRadius(O, 4)
                E:egpColor(O, Orange)
                
                O = 6 #Darker inner piece
                E:egpRoundedBox(O, vec2(0, 610), vec2(64, 20)) #range 100 - 924
                E:egpRadius(O, 4)
                E:egpColor(O, Orange * vec(0.95))
                E:egpParent(5, 6)
                
                
                #A rim of the loading bar rim of slightly brighter variety
                O = 12
                E:egpRoundedBoxOutline(O, vec2(512, 610), vec2(716, 36))
                E:egpRadius(O, 5)
                E:egpSize(O, 2)
                E:egpColor(O, DarkGray)
                
                O = 13 #Cover box right
                E:egpBox(O, vec2(950, 610), vec2(156, 32))
                E:egpColor(O, vec(0))
                
                O = 14 #Cover box left
                E:egpBox(O, vec2(74, 610), vec2(156, 32))
                E:egpColor(O, vec(0))
                #---
                
                
                #Won't be copying this any time soon my man
                O = 15
                E:egpTextLayout(O, format("Copyright BeanTek 2020-%04d\n All rights reserved", time("year")), vec2(620, 970), vec2(400, 50))
                E:egpFont(O, "Consolas", 12)
                E:egpAlign(O, 2, 1)
                E:egpColor(O, Gray)
                #----
            }
        }else{
            #"Starting Applications" box
            local O = 1
            E:egpBox(O, vec2(512, 512), vec2(512, 300))
            
            O = 2
            E:egpText(O, "Starting Applications...", vec2(512, 512))
            E:egpFont(O, "Arial", 20)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            if(!SetupScreen){
                #Firmware version indicator
                O = 3
                E:egpText(O, format("Firmware ver.: %s", FirmwareVersion), vec2(10, 1014))
                E:egpFont(O, "Arial", 18)
                E:egpAlign(O, 0, 2)
            }
        }
    }
    #----
    
    #The main function that loads all of the stuff on the EGP screens
    #----------------------------------------------------------------
    function void wirelink:egpLoad(Page, UpperPanelLoad, PortMainPages){
        local E = This
        
        if(UpperPanelLoad){
            local O = 0
            #----Upper panel (gauges and warnings)
            #Upper text (Driven distance, Unit RR & Number, Date, Time)
            O = 1
            E:egpTextLayout(O, format("%.0f " + "mi", 0), vec2(10,10), vec2(170,30))
            E:egpColor(O, LightBlue)
            E:egpFont(O, Font1, 15)
            E:egpAlign(O, 0, 0)
            
            O = 2
            E:egpTextLayout(O, LocoDataInfo[2,string] + " " + LocoDataInfo[3,string], vec2(205, 10), vec2(180,30))
            E:egpColor(O, LightBlue)
            E:egpFont(O, Font1, 15)
            E:egpAlign(O, 0, 0)
            
            O = 3
            E:egpTextLayout(O, "JAN 1, 2020", vec2(666, 10), vec2(180,30))
            E:egpColor(O, LightBlue)
            E:egpFont(O, Font1, 15)
            E:egpAlign(O, 0, 0)
            
            O = 4
            E:egpTextLayout(O, (TimeFormat ? "12:00:00 UTC" : "12:00 AM UTC"), vec2(839, 10), vec2(180,30))
            E:egpColor(O, LightBlue)
            E:egpFont(O, Font1, 15)
            E:egpAlign(O, 2, 0)
            
            
            if(!BrakePanelYeet){
                #Left indicator boxes
                E:egpBoxLabeled(5, vec2(10, 60), vec2(170, 170), "Equalizing Res")
                E:egpBoxLabeled(8, vec2(188, 60), vec2(170, 170), "Brake Pipe")
                E:egpBoxLabeled(11, vec2(9, 250), vec2(80, 70), "Rear")
                E:egpBoxLabeled(24, vec2(99, 250), vec2(80, 70), "Flow")
                E:egpBoxLabeled(28, vec2(187, 250), vec2(80, 70), "Main")
                E:egpBoxLabeled(32, vec2(277, 250), vec2(80, 70), "BC")
            }else{
                E:egpBoxLabeled(11, vec2(9, 250), vec2(80, 70), "Rear")
            }
            
            
            #Analog speedometer
            O = 36 #Outter rim
            E:egpCircle(O, vec2(512, 180), vec2(148, 148))
            
            O = 37
            E:egpCircle(O, vec2(512,180), vec2(144,144))
            E:egpColor(O, vec(0))
            
            O = 38
            E:egpBox(O, vec2(512, 300), vec2(204, 60))
            E:egpColor(O, vec(0))
            
            #Gauge lines
            O = 39 #Lowest left
            E:egpBox(O, vec2(512, 180), vec2(20,2))
            E:egpAngle(O, vec2(420, 274), vec2(0, 0), 45)
            
            O = 40 #Lowest right
            E:egpBox(O, vec2(512, 180), vec2(20,2))
            E:egpAngle(O, vec2(606, 276), vec2(0, 0), -45)
            
            O = 41 #Top
            E:egpBox(O, vec2(512, 180), vec2(30,2))
            E:egpAngle(O, vec2(512, 52), vec2(0, 0), -90)
            
            O = 42 #Left side main
            E:egpBox(O, vec2(512, 180), vec2(15,2))
            E:egpAngle(O, vec2(393, 242), vec2(0, 0), 30)
            
            O = 43
            E:egpBox(O, vec2(512, 180), vec2(25,2))
            E:egpAngle(O, vec2(385, 205), vec2(0, 0), 10)
            
            O = 44
            E:egpBox(O, vec2(512, 180), vec2(18,2))
            E:egpAngle(O, vec2(377, 166), vec2(0, 0), -10)
            
            O = 45
            E:egpBox(O, vec2(512, 180), vec2(25,2))
            E:egpAngle(O, vec2(388, 130), vec2(0, 0), -30)
            
            O = 46
            E:egpBox(O, vec2(512, 180), vec2(15,2))
            E:egpAngle(O, vec2(406, 95), vec2(0, 0), -50)
            
            O = 47
            E:egpBox(O, vec2(512, 180), vec2(28,2))
            E:egpAngle(O, vec2(438, 72), vec2(0, 0), -65)
            
            O = 48
            E:egpBox(O, vec2(512, 180), vec2(15,2))
            E:egpAngle(O, vec2(472, 50), vec2(0, 0), -80)
            
            
            O = 49 #Right side main
            E:egpBox(O, vec2(512, 180), vec2(15,2))
            E:egpAngle(O, vec2(632, 242), vec2(0, 0), -30)
            
            O = 50
            E:egpBox(O, vec2(512, 180), vec2(25,2))
            E:egpAngle(O, vec2(640, 205), vec2(0, 0), -10)
            
            O = 51
            E:egpBox(O, vec2(512, 180), vec2(18,2))
            E:egpAngle(O, vec2(647, 166), vec2(0, 0), 10)
            
            O = 52
            E:egpBox(O, vec2(512, 180), vec2(25,2))
            E:egpAngle(O, vec2(636, 130), vec2(0, 0), 30)
            
            O = 53
            E:egpBox(O, vec2(512, 180), vec2(15,2))
            E:egpAngle(O, vec2(616, 93), vec2(0, 0), 50)
            
            O = 54
            E:egpBox(O, vec2(512, 180), vec2(28,2))
            E:egpAngle(O, vec2(584, 72), vec2(0, 0), 65)
            
            O = 55
            E:egpBox(O, vec2(512, 180), vec2(15,2))
            E:egpAngle(O, vec2(550, 50), vec2(0, 0), 80)
            
            
            
            #Numbers
            O = 56
            E:egpText(O, "0", vec2(430, 245))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 0, 0)
            
            O = 57
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1) * 0.125), vec2(405, 190))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 0, 0)
            
            O = 58
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1) * 0.25), vec2(405, 130))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 0, 0)
            
            O = 59
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1) * 0.375), vec2(440, 86))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 0, 0)
            
            O = 60
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1) * 0.5), vec2(512, 65))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 0)
            
            O = 61
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1) * 0.625), vec2(580, 86))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 2, 0)
            
            O = 62
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1) * 0.75), vec2(625, 130))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 2, 0)
            
            O = 63
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1) * 0.875), vec2(625, 190))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 2, 0)
            
            O = 64
            E:egpText(O, format("%.0f", MaxSpeedoVelocity * (Units ? UNIT_DATA["M_km", number] : 1)), vec2(595, 245))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 2, 0)
            
            
            O = 65 #Gauge needle
            E:egpCircle(O, vec2(512, 180), vec2(72, 6))
            E:egpColor(O, LightRed)
            E:egpAngle(O, vec2(512, 180), vec2(-72, 0), 46) #46 - 271
            
            O = 66 #Gauge center
            E:egpCircle(O, vec2(512,180), vec2(15,15))
            E:egpColor(O, vec(100))
            
            #Right indicator boxes
            E:egpBoxLabeled(67, vec2(670, 60), vec2(110, 70), "Accel")
            E:egpBoxLabeled(70, vec2(788, 60), vec2(110, 70), "Length")
            E:egpBoxLabeled(73, vec2(906, 60), vec2(110, 70), "Reverser")
            E:egpBoxLabeled(76, vec2(669, 140), vec2(228, 120), "Consist Effort")
            E:egpBoxLabeled(79, vec2(669, 200), vec2(228, 60), (SetToAmps ? "Amps" : "Tractive Effort"))
            E:egpBoxLabeled(82, vec2(906, 140), vec2(110, 120), "TH Handle")
            
            
            #Tractive effort bar
            local MaxTE_Actual = (Dynamics ? MaxTE * (MaxDynCurrent / MaxTMCurrent) : MaxTE) #This calculates the "approximate" max tractive effort for dynamics
            local MaxContTE_Actual = (Dynamics ? MaxContTE * (MaxContDynCurrent / MaxTMCurrent) : MaxContTE)
            local MaxCurrent_Act = (Dynamics ? MaxDynCurrent : MaxTMCurrent)
            local MaxContCurrent_Act = (Dynamics ? MaxContDynCurrent : MaxContTMCurrent)
            local ActualDiff = (SetToAmps ? (MaxContCurrent_Act / MaxCurrent_Act) : (MaxContTE_Actual / MaxTE_Actual))
            
            O = 85 #White part
            E:egpBox(O, vec2(round(690 + (ActualDiff * 300) / 2,0), 292), vec2(round(ActualDiff * 300 + 1,0), 6))
            O = 86 #Yellow part
            E:egpBox(O, vec2(round((690 + (ActualDiff * 300)) + (300 - ActualDiff * 300) / 2,0), 292), vec2(round(300 - ActualDiff * 300,0) + 1, 6))
            E:egpColor(O, OnYellow)
            
            #Pointers and numbers
            for(I = 1, 5){
                local Izero = (I - 1)
                local Index = (Izero * 2 + 87)
                
                #Pointer generation
                E:egpBox(Index, vec2(690 + Izero * 75, 299), vec2(4, 18))
                E:egpColor(Index, (ActualDiff <= (Izero / 4) ? OnYellow : vec(255)))
                
                #Numbers
                E:egpText(Index + 1, format("%.0f", (SetToAmps ? MaxCurrent_Act : MaxTE_Actual * (Units ? UNIT_DATA["M_N", number] : 1)) * (Izero / 4)), vec2(690 + Izero * 75, 276))
                E:egpFont(Index + 1, Font1, 14)
                E:egpAlign(Index + 1, 1, 1)
                E:egpColor(Index + 1, (ActualDiff <= (Izero / 4) ? OnYellow : vec(255)))
            }
            
            
            #Bar needle... thing
            O = 97
            E:egpTriangle(O, vec2(680, 308), vec2(700, 308), vec2(690, 296))
            E:egpColor(O, LightGreen)
            
            O = 98
            E:egpBox(O, vec2(690, 313), vec2(22, 8))
            E:egpColor(O, LightGreen)
            
            
            if(!BrakePanelYeet){
                #Value init (from left to right)
                O = 99 #ER
                E:egpTextLayout(O, "0", vec2(9, 80), vec2(170, 150))
                E:egpFont(O, Font1, 55)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightGreen)
                
                O = 100 #BP
                E:egpTextLayout(O, "0", vec2(187, 80), vec2(170, 150))
                E:egpFont(O, Font1, 55)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightGreen)
                
                O = 101 #Rear
                E:egpTextLayout(O, "?", vec2(9, 265), vec2(80, 50))
                E:egpFont(O, Font1, 25)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightGreen)
                
                O = 102 #Flow
                E:egpTextLayout(O, "0", vec2(99, 265), vec2(80, 50))
                E:egpFont(O, Font1, 25)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightGreen)
                
                O = 103 #Main
                E:egpTextLayout(O, "0", vec2(187, 265), vec2(80, 50))
                E:egpFont(O, Font1, 25)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightRed)
                
                O = 104 #Cyl
                E:egpTextLayout(O, "0", vec2(277, 265), vec2(80, 50))
                E:egpFont(O, Font1, 25)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightGreen)
            }else{
                O = 101 #Rear
                E:egpTextLayout(O, "?", vec2(9, 265), vec2(80, 50))
                E:egpFont(O, Font1, 25)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightGreen)
            }
            
            
            #Speed readout
            O = 105
            E:egpTextLayout(O, "0.0", vec2(405, 185), vec2(200, 150))
            E:egpFont(O, Font1, 44)
            E:egpAlign(O, 1, 2)
            E:egpColor(O, LightGreen)
            
            O = 106
            E:egpText(O, (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string]), vec2(565, 320))
            E:egpFont(O, Font1, 16)
            E:egpAlign(O, 0, 2)
            E:egpColor(O, LightGreen)
            
            
            O = 107 #Accel
            E:egpTextLayout(O, "0", vec2(660, 80), vec2(80, 32))
            E:egpFont(O, Font1, 16)
            E:egpAlign(O, 1, 2)
            E:egpColor(O, LightGreen)
            
            O = 108
            E:egpTextLayout(O, (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string]), vec2(710, 65), vec2(80, 32))
            E:egpFont(O, Font1, 12)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, LightGreen)
            
            O = 109
            E:egpBox(O, vec2(750, 96), vec2(40, 2))
            E:egpColor(O, LightGreen)
            
            O = 110
            E:egpTextLayout(O, "min", vec2(710, 96), vec2(80, 24))
            E:egpFont(O, Font1, 12)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, LightGreen)
            
            O = 111 #Length
            E:egpTextLayout(O, "0", vec2(788, 80), vec2(80, 32))
            E:egpFont(O, Font1, 16)
            E:egpAlign(O, 2, 1)
            E:egpColor(O, LightBlue)
            
            O = 112
            E:egpTextLayout(O, (Units ? UNIT_DATA["m", string] : UNIT_DATA["ft", string]), vec2(865, 80), vec2(32, 32))
            E:egpFont(O, Font1, 16)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, LightBlue)
            
            O = 113 #Reverser position
            E:egpTextLayout(O, "Center", vec2(904, 80), vec2(110, 32))
            E:egpFont(O, Font1, 16)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, LightBlue)
            
            
            #Consist effort ratio (capable:total units)
            O = 114
            E:egpText(O, "0:1", vec2(700, 174))
            E:egpFont(O, Font1, 18)
            E:egpAlign(O, 1, 1)
            
            #Consist power state (P/D)
            O = 115
            E:egpText(O, "P", vec2(740, 174))
            E:egpFont(O, Font1, 18)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, LightGreen)
            
            #Consist tractive effort readout
            O = 116
            E:egpText(O, "0", vec2(830, 174))
            E:egpFont(O, Font1, 18)
            E:egpAlign(O, 2, 1)
            E:egpColor(O, LightGreen)
            
            #TE unit
            O = 117
            E:egpText(O, (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string]), vec2(840, 174))
            E:egpFont(O, Font1, 18)
            E:egpAlign(O, 0, 1)
            E:egpColor(O, LightGreen)
            
            
            #Tractive effort readout
            O = 118
            E:egpText(O, "0", vec2(784, 234))
            E:egpFont(O, Font1, 18)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, LightGreen)
            
            O = 119
            E:egpText(O, (SetToAmps ? "A" : (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string])), vec2(840, 234))
            E:egpFont(O, Font1, 18)
            E:egpAlign(O, 0, 1)
            E:egpColor(O, LightGreen)
            
            
            #Throttle
            O = 120
            E:egpTextLayout(O, "Idle", vec2(905, 150), vec2(110, 110))
            E:egpFont(O, Font1, 28)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, LightGreen)
            #----Upper panel end
            
            
            
            #----Warning indicators
            O = 121 #Separator lines
            E:egpBox(O, vec2(512, 325), vec2(1024, 4))
            E:egpColor(O, LightBlue)
            
            O = 122
            E:egpBox(O, vec2(512, 405), vec2(1024, 4))
            E:egpColor(O, LightBlue)
            
            #Warnings
            O = 123 #Wheel slip
            E:egpBox(O, vec2(42, 365), vec2(82, 76))
            E:egpColor(O, OffWhite)
            
            O = 124
            E:egpTextLayout(O, "WHEEL SLIP", vec2(2, 327), vec2(82, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            O = 125 #PCS Open
            E:egpBox(O, vec2(128, 365), vec2(82, 76))
            E:egpColor(O, OffRed)
            
            O = 126
            E:egpTextLayout(O, "PCS OPEN", vec2(88, 327), vec2(82, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            #Blank
            
            O = 127 #Dyn brake
            E:egpBox(O, vec2(300, 365), vec2(82, 76))
            E:egpColor(O, OffYellow)
            
            O = 128
            E:egpTextLayout(O, "DYN BRAKE", vec2(260, 327), vec2(82, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            O = 129 #Load shed
            E:egpBox(O, vec2(386, 365), vec2(82, 76))
            E:egpColor(O, OffYellow)
            
            O = 130
            E:egpTextLayout(O, "LOAD SHED", vec2(346, 327), vec2(82, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            O = 131 #Alerter
            E:egpBox(O, vec2(512, 365), vec2(164, 76))
            E:egpColor(O, OffRed)
            
            O = 132
            E:egpTextLayout(O, "ALERT", vec2(432, 327), vec2(164, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            O = 133 #Unit alarm
            E:egpBox(O, vec2(640, 365), vec2(82, 76))
            E:egpColor(O, OffYellow)
            
            O = 134
            E:egpTextLayout(O, "UNIT ALARM", vec2(600, 327), vec2(82, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            #Blank
            
            O = 135 #AB Fault
            E:egpBox(O, vec2(812, 365), vec2(82, 76))
            E:egpColor(O, OffRed)
            
            O = 136
            E:egpTextLayout(O, "AB FAIL", vec2(772, 327), vec2(82, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            
            #Blank
            
            O = 137 #EOT move
            E:egpBox(O, vec2(984, 365), vec2(82, 76))
            E:egpColor(O, OffWhite)
            
            O = 138
            E:egpTextLayout(O, "EOT MOVE", vec2(944, 327), vec2(82, 76))
            E:egpFont(O, Font1, 14)
            E:egpAlign(O, 1, 1)
            E:egpColor(O, vec(0))
            #----End of warning indicators
            
            
            
            
            #----Lower section stuff
            if(Page == 0 | Page == 3 | Page == 4){ #This makes it so the lower portion loads only on specific pages
                #Other indicators
                #Horn
                O = 139
                E:egpTriangle(O, vec2(800, 440), vec2(800, 420), vec2(840, 430))
                E:egpColor(O, OffBlue)
                
                O = 140
                E:egpBox(O, vec2(832, 432), vec2(4, 16))
                E:egpColor(O, OffBlue)
                
                #Bell
                O = 141
                E:egpTriangle(O, vec2(860, 450), vec2(888, 450), vec2(874, 418))
                E:egpColor(O, OffBlue)
                
                O = 142
                E:egpCircle(O, vec2(874, 450), vec2(4, 4))
                E:egpColor(O, OffBlue)
                
                #Sanding
                O = 143
                E:egpTriangle(O, vec2(910, 450), vec2(940, 450), vec2(920, 430))
                E:egpColor(O, OffYellow)
                
                O = 144
                E:egpBox(O, vec2(920, 426), vec2(4, 12))
                E:egpColor(O, OffYellow)
                
                #Low fuel
                O = 145
                E:egpBox(O, vec2(980, 440), vec2(14, 20))
                E:egpColor(O, OffYellow)
                
                O = 146
                E:egpBoxOutline(O, vec2(980, 424), vec2(14, 14))
                E:egpColor(O, OffYellow)
                
                O = 147
                E:egpBox(O, vec2(988, 446), vec2(4, 4))
                E:egpColor(O, OffYellow)
                
                O = 148
                E:egpBox(O, vec2(992, 436), vec2(4, 20))
                E:egpColor(O, OffYellow)
                
                
                #Lower display portion
                #Fuel quantity
                O = 149
                E:egpTextLayout(O, "FUEL QUANTITY", vec2(45, 480), vec2(250, 28))
                E:egpFont(O, Font1, 14)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightBlue)
                
                O = 150
                E:egpTextLayout(O, "? " + (Units ? UNIT_DATA["L", string] : UNIT_DATA["Gal", string]), vec2(45, 505), vec2(250, 40))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 1, 1)
                
                #Air brake setup
                O = 151
                E:egpTextLayout(O, "AIR BRAKE SETUP", vec2(45, 540), vec2(250, 28))
                E:egpFont(O, Font1, 14)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightBlue)
                
                O = 152
                E:egpTextLayout(O, "TRAILING", vec2(45, 565), vec2(250, 40))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 1, 1)
                
                
                #Last car
                O = 153
                E:egpTextLayout(O, "LAST CAR", vec2(388, 480), vec2(250, 28))
                E:egpFont(O, Font1, 14)
                E:egpAlign(O, 1, 1)
                E:egpColor(O, LightBlue)
                
                O = 154
                E:egpTextLayout(O, "IDENT 0", vec2(388, 510), vec2(250, 40))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 1, 1)
            }
            
            if(Page == 0){
                #Message box
                O = 247
                E:egpBoxOutline(O, vec2(512, 898), vec2(1024, 80))
                E:egpSize(O, 2)
                E:egpColor(O, OnYellow)
                
                #Message box text layouts
                O = 248
                E:egpTextLayout(O, "", vec2(0, 866), vec2(1024, 32))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 1, 0)
            
                O = 249
                E:egpTextLayout(O, "", vec2(0, 898), vec2(1024, 32))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 1, 0)
            }
        }
        
        
        
        
        if(UpperPanelLoad | PortMainPages){
            switch(Page){
                case 3, #Operator controls
                    switch(OPControlsPage){
                        case 0, #Main page
                            E:egpPageLabelBox(174, vec2(512, 800), "Operator Controls")
                            
                            #Blower status box
                            E:egpBoxLabeled(177, vec2(768, 858), vec2(128, 72), "Blower")
                            
                            #Blower status text
                            O = 180
                            E:egpText(O, "Off", vec2(832, 898))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            break
                        case 1, #Climate control page
                            E:egpPageLabelBox(174, vec2(512, 800), "Cab Climate Control System")
                            
                            #Defogger status box
                            E:egpBoxLabeled(177, vec2(768, 858), vec2(128, 72), "Defog")
                            
                            #Defogger status text
                            O = 180
                            E:egpText(O, "Off", vec2(832, 898))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            break
                        case 2, #Display setup page
                            E:egpPageLabelBox(174, vec2(512, 800), "Display Setup")
                            
                            #Brightness % box
                            E:egpBoxLabeled(177, vec2(0, 858), vec2(256, 72), "Screen Brightness")
                            
                            #Brightness % text
                            O = 180
                            E:egpTextLayout(O, "100%", vec2(0, 856), vec2(256, 80))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            #Display mode box
                            E:egpBoxLabeled(181, vec2(256, 858), vec2(256, 72), "Display mode")
                            
                            #Brightness % text
                            O = 184
                            E:egpTextLayout(O, "Engineer Primary", vec2(256, 856), vec2(256, 80))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            #Unit change button
                            E:egpBoxLabeled(185, vec2(768, 858), vec2(128, 72), "Units")
                            
                            #Current units
                            O = 188
                            E:egpText(O, (Units ? "Metric" : "Imper."), vec2(832, 898))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                                                        
                            break
                    }
                    break
                    #----
                case 4, #Length counter
                    switch(LengthCounterPage){
                        case 0, #Main page
                            #Page label box
                            E:egpPageLabelBox(174, vec2(512, 800), "Length Counter")
                            
                            break
                        case 1, #Length change page
                            switch(LengthChangePage){
                                case 0, #Main page
                                    #I mean you get the idea at this point
                                    E:egpPageLabelBox(174, vec2(512, 800), "Change Length")
                                    
                                    #Measured length
                                    
                                    break
                                case 1, #Measure length page
                                    E:egpPageLabelBox(174, vec2(512, 800), "Train Length Counter Functions")
                                    local LUnits = (Units ? "Meters" : "Feet")
                                    local LUnitMult = (Units ? UNIT_DATA["M_m", number] : 1)
                                    
                                    if(!MeasureLengthFinished){
                                        #Current measured length
                                        O = 177
                                        E:egpText(O, format("%.0f", MeasuredLength * LUnitMult), vec2(320, 890))
                                        E:egpFont(O, Font1, 18)
                                        E:egpAlign(O, 1, 1)
                                        
                                        #Units
                                        O = 178
                                        E:egpText(O, format("%s", LUnits), vec2(420, 890))
                                        E:egpFont(O, Font1, 18)
                                        E:egpAlign(O, 1, 1)
                                        E:egpColor(O, LightBlue)
                                    }else{
                                        #Info text
                                        O = 177 #Short length warning
                                        E:egpText(O, (MeasuredLTooShort ? "The measured length is too short!" : ""), vec2(20, 880))
                                        E:egpFont(O, Font1, 18)
                                        E:egpAlign(O, 0, 1)
                                        
                                        #Previous length
                                        O = 178
                                        E:egpText(O, format("The previous length was %.0f %s", Length * LUnitMult, LUnits), vec2(20, 920))
                                        E:egpFont(O, Font1, 18)
                                        E:egpAlign(O, 0, 1)
                                        E:egpColor(O, LightBlue)
                                    }
                                        
                                    
                                    break
                                case 2, #Enter length page
                                    E:egpPageLabelBox(174, vec2(512, 800), "Enter Length")
                                    
                                    #Current input length readout
                                    O = 177
                                    E:egpText(O, format("%01d  %01d  %01d  %01d  %01d", IL1, IL2, IL3, IL4, IL5), vec2(448, 860))
                                    E:egpFont(O, Font1, 18)
                                    E:egpAlign(O, 1, 1)
                                    
                                    O = 178
                                    E:egpText(O, format("%s", (Units ? "Meters" : "Feet")), vec2(530, 860))
                                    E:egpFont(O, Font1, 18)
                                    E:egpAlign(O, 0, 1)
                                    #---
                                    
                                    #Digit underlines
                                    O = 179
                                    E:egpBox(O, vec2(384, 884), vec2(22, 6))
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 180
                                    E:egpBox(O, vec2(416, 884), vec2(22, 6))
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 181
                                    E:egpBox(O, vec2(448, 884), vec2(22, 6))
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 182
                                    E:egpBox(O, vec2(480, 884), vec2(22, 6))
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 183
                                    E:egpBox(O, vec2(512, 884), vec2(22, 6))
                                    E:egpColor(O, LightBlue)
                                    #---
                                    
                                    #Connection lines
                                    O = 184
                                    E:egpLine(O, vec2(192, 940), vec2(384, 886))
                                    E:egpSize(O, 2)
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 185
                                    E:egpLine(O, vec2(320, 940), vec2(416, 886))
                                    E:egpSize(O, 2)
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 186
                                    E:egpLine(O, vec2(448, 940), vec2(448, 886))
                                    E:egpSize(O, 2)
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 187
                                    E:egpLine(O, vec2(576, 940), vec2(480, 886))
                                    E:egpSize(O, 2)
                                    E:egpColor(O, LightBlue)
                                    
                                    O = 188
                                    E:egpLine(O, vec2(704, 940), vec2(512, 886))
                                    E:egpSize(O, 2)
                                    E:egpColor(O, LightBlue)
                                    #---
                                    
                                    #Invalid length text
                                    O = 189
                                    E:egpText(O, "Invalid Length", vec2(1018, 890)) #Invalid Length
                                    E:egpFont(O, Font1, 16)
                                    E:egpAlign(O, 2, 1)
                                    E:egpColor(O, OnRed)
                                    
                                    break
                            }
                            break
                        case 2, #Length countdown page
                            E:egpPageLabelBox(174, vec2(512, 800), "Countdown Length")
                            local LUnits = (Units ? "Meters" : "Feet")
                            local LUnitMult = (Units ? UNIT_DATA["M_m", number] : 1)
                            
                            #Length
                            O = 177
                            E:egpText(O, format("%.0f", CountdownLength * LUnitMult), vec2(576, 904))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            
                            #Units
                            O = 178
                            E:egpText(O, format("%s", LUnits), vec2(676, 904))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                                                                                
                            break
                        case 3, #Measured mile page
                            E:egpPageLabelBox(174, vec2(512, 800), "Measured Mile")
                            
                            O = 177 #Elapsed time
                            E:egpText(O, "Time Mile Posts", vec2(192, 850))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            O = 178 #Time readout
                            E:egpText(O, format("%02d:%02d", 0, 0), vec2(192, 890))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightPurple)
                            
                            O = 179 #Average speed for Measured Mile text placeholder
                            E:egpText(O, "", vec2(800, 850))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            O = 180 #Average speed / Speed Check invalid message
                            E:egpText(O, "", vec2(800, 890))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightPurple)
                            
                            
                            break
                    }
                    break
                    #----
            }
            #End of main monitor stuff#
        }
        #----
        
        
        
        
        #Secondary monitor stuffs:
        #-------------------------
        if(!UpperPanelLoad & !PortMainPages){
            local O = 0
            
            if(Page == 0){ #Upper portion stuffs
                #Month, day, year
                O = 1
                E:egpText(O, format("%s %01d, %04d", "JAN", 1, 2020), vec2(6, 6))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 0, 0)
                
                #Time
                O = 2
                E:egpText(O, (TimeFormat ? "12:00:00 UTC" : "12:00 AM UTC"), vec2(6, 38))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 0, 0)
                
                #Unit RR and number
                O = 3
                E:egpText(O, format("%s %s", LocoDataInfo[2, string], LocoDataInfo[3, string]), vec2(1018, 6))
                E:egpFont(O, Font1, 16)
                E:egpAlign(O, 2, 0)
            }
        }
        
        if(!UpperPanelLoad & !PortMainPages){
            switch(Page){
                case 5, #Air brake setup
                    #Label
                    E:egpPageLabelBox(4, vec2(512, 800), (AirBrakePage ? "EQ Reservoir Setup" : "Air Brake Setup"))
                    
                    switch(AirBrakePage){
                        case 0, #Main page
                            O = 7 #Air brake setup change warn
                            E:egpText(O, "", vec2(20, 840)) #Reverser must be centered to be setup as trail.
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 0, 1)
                            E:egpColor(O, LightBlue)
                            
                            #New values
                            O = 8
                            E:egpText(O, "NEW", vec2(64, 890))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            
                            O = 9
                            E:egpText(O, "0 " + (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string]), vec2(192, 890))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            
                            O = 10
                            E:egpText(O, "TRAIL", vec2(320, 890))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            
                            O = 11
                            E:egpText(O, "CUT IN", vec2(448, 890))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            
                            #Current values
                            O = 12
                            E:egpText(O, "CURRENT", vec2(64, 920))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            O = 13
                            E:egpText(O, "0 " + (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string]), vec2(192, 920))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            O = 14
                            E:egpText(O, "TRAIL", vec2(320, 920))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            O = 15
                            E:egpText(O, "CUT IN", vec2(448, 920))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            break
                        case 1, #EQ res setup
                            O = 7 #Displayed pressure
                            E:egpText(O, "0 " + (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string]), vec2(256, 870))
                            E:egpFont(O, Font1, 16)
                            E:egpAlign(O, 1, 1)
                            
                            O = 8 #Value underline
                            E:egpBox(O, vec2(256, 890), vec2(40, 6))
                            E:egpColor(O, LightBlue)
                            
                            O = 9 #Pointer line (Decrease)
                            E:egpLine(O, vec2(192, 930), vec2(256, 890))
                            E:egpColor(O, LightBlue)
                            E:egpSize(O, 2)
                            
                            O = 10 #Pointer line (Increase)
                            E:egpLine(O, vec2(320, 930), vec2(256, 890))
                            E:egpColor(O, LightBlue)
                            E:egpSize(O, 2)
                            
                            break
                    }
                    break
                    #----
                case 7, #EOT ID
                    
                    if(!EOTIDSetup){ #Main EOTD page
                        #Yes, the label again, you won't get rid of it... ever
                        E:egpPageLabelBox(4, vec2(512, 800), "End of Train Identification")
                        
                        #EOT ID box
                        E:egpBoxLabeled(7, vec2(2, 858), vec2(126, 72), "EOT ID")
                        
                        #Current ID
                        O = 10
                        E:egpText(O, "0", vec2(64, 892))
                        E:egpFont(O, Font1, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, LightBlue)
                        
                        #EOT Arm state
                        E:egpBoxLabeled(11, vec2(130, 858), vec2(382, 72), "Arm State")
                        
                        #Arm state readout
                        O = 14
                        E:egpText(O, "?", vec2(320, 892))
                        E:egpFont(O, Font1, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, LightGreen)
                        
                        #EOT ID box
                        E:egpBoxLabeled(15, vec2(642, 858), vec2(126, 72), "Comm Test")
                        
                        #Current ID
                        O = 18
                        E:egpText(O, "-", vec2(704, 892))
                        E:egpFont(O, Font1, 18)
                        E:egpAlign(O, 1, 1)
                        E:egpColor(O, LightBlue)

                        
                    }else{ #Change EOT ID
                        E:egpPageLabelBox(4, vec2(512, 800), "Change EOT ID")
                    
                        O = 7 #EOT ID readout text
                        E:egpText(O, format("%01d  %01d  %01d  %01d  %01d", EID1, EID2, EID3, EID4, EID5), vec2(448, 860))
                        E:egpFont(O, Font1, 18)
                        E:egpAlign(O, 1, 1)
                        
                        #Number underlines
                        O = 8
                        E:egpBox(O, vec2(384, 876), vec2(22, 4))
                        E:egpColor(O, LightBlue)
                        
                        O = 9
                        E:egpBox(O, vec2(416, 876), vec2(22, 4))
                        E:egpColor(O, LightBlue)
                        
                        O = 10
                        E:egpBox(O, vec2(448, 876), vec2(22, 4))
                        E:egpColor(O, LightBlue)
                        
                        O = 11
                        E:egpBox(O, vec2(480, 876), vec2(22, 4))
                        E:egpColor(O, LightBlue)
                        
                        O = 12
                        E:egpBox(O, vec2(512, 876), vec2(22, 4))
                        E:egpColor(O, LightBlue)
                        
                        #Connection lines
                        O = 13
                        E:egpLine(O, vec2(192, 930), vec2(384, 878))
                        E:egpSize(O, 2)
                        E:egpColor(O, LightBlue)
                        
                        O = 14
                        E:egpLine(O, vec2(320, 930), vec2(416, 878))
                        E:egpSize(O, 2)
                        E:egpColor(O, LightBlue)
                        
                        O = 15
                        E:egpLine(O, vec2(448, 930), vec2(448, 878))
                        E:egpSize(O, 2)
                        E:egpColor(O, LightBlue)
                        
                        O = 16
                        E:egpLine(O, vec2(576, 930), vec2(480, 878))
                        E:egpSize(O, 2)
                        E:egpColor(O, LightBlue)
                        
                        O = 17
                        E:egpLine(O, vec2(704, 930), vec2(512, 878))
                        E:egpSize(O, 2)
                        E:egpColor(O, LightBlue)
                    }
                    
                    break
                    #----
            }
            
        }
    }
    #----
    
    
    
    #All the button presets on each page
    #-----------------------------------
    function void wirelink:egpLoadButtons(Page, UpperPanelLoad, PortMainPages){ #All the buttons presets on each page
        E = This
        
        if(UpperPanelLoad | PortMainPages){
            switch(Page){
                case 0, #Main page
                    switch(MoreOptionsMain){
                        case 0,
                            E:egpButton(250, vec2(448, 980), vec2(126, 80), "Consist   Monitor", LightBlue)
                            E:egpButton(253, vec2(576, 980), vec2(126, 80), "Crew  Message", LightBlue)
                            E:egpButton(256, vec2(960, 980), vec2(126, 80), "More Choices", LightGreen)
                            
                            break
                        case 1,
                            E:egpButton(250, vec2(64, 980), vec2(126, 80), "Brighter", OffBlue)
                            E:egpButton(253, vec2(192, 980), vec2(126, 80), "Dimmer", LightBlue)
                            E:egpButton(256, vec2(448, 980), vec2(126, 80), "Operator   Controls", LightBlue)
                            E:egpButton(259, vec2(704, 980), vec2(126, 80), "Length   Counter", LightBlue)
                            E:egpButton(262, vec2(960, 980), vec2(126, 80), "More Choices", LightGreen)
                            
                            break
                        case 2,
                            E:egpButton(250, vec2(192, 980), vec2(126, 80), "Distributed  Power", LightBlue)
                            E:egpButton(253, vec2(704, 980), vec2(126, 80), "Locomotive  Monitor", LightBlue)
                            E:egpButton(256, vec2(832, 980), vec2(126, 80), "Maint    Mode", LightBlue)
                            E:egpButton(259, vec2(960, 980), vec2(126, 80), "More Choices", LightGreen)
                            
                            break
                    }
                    
                    break
                    #----
                case 3, #Operator controls
                    switch(OPControlsPage){
                        case 0, #Main page
                            E:egpButton(250, vec2(192, 980), vec2(126, 80), "Alarm Bell Silence", OffBlue)
                            E:egpButton(253, vec2(320, 980), vec2(126, 80), "Climate   Control", LightBlue)
                            E:egpButton(256, vec2(448, 980), vec2(126, 80), "Display    Setup", LightBlue)
                            E:egpButton(259, vec2(832, 980), vec2(126, 80), "Rail    Conditioner", LightBlue)
                            E:egpButton(262, vec2(960, 980), vec2(126, 80), "Exit", LightBlue)
                            for(I = 1, 3){
                                E:egpRemove(I + 264)
                            }
                            
                            break
                        case 1, #Climate control page
                            E:egpButton(250, vec2(832, 980), vec2(126, 80), "Defogger", LightBlue)
                            E:egpButton(253, vec2(960, 980), vec2(126, 80), "Exit", LightBlue)
                            
                            break
                        case 2, #Display setup page
                            E:egpButton(250, vec2(64, 980), vec2(126, 80), "Brighter", OffBlue)
                            E:egpButton(253, vec2(192, 980), vec2(126, 80), "Dimmer", LightBlue)
                            E:egpButton(256, vec2(320, 980), vec2(126, 80), "Engineer's  Combined", OffBlue)
                            E:egpButton(259, vec2(448, 980), vec2(126, 80), "Engineer's   Primary", OffBlue)
                            E:egpButton(262, vec2(960, 980), vec2(126, 80), "Exit", LightBlue)
                            E:egpButton(265, vec2(832, 980), vec2(126, 80), "Change    Units", LightBlue)
                            
                            break
                    }
                    break
                    #----
                case 4, #Length counter
                    switch(LengthCounterPage){
                        case 0, #Main page
                            E:egpButton(250, vec2(192, 980), vec2(126, 80), "Change   Length", LightBlue)
                            E:egpButton(256, vec2(448, 980), vec2(126, 80), "Countdown  Length", LightBlue)
                            E:egpButton(259, vec2(704, 980), vec2(126, 80), "Mesaured   Mile", LightBlue)
                            E:egpButton(262, vec2(960, 980), vec2(126, 80), "Exit", LightBlue)
                            
                            break
                        case 1, #Change length page
                            switch(LengthChangePage){
                                case 0, #Main length change page
                                    E:egpButton(250, vec2(320, 980), vec2(126, 80), "Measure   Length", LightBlue)
                                    E:egpButton(253, vec2(576, 980), vec2(126, 80), "Enter     Length", LightBlue)
                                    E:egpButton(256, vec2(960, 980), vec2(126, 80), "Exit", LightBlue)
                                    
                                    break
                                case 1, #Measure length
                                    if(!MeasureLengthFinished){
                                        E:egpButton(250, vec2(64, 980), vec2(126, 80), "Cancel", LightBlue)
                                        E:egpButton(253, vec2(320, 980), vec2(126, 80), (MeasuringLength ? "Stop      Measure" : "Start      Measure"), (MeasuringLength ? OnYellow : LightBlue))
                                        E:egpButton(256, vec2(960, 980), vec2(126, 80), "Exit, Count Conitnues", LightBlue)
                                    }else{
                                        E:egpButton(250, vec2(576, 980), vec2(126, 80), "Accept    Length", (!MeasuredLTooShort ? OnYellow : OffYellow))
                                        E:egpButton(253, vec2(832, 980), vec2(126, 80), "Reject    Length", OnYellow)
                                    }
                                                                                    
                                    break
                                case 2, #Enter length
                                    E:egpButton(250, vec2(64, 980), vec2(126, 80), "Cancel", LightBlue)
                                    E:egpButton(253, vec2(192, 980), vec2(126, 80), "", LightBlue)
                                    E:egpButton(256, vec2(320, 980), vec2(126, 80), "", LightBlue)
                                    E:egpButton(259, vec2(448, 980), vec2(126, 80), "", LightBlue)
                                    E:egpButton(262, vec2(576, 980), vec2(126, 80), "", LightBlue)
                                    E:egpButton(265, vec2(704, 980), vec2(126, 80), "", LightBlue)
                                    E:egpButton(268, vec2(960, 980), vec2(126, 80), "Enter", OffBlue)
                                    
                                    break
                            }
                            break
                        case 2, #Length countdown page
                            E:egpButton(250, vec2(576, 980), vec2(126, 80), "Count     Down", LightPurple)
                            E:egpButton(253, vec2(832, 980), vec2(126, 80), "Reset    Counter", LightBlue)
                            E:egpButton(256, vec2(960, 980), vec2(126, 80), "Exit, Count Conitnues", LightBlue)
                                                                                
                            break
                        case 3, #Measure mile page
                            if(!MeasuredMileRun & !MMFinished){
                                for(I = 1, 6){ #Yeet the previous buttons
                                    E:egpRemove(I + 249)
                                }
                                E:egpButton(250, vec2(192, 980), vec2(126, 80), "Start     Timer", LightBlue)
                            }
                            
                            if(MeasuredMileRun | MMFinished){
                                if(!MMFinished){
                                    E:egpButton(250, vec2(576, 980), vec2(126, 80), "Stop      Timer", OnYellow)
                                }else{
                                    for(I = 1, 3){ #YEET the yellow button with extreme force
                                        E:egpRemove(I + 249)
                                    }
                                }
                                E:egpButton(253, vec2(832, 980), vec2(126, 80), "Reset     Timer", LightBlue)
                            }
                            
                            E:egpButton(256, vec2(960, 980), vec2(126, 80), "Exit", LightBlue)
                            
                            break
                    }
                    break
                    #----
            }
        }
        #----
        
        
        
        
        #Secondary display button presets
        #--------------------------------
        if(!UpperPanelLoad & !PortMainPages){
            switch(Page){
                case 0, #Main page
                    switch(MoreOptionsSec){
                        case 0, #More ops. 1
                            #Brightness % box
                            E:egpBoxLabeled(4, vec2(0, 858), vec2(256, 72), "Screen Brightness")
                            
                            #Brightness % text
                            O = 7
                            E:egpTextLayout(O, "100%", vec2(0, 856), vec2(256, 80))
                            E:egpFont(O, Font1, 18)
                            E:egpAlign(O, 1, 1)
                            E:egpColor(O, LightBlue)
                            
                            E:egpButton(250, vec2(64, 980), vec2(126, 80), "Brighter", OffBlue)
                            E:egpButton(253, vec2(192, 980), vec2(126, 80), "Dimmer", LightBlue)
                            E:egpButton(256, vec2(320, 980), vec2(126, 80), "Locomotive Data", LightBlue)
                            E:egpButton(259, vec2(448, 980), vec2(126, 80), "Operator Controls", LightBlue)
                            E:egpButton(262, vec2(576, 980), vec2(126, 80), "Speed Control", LightBlue)
                            E:egpButton(265, vec2(704, 980), vec2(126, 80), "Length Counter", LightBlue)
                            E:egpButton(268, vec2(832, 980), vec2(126, 80), "Air       Brake", LightBlue)
                            E:egpButton(271, vec2(960, 980), vec2(126, 80), "More Choices", LightGreen)
                            
                            break
                        case 1, #More ops. 2
                            for(I = 4, 7){ #This removes the current brightness indicator box thing
                                E:egpRemove(I)
                            }
                            for(I = 268, 273){ #This is just so that the last two buttons get removed
                                E:egpRemove(I)
                            }
                            E:egpButton(250, vec2(320, 980), vec2(126, 80), "Event       Info", LightBlue)
                            E:egpButton(253, vec2(448, 980), vec2(126, 80), "EOT ID", LightBlue)
                            E:egpButton(256, vec2(576, 980), vec2(126, 80), "Cab      Signals", LightBlue)
                            E:egpButton(259, vec2(704, 980), vec2(126, 80), "Locomotive Monitor", LightBlue)
                            E:egpButton(262, vec2(832, 980), vec2(126, 80), "Maint     Mode", LightBlue)
                            E:egpButton(265, vec2(960, 980), vec2(126, 80), "More Choices", LightGreen)
                            
                            break
                        case 2, #More ops. 3
                            E:egpButton(250, vec2(320, 980), vec2(126, 80), "Work    Orders", LightBlue)
                            E:egpButton(253, vec2(448, 980), vec2(126, 80), "Consist   Monitor", LightBlue)
                            E:egpButton(256, vec2(576, 980), vec2(126, 80), "Crew    Message", LightBlue)
                            E:egpButton(259, vec2(832, 980), vec2(126, 80), "Smart   Consist", LightBlue)
                            E:egpButton(262, vec2(960, 980), vec2(126, 80), "More Choices", LightGreen)
                            
                            break
                    }
                    
                    break
                    #----
                case 5, #Air brake setup
                    if(AirBrakePage == 0){
                        local Color = LightBlue
                        if(ABLockout){
                            Color = OffBlue
                        }
                        
                        E:egpButton(250, vec2(64, 980), vec2(126, 80), "Cancel", LightBlue)
                        E:egpButton(253, vec2(192, 980), vec2(126, 80), "EQ Res    Set Up", Color)
                        E:egpButton(256, vec2(320, 980), vec2(126, 80), "Lead       Trail", Color)
                        E:egpButton(259, vec2(448, 980), vec2(126, 80), "Cut In        Cut Out", Color)
                        E:egpButton(262, vec2(704, 980), vec2(126, 80), "Accept      New", Color)
                        E:egpButton(265, vec2(832, 980), vec2(126, 80), "", Color)
                        
                    }elseif(AirBrakePage == 1){
                        local PSIMult = (Units ? UNIT_DATA["M_kPa", number] : 1)
                        local PresUnits = (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])
                        E:egpButton(250, vec2(64, 980), vec2(126, 80), "Cancel", LightBlue)
                        E:egpButton(253, vec2(192, 980), vec2(126, 80), "DECREASE", LightBlue)
                        E:egpButton(256, vec2(320, 980), vec2(126, 80), "INCREASE", LightBlue)
                        E:egpButton(259, vec2(448, 980), vec2(126, 80), format("%.0f %s", 80 * PSIMult, PresUnits), LightBlue)
                        E:egpButton(262, vec2(576, 980), vec2(126, 80), format("%.0f %s", 90 * PSIMult, PresUnits), LightBlue)
                        E:egpButton(265, vec2(704, 980), vec2(126, 80), format("%.0f %s", 100 * PSIMult, PresUnits), LightBlue)
                        E:egpButton(268, vec2(832, 980), vec2(126, 80), format("%.0f %s", 110 * PSIMult, PresUnits), LightBlue)
                        E:egpButton(271, vec2(960, 980), vec2(126, 80), "Enter", LightBlue)
                        
                    }
                    
                    break
                    #----
                case 7, #EOT ID
                    if(!EOTIDSetup){
                        E:egpButton(250, vec2(64, 980), vec2(126, 80), "Change     EOT ID", LightBlue)
                        E:egpButton(253, vec2(192, 980), vec2(126, 80), "Arm        EOT", OffBlue)
                        E:egpButton(256, vec2(320, 980), vec2(126, 80), "Disarm     EOT", OffBlue)
                        E:egpButton(259, vec2(448, 980), vec2(126, 80), "EOT ID    00000", LightBlue)
                        E:egpButton(265, vec2(704, 980), vec2(126, 80), "Comm       Test", LightBlue)
                        E:egpButton(268, vec2(960, 980), vec2(126, 80), "Exit", LightBlue)
                        
                    }else{
                        E:egpButton(250, vec2(64, 980), vec2(126, 80), "Cancel", LightBlue)
                        E:egpButton(253, vec2(192, 980), vec2(126, 80), "", LightBlue)
                        E:egpButton(256, vec2(320, 980), vec2(126, 80), "", LightBlue)
                        E:egpButton(259, vec2(448, 980), vec2(126, 80), "", LightBlue)
                        E:egpButton(262, vec2(576, 980), vec2(126, 80), "", LightBlue)
                        E:egpButton(265, vec2(704, 980), vec2(126, 80), "", LightBlue)
                        E:egpButton(268, vec2(832, 980), vec2(126, 80), "Enter", LightBlue)
                    }
                    
                    break
                    #----
            }
        }
    }
    #----
    
    
    
    #Updates whatever is displayed
    #-----------------------------
    function void wirelink:egpUpdate(Page, UpperPanelLoad, PortMainPages){
        local E = This
        
        #Time - Inception (11/10 film, would recommend)
        Year = time("year")
        Month = time("month")
        Day = time("day")
        Hours = time("hour")
        Minutes = time("min")
        Seconds = time("sec")
        
        #How many days there are in every month (includes leap-year)
        DaysPerMonth = table(31, (!(Year % 4) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
        
        #The cool part (this basically makes sure all the different variables get shifted properly)
        HTZ = (Hours + Minutes / 60) + (Timezone + (HasDST ? !time("isdst") : 0))
        if(HTZ < 24 & HTZ >= 0){ #Normal hours
            HoursTZ = HTZ
        }elseif(HTZ >= 24){ #Hours in the next day
            HoursTZ = HTZ - 24
        }elseif(HTZ < 0){ #Hours in the previous day
            HoursTZ = HTZ + 24
        }
        #---
        
        if(HTZ < 24 & HTZ >= 0){ #Normal date
            DayTZ = Day
            MonthTZ = Month
            YearTZ = Year
        }elseif(HTZ >= 24){ #Date the next day
            if((Day + 1) > DaysPerMonth[Month, number]){
                DayTZ = 1
                if(Month + 1 > 12){ #Next year
                    MonthTZ = 1
                    YearTZ = (Year + 1)
                }else{ #Next month
                    MonthTZ = (Month + 1)
                    YearTZ = Year
                }
            }else{ #Next day
                DayTZ = Day + 1
                MonthTZ = Month
                YearTZ = Year
            }
        }elseif(HTZ < 0){ #Date the previous day
            if((Day - 1) < 1){
                if((Month - 1) < 1){ #Previous year
                    YearTZ = Year - 1
                    MonthTZ = 12
                }else{ #Previous month
                    MonthTZ = (Month - 1)
                    YearTZ = Year
                }
                DayTZ = DaysPerMonth[MonthTZ, number]
            }else{ #Previous day
                DayTZ = (Day - 1)
                MonthTZ = Month
                YearTZ = Year
            }
        }
        #---
        
        #AM/PM stuff (assuming you use that trash)
        local AMPM = "AM"
        local HoursActual = floor(HoursTZ)
        if(!TimeFormat){
            AMPM = ((HoursTZ >= 12 & HoursTZ < 24) ? "PM" : "AM")
            HoursActual = floor((HoursTZ > 12 & HoursTZ < 24) ? HoursTZ - 12 : (HoursTZ == 0 ? HoursTZ + 12 : HoursTZ))
        }
        local MonthStr = monthNum2String(MonthTZ)
        #----
        
        
        #----Main page updating
        if(UpperPanelLoad & Page != 5){
            #Unit changing
            #Driven distance
            E:egpSetText(1, format("%.0f " + (Units ? UNIT_DATA["km", string] : UNIT_DATA["mi", string]), DrivenDistMI * (Units ? UNIT_DATA["M_km", number] : 1)))
            
            E:egpSetText(3, format("%s %01d, %04d", MonthStr, Day, Year))
            if(TimeFormat){
                E:egpSetText(4, format("%02d:%02d:%02d %s", HoursActual, Minutes, Seconds, TimezoneName))
            }else{
                E:egpSetText(4, format("%02d:%02d %s %s", HoursActual, Minutes, AMPM, TimezoneName))
            }
            
            #All of the unit changing
            local SpeedMult = (Units ? UNIT_DATA["M_km", number] : 1)
            if(changed(Units)){
                #Analog speedo
                E:egpSetText(57, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.125))
                E:egpSetText(58, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.25))
                E:egpSetText(59, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.375))
                E:egpSetText(60, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.5))
                E:egpSetText(61, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.625))
                E:egpSetText(62, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.75))
                E:egpSetText(63, format("%.0f", MaxSpeedoVelocity * SpeedMult * 0.875))
                E:egpSetText(64, format("%.0f", MaxSpeedoVelocity * SpeedMult))
                
                
                #Digital speedo
                local SpeedUnit = (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string])
                E:egpSetText(106, SpeedUnit)
                
                #Accelerometer
                E:egpSetText(108, SpeedUnit)
                
                #Length
                E:egpSetText(112, (Units ? UNIT_DATA["m", string] : UNIT_DATA["ft", string]))
                
                #Tractive effort
                E:egpSetText(117, (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string]))
                if(!SetToAmps){
                    E:egpSetText(119, (Units ? UNIT_DATA["kN", string] : UNIT_DATA["kLb", string]))
                }
            }
            
            
            #All of the brake values
            local PresFormat = "%.0f"
            local PresMult = (Units ? UNIT_DATA["M_kPa", number] : 1)
            if(!BrakePanelYeet){
                E:egpSetText(99, format(PresFormat, EqualRes * PresMult))
                E:egpSetText(100, format(PresFormat, BrakePipe * PresMult))
                E:egpSetText(102, format(PresFormat, AirFlow * PresMult))
                E:egpSetText(103, format(PresFormat, MainRes * PresMult))
                if(MainRes >= 100){
                    E:egpColor(103, LightGreen)
                }else{
                    E:egpColor(103, LightRed)
                }
                E:egpSetText(104, format(PresFormat, BrakeCyl * PresMult))
            }
            
            if(EOTDArmed){
                E:egpSetText(101, format(PresFormat, RearPres * PresMult))
            }else{
                E:egpSetText(101, "?")
            }
            
            
            #Speedometer updating
            E:egpAngle(65, vec2(512, 180), vec2(-72, 0), clamp(46 - (MPH / MaxSpeedoVelocity) * 271, -225, 46))
            local MPH_A = abs(MPH * SpeedMult)
            E:egpSetText(105, format((MPH_A >= 10 ? "%.0f" : "%.1f"), max(MPH_A, 0)))
            
            
            #Acceleration
            E:egpSetText(107, format("%.0f", (Units ? UNIT_DATA["M_km", number] * Accel : Accel)))
            
            #Length
            E:egpSetText(111, format("%.0f", (Units ? UNIT_DATA["M_m", number] * Length : Length)))
            
            #Reverser position
            E:egpSetText(113, select(Reverser + 2, "Reverse", "Center", "Forward"))
            
            
            #Consist effort unit ratio, power status and consist effort
            local CTECol = (Dynamics ? OnYellow : LightGreen)
            E:egpSetText(114, format("%01d:%01d", On * Isolation, 1)) #Ratio
            
            E:egpSetText(115, (Dynamics ? "D" : "P")) #Power status
            E:egpColor(115, CTECol)
            
            E:egpSetText(116, format("%.0f", TractiveEffort * (Units ? UNIT_DATA["M_N", number] : 1) / 1000))
            E:egpColor(116, CTECol)
            
            E:egpColor(117, CTECol) #Changes the color of the units
            
            #Changing between TE/Amps readout
            local TECol = (Dynamics ? OnYellow : LightGreen)
            if(!SetToAmps){
                E:egpSetText(118, format("%.0f", TractiveEffort * (Units ? UNIT_DATA["M_N", number] : 1) / 1000))
            }else{
                E:egpSetText(118, format("%.0f", abs(Load)))
                E:egpSetText(119, "A")
            }
            E:egpColor(118, TECol)
            E:egpColor(119, TECol)
            
            #TE readout box scale and text updating
            E:egpBoxLabeled(79, vec2(669, 200), vec2(228, 60), (SetToAmps ? "Amps" : (Dynamics ? "Dynamic Brake Effort" : "Tractive Effort")))
            
            #TE number axis updating based on mode
            local MaxTE_Actual = (Dynamics ? MaxTE * (MaxDynCurrent / MaxTMCurrent) : MaxTE) #This calculates the "approximate" max tractive effort for dynamics
            local MaxContTE_Actual = (Dynamics ? MaxContTE * (MaxContDynCurrent / MaxTMCurrent) : MaxContTE)
            local MaxCurrent_Act = (Dynamics ? MaxDynCurrent : MaxTMCurrent)
            local MaxContCurrent_Act = (Dynamics ? MaxContDynCurrent : MaxContTMCurrent)
            local ActualDiff = (SetToAmps ? (MaxContCurrent_Act / MaxCurrent_Act) : (MaxContTE_Actual / MaxTE_Actual))
            
            #Updating axis scale
            if(changed(Dynamics)){
                #Updating the axis white part
                E:egpBox(85, vec2(round(690 + (ActualDiff * 300) / 2,0), 292), vec2(round(ActualDiff * 300 + 1,0), 6))
                #Updating the axis yellow part
                E:egpBox(86, vec2(round((690 + (ActualDiff * 300)) + (300 - ActualDiff * 300) / 2,0), 292), vec2(round(300 - ActualDiff * 300,0) + 1, 6))
                
                #Also changes the label of the throttle position indicator box
                E:egpBoxLabeled(82, vec2(906, 140), vec2(110, 120), (Dynamics ? "DB Handle" : "TH Handle"))
            }
            
            #Updating axis numbers and colors
            for(I = 1, 5){
                local Izero = (I - 1)
                local Index = (Izero * 2 + 87)
                E:egpSetText(Index + 1, format("%.0f", (SetToAmps ? MaxCurrent_Act : MaxTE_Actual * (Units ? UNIT_DATA["M_N", number] : 1)) * (Izero / 4)))
                
                E:egpColor(Index, (ActualDiff <= (Izero / 4) ? OnYellow : vec(255)))
                E:egpColor(Index + 1, (ActualDiff <= (Izero / 4) ? OnYellow : vec(255)))
            }
            
            #TE needle movement
            local TE_NeedlePos = 0
            if(SetToAmps){
                TE_NeedlePos = clamp((TMCurrent / MaxContCurrent_Act) * 300, 0, 300)
            }else{
                TE_NeedlePos = clamp((TractiveEffort / 1000) / MaxTE_Actual * 300, 0, 300)
            }
            E:egpTriangle(97, vec2(680 + TE_NeedlePos, 308), vec2(700 + TE_NeedlePos, 308), vec2(690 + TE_NeedlePos, 296))
            E:egpColor(97, TECol)
            
            E:egpBox(98, vec2(690 + TE_NeedlePos / 2, 313), vec2(22 + TE_NeedlePos, 8)) #690 + NeedlePos / 2, 22 + NeedlePos
            E:egpColor(98, TECol)
            
            
            #Throttle indicator
            if(Dynamics){
                E:egpColor(120, OnYellow)
                E:egpSetText(120, (DynaBrakePower <= 10 ? "Set" : format("D %.0f", throt2notch(DynaBrakePower, 10, 100, 8))))
            }else{
                E:egpColor(120, LightGreen)
                E:egpSetText(120, (Throttle <= 0 ? "Idle" : format("N %.0f", throt2notch(Throttle, 0, 100, 8))))
            }
            
            
            #Warning indicators
            E:egpColor(123, (WheelSlip ? OnWhite : OffWhite))
            E:egpColor(125, (PCSOpen ? OnRed : OffRed))
            E:egpColor(127, (DynBrakeWarn ? OnYellow : OffYellow))
            E:egpColor(129, (LoadShed ? OnYellow : OffYellow))
            E:egpColor(131, (AlerterOn ? OnRed : OffRed))
            E:egpColor(133, (UnitAlarm ? OnYellow : OffYellow))
            E:egpColor(137, (EOTMove ? OnWhite : OffWhite))
            #----End of that
            
            
            if(Page == 0 | Page == 3 | Page == 4){
                #Other indicators
                if(changed(Horn)){
                    E:egpColor(139, indColor(Horn, OffBlue, LightBlue))
                    E:egpColor(140, indColor(Horn, OffBlue, LightBlue))
                }
                
                if(changed(Bell)){
                    E:egpColor(141, indColor(Bell, OffBlue, LightBlue))
                    E:egpColor(142, indColor(Bell, OffBlue, LightBlue))
                }
                
                E:egpColor(143, indColor(Sanding, OffYellow, OnYellow))
                E:egpColor(144, indColor(Sanding, OffYellow, OnYellow))
                
                E:egpColor(145, indColor(LowFuel, OffYellow, OnYellow))
                E:egpColor(146, indColor(LowFuel, OffYellow, OnYellow))
                E:egpColor(147, indColor(LowFuel, OffYellow, OnYellow))
                E:egpColor(148, indColor(LowFuel, OffYellow, OnYellow))
                
                
                #Fuel quantity
                if(->FuelLevel){
                    E:egpSetText(150, format("%.0f " + (Units ? UNIT_DATA["L", string] : UNIT_DATA["Gal", string]), FuelLevel * (Units ? UNIT_DATA["M_L", number] : UNIT_DATA["M_L", number])))
                }else{
                    E:egpSetText(150, "? " + (Units ? UNIT_DATA["L", string] : UNIT_DATA["Gal", string]))
                }
                
                
                #Brake setup indication
                if(BCI){
                    E:egpSetText(152, "LEAD - " + (IsolatedBrakes ? "CUT OUT" : "CUT IN"))
                }else{
                    E:egpSetText(152, "TRAILING")
                }
                
                
                #IDENT readout
                if(EOTDSetID != 0){
                    E:egpSetText(154, format("IDENT %05d", EOTDSetID))
                }else{
                    E:egpSetText(154, "IDENT 0")
                }
            }
        }
        
        if(UpperPanelLoad | PortMainPages){    
            switch(Page){ #Page specific updating
                case 0, #General page
                    #Message box stuff
                    if(AETripped){
                        E:egpColor(247, OnRed)
                        E:egpSetText(248, "ALERTER PENALTY - SET TRAIN BRAKE TO SUPPRESSION TO RESET")
                        E:egpSetText(249, "")
                    }else{
                        E:egpColor(247, OnYellow)
                        if(Priming & !On){
                            E:egpSetText(248, "Fuel Prime Cycle In Progress -")
                            E:egpSetText(249, "Press Engine Stop To Abort Startup")
                        }elseif(ParkingBrake){
                            E:egpSetText(248, "Parking Brake Applied")
                            E:egpSetText(249, "")
                        }else{
                            E:egpSetText(248, "")
                            E:egpSetText(249, "")
                        }
                    }
                
                    break
                    #----
                case 3, #Operator controls
                    switch(OPControlsPage){
                        case 0, #Main page
                            #Rail conditioner status
                            E:egpSetText(180, (RailConditioner ? "Auto" : "Off"))
                            
                            break
                        case 1, #Climate control page
                            #Defogger status
                            E:egpSetText(180, (DefoggerOn ? "On" : "Off"))
                            
                            break
                        case 2, #Display setup page
                            #Screen brightness
                            E:egpSetText(180, format("%.0f%s", Brightness * 100, "%"))
                            
                            #Current units
                            E:egpSetText(188, (Units ? "Metric" : "Imper."))
                            
                            break
                    }
                    break
                    #----
                case 4, #Length counter
                    local LUnits = (Units ? "Meters" : "Feet")
                    local LUnitMult = (Units ? UNIT_DATA["M_m", number] : 1)
                    
                    switch(LengthCounterPage){
                        case 1, #Length change page
                            switch(LengthChangePage){
                                case 1, #Mesaure length
                                    if(!MeasureLengthFinished){
                                        #Measured length readout
                                        E:egpSetText(177, format("%.0f", MeasuredLength * LUnitMult))
                                        
                                        #Units
                                        E:egpSetText(178, LUnits)
                                        
                                    }else{
                                        #Length too short thing
                                        E:egpSetText(177, (MeasuredLTooShort ? "The measured length is too short!" : format("Mesaured length: %.0f %s", MeasuredLength * LUnitMult, LUnits)))
                                        
                                        #Previous length
                                        E:egpSetText(178, format("The previous length was %.0f %s", Length * LUnitMult, LUnits))
                                    }
                                    
                                    break
                                case 2, #Enter length
                                    #Length readout updating
                                    E:egpSetText(177, format("%01d  %01d  %01d  %01d  %01d", IL1, IL2, IL3, IL4, IL5))
                                    
                                    #Unit change
                                    E:egpSetText(178, format("%s", (Units ? "Meters" : "Feet")))
                                                                        
                                    break
                            }
                            break
                        case 2, #Length countdown
                            #Length readout
                            E:egpSetText(177, format("%.0f", CountdownLength * LUnitMult))
                            
                            #Units
                            E:egpSetText(178, LUnits)
                            
                            break
                        case 3, #Measured mile
                            local SPUnit = (Units ? UNIT_DATA["KPH", string] : UNIT_DATA["MPH", string])
                            local SPMult = (Units ? UNIT_DATA["M_km", number] : 1)
                            
                            #Elapsed time readout
                            local Minutes = floor(MMTimeElapsed / 60, 0)
                            E:egpSetText(178, format("%02d:%02d", Minutes, round(MMTimeElapsed, 0) - Minutes * 60))
                            
                            if(MeasuredMileRun | MMFinished){
                                E:egpSetText(176, "Measured Mile - In Progress")
                            }else{
                                E:egpSetText(176, "Measured Mile")
                            }
                            
                            #Speed check conclusion
                            if(MMFinished){
                                E:egpSetText(179, "Average Speed for Measured Mile")
                                
                                if(MMCheckFailed){
                                    E:egpSetText(180, "Speed Check Invalid!")
                                }else{
                                    E:egpSetText(180, format("%.0f %s", MMAverageSpeed * SPMult, SPUnit))
                                }
                            }else{
                                E:egpSetText(179, "")
                                E:egpSetText(180, "")
                            }
                                                        
                            break
                            
                    }
                    break
                    #----
            }
        }
        #----End of main screen shits
        
        
        
        #----Secondary page hell
        if(!UpperPanelLoad){
            if(Page == 0 | Page == 5 | Page == 7 | Page == 8 | MainPagePort){
                #Date setting
                E:egpSetText(1, format("%s %01d, %04d", MonthStr, Day, Year))
                if(TimeFormat){
                    E:egpSetText(2, format("%02d:%02d:%02d %s", HoursActual, Minutes, Seconds, TimezoneName))
                }else{
                    E:egpSetText(2, format("%02d:%02d %s %s", HoursActual, Minutes, AMPM, TimezoneName))
                }
            }
        }
        
        #The real shit
        if(!UpperPanelLoad & !PortMainPages){
            #Page speciffic updating
            switch(Page){
                case 0, #Main page
                    if(MoreOptionsSec == 0){
                        #Screen brightness
                        E:egpSetText(7, format("%.0f%s", Brightness * 100, "%"))
                    }
                    
                    break
                    #----
                case 5, #Air brake setup
                    local PSIMult = (Units ? UNIT_DATA["M_kPa", number] : 1) #PSI multiplier (from PSI to bar)
                    
                    if(AirBrakePage == 0){ #Main page
                        #Trail / Lead indication
                        E:egpSetText(10, (BCI_New ? "LEAD" : "TRAIL"))
                        E:egpSetText(14, (BCI ? "LEAD" : "TRAIL"))
                        
                        if(!ABLockout){ #Show and update indications if not locked out
                            E:egpAlpha(9, 255)
                            E:egpAlpha(13, 255)
                            E:egpAlpha(11, 255)
                            E:egpAlpha(15, 255)
                            
                            #EQ Res pressures
                            E:egpSetText(9, format("%.0f %s", EQSet_New * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(13, format("%.0f %s", EQResSetPSI * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            
                            #Cut In / Cut Out indication
                            E:egpSetText(11, (IsoBrk_New ? "CUT OUT" : "CUT IN"))
                            E:egpSetText(15, (IsolatedBrakes ? "CUT OUT" : "CUT IN"))
                            
                            E:egpSetText(7, "")
                            
                        }else{ #Hide the indicators when locked out
                            E:egpAlpha(9, 0)
                            E:egpAlpha(13, 0)
                            E:egpAlpha(11, 0)
                            E:egpAlpha(15, 0)
                            
                            E:egpSetText(7, "Reverser must be centered to be setup as trail.")
                        }
                    }else{ #EQ Res PSI setup
                        if(changed(Units)){
                            E:egpSetText(260, format("%.0f %s", 80 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(263, format("%.0f %s", 90 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(266, format("%.0f %s", 100 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                            E:egpSetText(269, format("%.0f %s", 110 * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                        }
                        
                        #EQ Res pressure readout
                        E:egpSetText(7, format("%.0f %s", EQSet_New * PSIMult, (Units ? UNIT_DATA["kPa", string] : UNIT_DATA["PSI", string])))
                        
                    }
                    
                    break
                    #----
                case 7, #EOT ID
                    if(!EOTIDSetup){
                        #EOT ID readout
                        E:egpSetText(10, format("%0.f", EOTDSetID))
                        
                        #Arm state
                        if(RX_EOTID != 0 & (CommTestFinished & CommTestResult)){
                            E:egpSetText(14, (EOTDArmed ? "Armed" : "Disarmed"))
                        }else{
                            E:egpSetText(14, "?")
                        }
                        
                        #Comm test status
                        if(CommTestRun){
                            E:egpSetText(18, "Testing")
                            E:egpColor(18, LightBlue)
                        }elseif(CommTestFinished){
                            E:egpSetText(18, (CommTestResult ? "Passed" : "Failed"))
                            E:egpColor(18, (CommTestResult ? LightBlue : LightRed))
                        }else{
                            E:egpSetText(18, "-")
                            E:egpColor(18, LightBlue)
                        }
                        
                    }else{
                        #EOT ID readout
                        E:egpSetText(7, format("%01d  %01d  %01d  %01d  %01d", EID1, EID2, EID3, EID4, EID5))
                    }
                    
                    break
                    #----
            }
        }
    }
    
    timer("run",500)
}
#finally that madness ended... oh wait, there's more shi-

#-------------
#Running code:
#-------------
if(clk("run")){
    Run = 1
    
    #Unit number override and RR name output
    if(->UnitNumberOvr){
        LocoDataInfo[3,string] = UnitNumberOvr
    }
    UnitRRName = LocoDataInfo[2, string]
    UnitNumber = LocoDataInfo[3, string]
}
if(Run){
    timer("clk",200)
}

#Display initialization
if(Battery & !Running & !SkipBoot){
    EGPMain:egpResolution(vec2(0,0), vec2(1024,1024))
    EGPSec:egpResolution(vec2(0,0), vec2(1024,1024))
    
    #Operating system load
    if(!OSLoaded){
        if(!OSLoading){ #This just makes sure the screen doesn't keep on reloading
            EGPMain:bootupScreenLoad(1, 0)
            EGPSec:bootupScreenLoad(1, 1)
            OSLoading = 1
        }
        
        if(OSLoadProgress >= 1){ #OS Loaded, run the funny
            OSLoadProgress = 1
            OSLoading = 0
            stoptimer("osLoadNext")
            
            EGPMain:egpClear()
            EGPSec:egpClear()
            
            timer("startApps", randint(1000, 1500))
            OSLoaded = 1
            #----
        }else{ #Updating the load progress bar
            timer("osClk", 100)
            
            if(clk("osClk")){ #This runs all the loading animations and the loading process itself
                OSLoadBarPos += 40
                if(OSLoadBarPos >= 1024){
                    OSLoadBarPos -= 1024
                }
                
                #Moving the bar
                EGPMain:egpPos(6, vec2(OSLoadBarPos, 610))
                
                #Blinking colors cause it looks cool
                local ColFactor = abs(sin(OSLoadBarPos / 2.84))
                local Color = (vec(247, 140, 30) * (1 - ColFactor) + vec(207, 100, 0) * ColFactor)
                EGPMain:egpColor(3, Color)
                EGPMain:egpColor(5, Color)
                EGPMain:egpColor(6, Color * vec(0.95))
                #---
                
                #Loading
                OSLoadProgress += (randint(0, 100) > 80 ? randint(5, 15) / 100 : 0)
                #----
            }
        }
    }
    
    #Loading screen
    if(clk("startApps")){
        EGPMain:bootupScreenLoad(0, 0)
        if(->EGPSec){
            EGPSec:bootupScreenLoad(0, 1)
        }
        
        timer("start", 6000)
    }
    
}elseif(!Battery){ #Display shutdown
    stoptimer("start")
    stoptimer("osLoad")
    EGPMain:egpClear()
    EGPSec:egpClear()
    CanRun = 0
    Running = 0
    OSLoaded = OSLoadProgress = 0
    OSLoading = OSLoadBarPos = 0
    
    MainPage = 0
    SecPage = 0
    MoreOptionsMain = 0
    MoreOptionsSec = 0
    AirBrakePage = 0
}

#Display running
if(clk("start") | (SkipBoot & changed(Battery) & Battery)){
    Running = 1
    CanRun = 1
    MainPage = 0
    SecPage = 0
    AirBrakePage = 0
    
    stoptimer("start")
    
    EGPMain:egpClear()
    EGPMain:egpLoad(MainPage, 1, 0)
    EGPMain:egpLoadButtons(MainPage, 1, 0)
    
    if(->EGPSec){
        EGPSec:egpClear()
        EGPSec:egpLoad(SecPage, 0, MainPagePort)
        EGPSec:egpLoadButtons(SecPage, 0, MainPagePort)
    }
}
if(Running){
    timer("clkDisp", 500)
}else{
    stoptimer("clkDisp")
}
#----


#Constantly running stuff
#Alerter reset key output
Driver = Pod:driver()
if(Driver:keyPressed(AlerterResetKey)){
    AlertResetKeyClicked = 1
}else{
    AlertResetKeyClicked = 0
}

if(Running){
    #Acceleration calculation
    local SpeedC = (Units ? UNIT_DATA["M_km", number] * MPH : MPH)
    if(!ACheck & SpeedC > 0){
        Speed1 = SpeedC
        timer("speedClk", 500)
        ACheck = 1
    }elseif(SpeedC <= 0){
        Accel = 0
    }
    if(clk("speedClk")){
        ACheck = 0
        stoptimer("speedClk")
        Speed2 = SpeedC
        Accel = (Speed2 - Speed1) * 120
    }
    #----
    
    
    #Alerter system
    if(UseAlerter){
        if(!AlerterReset & MPH > 5 & !AETripped){
            timer("alertCheck", 30000)
        }else{
            stoptimer("alertCheck")
        }
        if(clk("alertCheck")){
            AlerterOn = 1
            timer("alertEmergency", 20000)
            EGPMain:entity():soundPlay(0, 20, "opencontrol/alerter.wav")
            soundVolume(0, AlerterMaxVolume)
        }
        
        if(Driver:keyPressed(AlerterResetKey)){
            AlerterReset = 1
            AlerterOn = 0
            stoptimer("alertCheck")
        }
        if(AlerterReset){
            timer("alertReset", 1000)
            stoptimer("alertEmergency")
            soundStop(0)
        }
        if(clk("alertReset")){
            AlerterReset = 0
        }
        
        if(clk("alertEmergency")){
            AlertEmergency = 1
            AETripped = 1
            stoptimer("alertEmergency")
        }
        if(PCSOpen){
            AlertEmergency = 0
        }
        if(PCSOpen & SetBrakeNotch == 2){
            AETripped = 0
            AlerterReset = 1
            AlerterOn = 0
        }
    }
    #----
    
    
    #EOTD stuff
    #Comm test
    if(CommTestRun){
        timer("commTestDelay", randint(1000, 2000))
        CommTestFinished = 0
    }
    if(clk("commTestDelay")){
        if(RX_EOTID == EOTDSetID & ->RX_EOTID & RX_EOTID != 0){
            CommTestResult = 1
        }else{
            CommTestResult = 0
        }
        CommTestRun = 0
        CommTestFinished = 1
    }
    if(EOTDArmed & CommTestResult & !RX_EOTID){
        CommTestFinished = 0
        CommTestResult = 0
        CommTestRun = 0
        EOTDArmed = 0
        EIDStr = "0"
        EID1 = EID2 = EID3 = EID4 = EID5 = 0
    }
    
    #EOTD Arming
    if(EOTDArmState){
        RX_EOTBrakePipe = BrakePipe
        RX_EOTMPH = MPH
        EOTDArmed = 1
    }else{
        RX_EOTBrakePipe = RX_EOTMPH = 0
        EOTDArmed = 0
    }
    
    #Rear pressure readout
    if(EOTDArmed){
        RearPres = RX_EOTPSI
    }else{
        RearPres = 0
    }
    
    #EOTD moving
    if(EOTDArmed & MPH > 0.2){
        EOTMove = 1
    }else{
        EOTMove = 0
    }
    #----
}
        

if(clk("clk") & CanRun){ #Display running
    
    if(Running){
        #RLCPT
        RLCPTW = RLCPT:wirelink()
        #----
        KPH = abs(RLCPTW["KPH",number])
        KPHRaw = RLCPTW["KPH", number]
        MPH = abs(RLCPTW["MPH",number])
        #----
        Reverser = CtlTable["SetReverser", number]
        Throttle = CtlTable["SetThrottle", number]
        SetBrakeNotch = CtlTable["SetBrakeNotch", number]
        Notch = throt2notch(Throttle, 0, 100, 8)
        Dynamics = RLCPTW["Dynamics",number]
        DynaBrakePower = RLCPTW["DynamicBrakingPower",number]
        TractiveEffort = RLCPTW["TE_LBF",number]
        Load = RLCPTW["Load1",number]
        DynBrakeWarn = RLCPTW["BrakeWarn",number]
        WheelSlip = RLCPTW["WheelSlip",number]
        Sanding = RLCPTW["ForceSand",number]
        PCSOpen = RLCPTW["Emergency",number]
        #----
        On = RLCPTW["On1",number]
        EngineNotch = RLCPTW["EngineNotch1", number]
        EngineSpeed = RLCPTW["EngineSpeed1", number]
        IsLead = RLCPTW["MU_Master",number]
        #----
        EqualRes = RLCPTW["EqualRes",number]
        BrakePipe = RLCPTW["BrakePipe",number]
        AirFlow = RLCPTW["CFM",number]
        MainRes = RLCPTW["MainRes",number]
        BrakeCyl = RLCPTW["Cyl",number]
        
        #Calculations
        TMCurrent = abs(Load)
        DrivenDistMI += (MPH / 18000)
        
        #Low fuel warning
        if(FuelLevel < FuelTankCap * 0.05 & ->FuelLevel){
            LowFuel = 1
        }else{
            LowFuel = 0
        }
        
        #Unit override
        if(->UnitOverride){
            Units = UnitOverride
        }
        
        #Brake lockout
        if(!BCI){
            if(Reverser != 0){
                ABLockout = 1
            }else{
                ABLockout = 0
            }
        }
        #----
        
        
        
        
        #Main display operation
        #----------------------
        switch(MainPage){
            case 0, #----Main page
                #More choices
                if(changed(MB8) & MB8 & MoreOptionsMain < 2){
                    MoreOptionsMain++
                }elseif(changed(MB8) & MB8 & MoreOptionsMain >= 2){
                    MoreOptionsMain = 0
                }
                
                switch(MoreOptionsMain){
                    case 1, #More opts. 2
                        #Brightness buttons
                        if(Brightness < 1){ #Brighter
                            if(MB1){
                                Brightness += 0.05
                            }
                            EGPMain:egpColor(250, LightBlue)
                        }else{
                            EGPMain:egpColor(250, OffBlue)
                        }
                        
                        if(Brightness > 0.15){ #Dimmer
                            if(MB2){
                                Brightness -= 0.05
                            }
                            EGPMain:egpColor(253, LightBlue)
                        }else{
                            EGPMain:egpColor(253, OffBlue)
                        }
                        
                        #Page selection
                        if(MB4){ #Operator controls page
                            MainPage = 3
                        }
                        if(MB6){ #Length counter page
                            MainPage = 4
                        }
                        
                        break
                }
                break
                #----
            case 3, #----Operator controls
                
                switch(OPControlsPage){
                    case 0, #Main page
                        
                        if(MB3){ #Climate control
                            OPControlsPage = 1
                        }
                        if(MB4){ #Display setup
                            OPControlsPage = 2
                        }
                        if(MB7){ #Rail conditioner mode swap
                            RailConditioner = !RailConditioner
                        }
                        if(MB8){ #Exit
                            MainPage = 0
                        }
                        
                        break
                    case 1, #Climate control page
                        if(MB7){ #Defogger cycling
                            DefoggerOn = !DefoggerOn
                        }
                        
                        if(MB8){ #Exit
                            OPControlsPage = 0
                        }
                        
                        break
                    case 2, #Display setup page
                        
                        #Brightness buttons
                        if(Brightness < 1){ #Brighter
                            if(MB1){
                                Brightness += 0.05
                            }
                            EGPMain:egpColor(250, LightBlue)
                        }else{
                            EGPMain:egpColor(250, OffBlue)
                        }
                        
                        if(Brightness > 0.15){ #Dimmer
                            if(MB2){
                                Brightness -= 0.05
                            }
                            EGPMain:egpColor(253, LightBlue)
                        }else{
                            EGPMain:egpColor(253, OffBlue)
                        }
                        
                        if(MB7){ #Units change button
                            Units = !Units
                        }
                        
                        if(MB8){ #Exit
                            OPControlsPage = 0
                        }
                        
                        break
                }
                break
                #----
            case 4, #----Length counter page
                switch(LengthCounterPage){
                    case 0, #Main length counter page
                        
                        if(MB2){ #Change length page switch
                            LengthCounterPage = 1
                        }
                        
                        if(MB4){ #Countdown length page switch
                            LengthCounterPage = 2
                            if(!CountdownRun){
                                CountdownLength = Length
                            }
                            CountdownRun = 1
                        }
                        
                        if(MB6){ #Measured mile page switch
                            LengthCounterPage = 3
                        }
                        
                        if(MB8){ #Page exit
                            MainPage = 0
                            MeasuringLength = 0 #Stop measuring length (if somebody forgot to stop it themselves)
                            MeasuredLength = 0
                            MeasureLengthFinished = 0
                        }
                        
                        break
                    case 1, #Main length change page
                        switch(LengthChangePage){
                            case 0, #Length change type selection
                                
                                if(MB3){ #Measure length
                                    LengthChangePage = 1
                                }
                                if(MB5){ #Measure length
                                    LengthChangePage = 2
                                }
                                if(MB8){ #Exit
                                    LengthCounterPage = 0
                                }
                                
                                break
                            case 1, #Measure length page
                                
                                if(!MeasureLengthFinished){
                                    if(MB1){ #Cancel
                                        LengthChangePage = 0
                                        MeasuringLength = 0
                                        MeasuredLength = 0
                                        MeasureLengthFinished = 0
                                    }
                                    
                                    if(MB3){
                                        if(!MeasuringLength){ #Start measure
                                            MeasuringLength = 1
                                        }elseif(MeasuringLength){ #Stop measure
                                            MeasuringLength = 0
                                            MeasureLengthFinished = 1
                                        }
                                    }
                                    
                                    if(MB8){ #Page exit (keeps running the measure)
                                        LengthChangePage = 0
                                    }
                                }else{
                                    if(MeasuredLength < Length | MeasuredLength <= 0){
                                        MeasuredLTooShort = 1
                                    }else{
                                        MeasuredLTooShort = 0
                                    }
                                    
                                    if(MB5 & !MeasuredLTooShort){ #Accept measured length
                                        Length = MeasuredLength
                                        MeasuredLength = 0
                                        MeasureLengthFinished = 0
                                        MainPage = LengthChangePage = LengthCounterPage = 0
                                    }
                                    
                                    if(MB7){ #Reject measured length
                                        MeasuredLength = 0
                                        MeasureLengthFinished = 0
                                        MainPage = LengthChangePage = LengthCounterPage = 0
                                    }
                                }
                                
                                break
                            case 2, #Enter length page
                                
                                if(MB1){ #Cancel
                                    LengthChangePage = 0
                                }
                                
                                if(MB2){ #First digit increment
                                    if(IL1 < 9){
                                        IL1++
                                    }elseif(IL1 >= 9){
                                        IL1 = 0
                                    }
                                }
                                if(MB3){ #Second digit increment
                                    if(IL2 < 9){
                                        IL2++
                                    }elseif(IL2 >= 9){
                                        IL2 = 0
                                    }
                                }
                                if(MB4){ #Third digit increment
                                    if(IL3 < 9){
                                        IL3++
                                    }elseif(IL3 >= 9){
                                        IL3 = 0
                                    }
                                }
                                if(MB5){ #Fourth digit increment
                                    if(IL4 < 9){
                                        IL4++
                                    }elseif(IL4 >= 9){
                                        IL4 = 0
                                    }
                                }
                                if(MB6){ #Fifth digit increment
                                    if(IL5 < 9){
                                        IL5++
                                    }elseif(IL5 >= 9){
                                        IL5 = 0
                                    }
                                }
                                #---
                                ILStr = (IL1:toString() + IL2:toString() + IL3:toString() + IL4:toString() + IL5:toString())
                                #Is the length valid?
                                if(ILStr:toNumber() != 0){
                                    LengthValid = 1
                                    EGPMain:egpSetText(189, "")
                                    EGPMain:egpColor(268, LightBlue)
                                }else{
                                    LengthValid = 0
                                    EGPMain:egpSetText(189, "Invalid Length")
                                    EGPMain:egpColor(268, OffBlue)
                                }
                                
                                if(MB8 & LengthValid){ #Enter input length
                                    Length = (ILStr:toNumber()) / (Units ? UNIT_DATA["M_m", number] : 1)
                                    LengthChangePage = 0
                                }
                                
                                break
                        }
                        #----
                        break
                    case 2, #Lengt countdown page
                        
                        if(MB5){ #Count down button (whatever this does)
                            CountdownLength = Length
                            LengthCounterPage = 0
                            MainPage = 0
                            CountdownRun = 0
                        }
                        
                        if(MB7){ #Reset counter
                            CountdownLength = Length
                            CountdownRun = 1
                        }
                        
                        if(MB8){ #Page exit (countdown keeps going)
                            LengthCounterPage = 0
                        }
                        
                        break
                    case 3, #Measured mile page
                        
                        if(MB2 & !(MeasuredMileRun | MMFinished)){ #Start le toimr
                            MeasuredMileRun = 1
                        }
                        
                        if(MB5 & MeasuredMileRun){ #Stop the timer
                            MeasuredMileRun = 0
                            MMFinished = 1
                        }
                        
                        if(MB7){ #Reset timer
                            if(MeasuredMileRun & !MMFinished){
                                MMTimeElapsed = 0
                            }elseif(MMFinished){
                                MMTimeElapsed = 0
                                MMFinished = 0
                                MMCheckFailed = 0
                            }
                            MMSpeedChecks:clear()
                        }
                        
                        if(MB8){ #Exit(tm)
                            MMFinished = 0
                            MeasuredMileRun = 0
                            LengthCounterPage = 0
                            MMTimeElapsed = 0
                            MMSpeedChecks:clear()
                        }
                        
                        break
                }
                break
                #----
        }
        #----
        
        
        
        
        
        #Setup display operation
        #-----------------------
        if(->EGPSec){
            if(!MainPagePort){
            switch(SecPage){
                case 0, #----Main page
                    #More choices
                    if(changed(SB8) & SB8 & MoreOptionsSec < 2){
                        MoreOptionsSec++
                    }elseif(changed(SB8) & SB8 & MoreOptionsSec >= 2){
                        MoreOptionsSec = 0
                    }
                    
                    switch(MoreOptionsSec){
                        case 0, #More opts. 1
                            #Brightness buttons
                            if(Brightness < 1){ #Brighter
                                if(SB1){
                                    Brightness += 0.05
                                }
                                EGPSec:egpColor(250, LightBlue)
                            }else{
                                EGPSec:egpColor(250, OffBlue)
                            }
                            
                            if(Brightness > 0.15){ #Dimmer
                                if(SB2){
                                    Brightness -= 0.05
                                }
                                EGPSec:egpColor(253, LightBlue)
                            }else{
                                EGPSec:egpColor(253, OffBlue)
                            }
                            
                            #Page switching
                            #Air brake setup
                            if(SB7){
                                SecPage = 5
                            }
                            
                            break
                        case 1, #More opts. 2
                            #EOT ID
                            if(SB4){
                                SecPage = 7
                            }
                            
                            break
                    }
                    
                    break
                    #----
                case 5, #----Air Brake (setup)
                    if(AirBrakePage == 0){
                        #Buttons
                        #Cancel
                        if(SB1){
                            SecPage = 0
                        }
                        
                        if(!ABLockout){
                            #EQ res setup page
                            if(SB2){
                                AirBrakePage = 1
                            }
                            
                            #Lead / Trail change
                            if(SB3){
                                BCI_New = !BCI_New
                            }
                            
                            #Cut In / Cut Out change
                            if(SB4){
                                IsoBrk_New = !IsoBrk_New
                            }
                            
                            #Accept new
                            if(SB6){
                                BCI = BCI_New
                                IsolatedBrakes = IsoBrk_New
                                EQResSetPSI = EQSet_New
                                SecPage = 0
                            }
                        }
                    }elseif(AirBrakePage == 1){
                        #More buttons
                        #Cancel
                        if(SB1){
                            EQSet_New = EQResSetPSI
                            AirBrakePage = 0
                        }
                        
                        #Decrease & Increase buttons
                        if(SB2 & EQSet_New > 80){
                            EQSet_New--
                        }
                        
                        if(SB3 & EQSet_New < 130){
                            EQSet_New++
                        }
                        
                        #80 PSI
                        if(SB4){
                            EQSet_New = 80
                        }
                        
                        #90 PSI
                        if(SB5){
                            EQSet_New = 90
                        }
                        
                        #100 PSI
                        if(SB6){
                            EQSet_New = 100
                        }
                        
                        #110 PSI
                        if(SB7){
                            EQSet_New = 110
                        }
                        
                        #Enter
                        if(SB8){
                            AirBrakePage = 0
                        }
                        
                    }
                    break
                    #----
                case 7, #----EOT ID page
                    if(!EOTIDSetup){
                        if(SB1){ #Change EOT ID
                            EOTIDSetup = 1
                        }
                        
                        local CommTestPassed = (CommTestResult & CommTestFinished)
                        if(SB2 & CommTestPassed){ #Arm EOT
                            EOTDArmState = 1
                        }
                        if(CommTestPassed){
                            EGPSec:egpColor(253, LightBlue)
                            EGPSec:egpColor(256, LightBlue)
                        }else{
                            EGPSec:egpColor(253, OffBlue)
                            EGPSec:egpColor(256, OffBlue)
                        }
                        
                        if((SB3 & CommTestPassed) | !CommTestPassed){ #Disarm EOT
                            EOTDArmState = 0
                        }
                        
                        
                        if(SB4){ #Reset EOT ID
                            EIDStr = "0"
                            CommTestResult = CommTestFinished = 0
                        }
                        
                        if(SB6){ #Comm test
                            CommTestRun = 1
                        }
                        
                        if(SB8){ #Exit(tm)
                            SecPage = 0
                        }
                        
                    }else{
                        #Yeah you get idea
                        if(SB1){ #Cancel
                            EOTIDSetup = 0
                        }
                        
                        #Individual digit cycle buttons
                        if(SB2){ #1
                            if(EID1 < 9){
                                EID1++
                            }elseif(EID1 >= 9){
                                EID1 = 0
                            }
                        }
                        
                        if(SB3){ #2
                            if(EID2 < 9){
                                EID2++
                            }elseif(EID2 >= 9){
                                EID2 = 0
                            }
                        }
                        
                        if(SB4){ #3
                            if(EID3 < 9){
                                EID3++
                            }elseif(EID3 >= 9){
                                EID3 = 0
                            }
                        }
                        
                        if(SB5){ #4
                            if(EID4 < 9){
                                EID4++
                            }elseif(EID4 >= 9){
                                EID4 = 0
                            }
                        }
                        
                        if(SB6){ #5
                            if(EID5 < 9){
                                EID5++
                            }elseif(EID5 >= 9){
                                EID5 = 0
                            }
                        }
                        
                        if(SB7){
                            EIDStr = EID1:toString() + EID2:toString() + EID3:toString() + EID4:toString() + EID5:toString()
                            if(EIDStr:toNumber() != EOTDSetID){
                                CommTestResult = CommTestFinished = 0
                            }
                            EOTIDSetup = 0
                        }
                    }
                    
                    break
                    #----
            }
            
            #--End of secondary monitor pages
            }elseif(MainPagePort){
            #--Main page port stuff
            
            #Not yet...
            
            }
        }
        
        #Miscellaneous operation:
        #------------------------
        #Brightness clamp
        if(Brightness > 1){
            Brightness = 1
        }elseif(Brightness < 0.15){
            Brightness = 0.15
        }
        #---
        
        #Measure length
        if(MeasuringLength){
            local FPS = (KPH * 0.91134442)
            MeasuredLength += (FPS / 5) * (MeasuredLength < 99999 ? 1 : 0)
        }
        
        #Countdown length
        if(CountdownRun){
            if(CountdownLength > 0){
                local FPS = (KPH * 0.91134442)
                CountdownLength -= (FPS / 5)
            }elseif(CountdownLength <= 0){
                CountdownLength = 0
                CountdownRun = 0
            }
        }
        
        #Measured mile stuff
        if(MeasuredMileRun){ #Measured mile running
            #Elapsed time counter
            MMTimeElapsed += 0.2 * (MMTimeElapsed < 3600)
            
            #Speed check (every 0.1 mile until 1 mile is driven)
            MMDrivenDistance += (MPH / 18000)
            if(MMDrivenDistance > 0.1){
                MMSpeedChecks:pushNumber(MPH)
                MMDrivenDistance = 0
            }
            
            #If the check count has exceeded 10 (1 mile driven), then automatically stop the measured mile
            if(MMSpeedChecks:count() >= 10){
                MMFinished = 1
                MeasuredMileRun= 0
            }
            
            #If the time elapsed passes an hour, the measurement will fail
            if(MMTimeElapsed >= 3600){
                MMFinished = 1
                MeasuredMileRun = 0
                MMCheckFailed = 1
            }
        }
        
        #Average speed calculation
        if(changed(MMFinished) & MMFinished){
            MMSpeedSum = 0
            for(I = 1, MMSpeedChecks:count()){ #This does a fancy thing called-
                local SpeedAtKey = MMSpeedChecks[I, number]
                MMSpeedSum = MMSpeedSum + SpeedAtKey
            }
            MMAverageSpeed = (MMSpeedSum / MMSpeedChecks:count()) #-literally the arithmetic mean
        }
        #Measured mile finished
        if(!MeasuredMileRun & MMFinished){
            if(MMAverageSpeed <= 0 | MMSpeedChecks:count() < 2){ #MM speed check invalid
                MMCheckFailed = 1
            }else{ #You are valid and are now going to brazil
                MMCheckFailed = 0
            }
        }
        #----
        
        #EOTD ID
        EOTDSetID = EIDStr:toNumber()
        
        
        #Display loading
        #Main display
        #------------
        if(changed(MainPage) | changed(OPControlsPage) | changed(LengthCounterPage) | changed(LengthChangePage) | changed(MeasureLengthFinished)){
            EGPMain:egpClear()
            EGPMain:egpLoad(MainPage, 1, 0)
            EGPMain:egpLoadButtons(MainPage, 1, 0)
        }
        #Button loading
        if(changed(MoreOptionsMain) | changed(MeasuringLength) | changed(MeasureLengthFinished) | changed(MeasuredMileRun) | changed(MMFinished)){
            EGPMain:egpLoadButtons(MainPage, 1, 0)
        }
        
        #Secondary display
        #-----------------
        if(->EGPSec){
            #Force-loading when porting pages
            if(changed(MainPagePort)){
                EGPSec:egpClear()
                EGPSec:egpLoad(SecPage, 0, MainPagePort)
                EGPSec:egpLoadButtons(SecPage, 0, MainPagePort)
            }
            
            if(!MainPagePort){
                if(SecPage == 0 & SetupScreenLogo){ #Setup page logo
                    holoCreate(1, EGPSec:entity():toWorld(vec(5.3, 0, 0)), SetupLogoScale, EGPSec:entity():toWorld(ang(90, 0, 0)), SetupLogoCol, "plane")
                }
                
                if(changed(SecPage) | changed(AirBrakePage) | changed(EOTIDSetup)){
                    EGPSec:egpClear()
                    EGPSec:egpLoad(SecPage, 0, 0)
                    EGPSec:egpLoadButtons(SecPage, 0, 0)
                }
                
                #Button loading
                if(changed(MoreOptionsSec) | changed(ABLockout)){
                    EGPSec:egpLoadButtons(SecPage, 0, 0)
                }
            }elseif(MainPagePort){
                #Nah
            }
        }
    }
    
    MB1 = MB2 = MB3 = MB4 = MB5 = MB6 = MB7 = MB8 = 0
    SB1 = SB2 = SB3 = SB4 = SB5 = SB6 = SB7 = SB8 = 0
}


if(clk("clkDisp")){ #Display updating
    EGPMain:egpUpdate(MainPage, 1, 0)
    if(->EGPSec){
        EGPSec:egpUpdate(SecPage, 0, MainPagePort)
    }
}
#----

#Key stuff
if(!User:isPlayer()){
    if(Driver:isPlayer()){
        User = Driver
        runOnKeys(User, 1)
    }
}

#Checks if the user has pressed a key
if(Running & keyClk() & !KeyTimeout){
    KeyTimeout = 1
    PressedKey = keyClkPressed()
    IsShifting = User:keyPressed("LShift")
    KeyCMD = format("%d%s", IsShifting, PressedKey)
    
    switch(KeyCMD){
        case "01", #Main buttons
            MB1 = 1
            break
        case "02",
            MB2 = 1
            break
        case "03",
            MB3 = 1
            break
        case "04",
            MB4 = 1
            break
        case "05",
            MB5 = 1
            break
        case "06",
            MB6 = 1
            break
        case "07",
            MB7 = 1
            break
        case "08",
            MB8 = 1
            break
        case "11", #Secondary buttons
            SB1 = 1
            break
        case "12",
            SB2 = 1
            break
        case "13",
            SB3 = 1
            break
        case "14",
            SB4 = 1
            break
        case "15",
            SB5 = 1
            break
        case "16",
            SB6 = 1
            break
        case "17",
            SB7 = 1
            break
        case "18",
            SB8 = 1
            break
    }
    if("12345678":find(PressedKey)){
        #Click sounds
        if(!IsShifting){
            EGPMain:entity():soundPlay(2, 0.25, "titus's locomotive sound expansion pack/resources/sd40-2/cab/controls/smallbutton/s_sd40buttonclicksmallona01.wav")
            timer("bOutM", 300)
        }
        if(IsShifting){
            EGPSec:entity():soundPlay(2, 0.25, "titus's locomotive sound expansion pack/resources/sd40-2/cab/controls/smallbutton/s_sd40buttonclicksmallona01.wav")
            timer("bOutS", 300)
        }
    }
    
}elseif(Running & keyClk() & KeyTimeout){ #Resets the timeout if the user stops pressing the key
    KeyTimeout = 0
}
if(!Driver:isPlayer()){ #Stops the E2 from running on keys by the last user (if the user gets out of the seat)
    runOnKeys(User, 0)
    User = noentity()
    KeyCMD = ""
    PressedKey = ""
    IsShifting = 0
}

if(clk("bOutM")){
    EGPMain:entity():soundPlay(2, 0.25, "titus's locomotive sound expansion pack/resources/sd40-2/cab/controls/smallbutton/s_sd40buttonclicksmallona02.wav")
}
if(clk("bOutS")){
    EGPSec:entity():soundPlay(2, 0.25, "titus's locomotive sound expansion pack/resources/sd40-2/cab/controls/smallbutton/s_sd40buttonclicksmallona02.wav")
}
soundVolume(2, 0.4)
